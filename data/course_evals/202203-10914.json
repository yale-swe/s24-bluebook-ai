{
    "crn_code": "10914",
    "season": "202203",
    "enrollment": {
        "enrolled": 105,
        "responses": 52,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                1,
                9,
                19,
                11,
                7
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                1,
                7,
                18,
                15,
                7
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                1,
                5,
                12,
                15,
                14
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                2,
                4,
                16,
                16,
                9
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                10,
                26,
                10,
                1
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                7,
                27,
                12,
                1
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "Learn OOP concepts, concurrent programming (for a few lectures), and useful software engineering concepts (version control, design patterns, refactoring)",
                "You will learn how to code in Python and other object-oriented languages. (C++ and Java are touched on). \r\nYou learn how to design object-oriented programs & projects, use logging, raise exceptions, design (simple) GUIs, write tests & evaluate your code, and build large projects.",
                "This class teaches you a lot of core programming concepts like OOP, concurrent programming, git, testing, GUIs, and more.",
                "I learned about object-oriented programming and significantly improved my Python coding abilities.",
                "Learned many new skills related to object-oriented programming and became much more aware about the official concepts behind this area of study.",
                "During this course, I learned about object-oriented design and the way that object-oriented languages are designed to solve common challenges encountered in programming. I gained many communicative skills such as UML diagrams and design patterns. I also gained skills that will be useful in general programming settings, such as resolving merge conflicts in GitHub, identifying design flaws in code, and writing testing suites for software. On top of the general knowledge about object-oriented techniques and structure, this course offered extensive practice working with Python 3 on all of the assignments and with in-class examples. The course also explored some further topics, especially parallel programming using multi-threading and multiprocessing.",
                "OOP design patterns (bulk of the second half of this course), git, a little bit of C++, OOP frameworks and guidelines, unit testing, building a GUI (using tkinter) and using SQL Alchemy to build backend databases.",
                "Familiarity with the OOP paradigm, design patterns, Python & C++, using git, concurrency methods, logging and error handling, databases, unittesting",
                "CPSC 327 teaches principles of object-oriented programming (OOP) in a way that is transferrable across OOP-supporting languages, but focuses on Python. Topics covered include OOP design patterns, refactoring techniques, concurrency, an in-depth look at Python (details about the Python interpreter and subtle details about built-ins and nuances of the language), and basic Git usage.",
                "Best Python and OOP class here at Yale. Extremely useful. You'll regret it if you don't take it.",
                "- Python\r\n- Java\/C++\r\n- Design Principles\r\n- Code smells\r\n- Abstraction\r\n- Inheritence \r\n- Basic object-oriented programming principles",
                "I learned about various object-oriented programming skills, like encapsulation, polymorphism, GUIs, and unit testing. I also learned how to write object-oriented code in Python and C++.  We also covered many different design patterns.",
                "By taking this course, I learned various object-oriented programming skills that are essential for any software engineering job. In addition to oop, I also learned SQL, design patterns, GUI development, Github, and code smells.",
                "I learned about object-oriented design principles and common design patterns used in OOP-style programming. I also learned about the programming language C++, testing, and exceptions, which were broad and useful topics.",
                "I learned about object-oriented programming, design patterns, Python, and C++.",
                "I learned how to use Python, and some industry best practices for writing code that is organized, well-architected, and efficient.",
                "OOP, C++, and some python",
                "I learned about object oriented programming in python, java, and c++, unit testing, GUIs, exceptions and logging, code patterns, and refactoring.",
                "Object oriented programming: mostly in Python, and somewhat in C++. Design patterns, code smells, refactoring techniques.",
                "Python programming and object oriented programming concepts. An introduction to C++",
                "Object-oriented programming concepts, Python programming, C++ basics, unit testing, working collaboratively on a programming project.",
                "Thinking in an object-oriented fashion, good coding practices, helpful design patterns."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "The first half of the course was very well developed and I enjoyed the lectures and content. The last bit where we talked about design patterns for a long time became very boring.",
                "The lectures included plenty of examples which made it engaging.",
                "The skills and knowledge gained in this course are absolutely essential.\r\nThe main strength is what you will learn. Every single topic covered in this class is highly valuable for any kind of high-level software development or complex project.\r\nObject-oriented programming should be a required class for all CS majors and anyone getting a CS certificate.\r\n\r\nThe assignment specifications are clear and detailed, the teaching staff are very responsive to questions and have office hours frequently. Lectures are recorded so you don't have to go in person.\r\n\r\nThe one single weakness of this course is that Tim Barron is a boring lecturer.",
                "The strengths of the course are the material that it covers and I like that we have quizzes after every lecture that forces you to keep pace with the material. The homework assignments were also quite interesting and made me a better programmer. The main weakness is that we spent a huge chunk of the semester learning random design patterns that didn't really need to be formally taught. I think it would have been better to spend that time learning more about the other topics in depth.",
                "Strengths: The problem sets were fun and useful to complete.\r\nWeaknesses: The lectures weren't bad, but they also weren't the most engaging either.",
                "The assignments and all the material was very well organized and structured which made the class very easy to learn from.",
                "The main strength of this course is the applicability of the material and skills that it teaches. Even as a physics major, I began applying the skills I was learning in this class in my research during the second week of the semester. Since a lot of physics research requires Python, especially in my area of quantum computing, I have no doubt that these skills will be invaluable in most if not all of my future research projects. The main weakness of this course, if any, was that it was too slow. I found it hard to stay engaged with the material because I was able to complete the assignments relatively quickly and the tests were not difficult. I liked the first assignment of the course, which had us develop a user interface for a bank and use the techniques we were learning over the course of several weeks to build this software. I also liked the pair-programming assignment at the end because I found it to be gratifying and a very valuable skill to learn. I think that more assignments could involve pair-programming. In my research, I find that more often than not I am writing modifications or extensions to an existing codebase, and I think more assignments teaching this skill could be valuable.",
                "I really liked the class, there were many strengths. Something I struggled on was keeping up with the consistency of the quizzes--forgetting many of these. Many will say that Prof. Barron is monotone, dry, however, I think he is a very clear speaker and if you listen closely to the things he says in class, they are very insightful comments that will make you a better programmer overall. I personally did not find the lectures to be boring.",
                "The lectures could be dry and code was not uploaded before lecture so it was hard to follow along with what Prof. Barron presented. The material was very interesting, however, and Prof. Barron organized the lectures really well so they built off each other",
                "The lecture structure and overall course organization are very good. The workload is manageable and directly related to the topics covered in class; the post-class quizzes help greatly with retention, and the lecture style combines live coding and review of full code examples with plenty of powerpoint explanation, a nice balance. One thing that could be improved would be some measure of attendance requirement, as very few students actually attend lecture, and my impression is that those who skip lecture rarely watch the recordings, and end up having a much harder time with the homework and the exams than necessary.",
                "Best Python and OOP class here at Yale. Extremely useful. You'll regret it if you don't take it.",
                "Strengths:\r\n- Course was very well structured and you learned a lot\r\n- Exams were fair and covered content from lectures\r\n- Homework was a very good way to learn\r\n- Lots of room for extra credit towards the end\r\n\r\nWeakness:\r\n- Lectures can sometimes be slow if there is a programming examples. I prefer more quick examples rather than long and complex one that might miss the point of what the actual concept is",
                "Even though we covered a lot of topics, this is by far one of the easiest computer science classes I've taken at Yale. The projects were not too complicated, but they were pretty fun (for example, we modeled the board game Santorini as our final project), and they were definitely closely related to all the topics we were talking about in class. \r\n\r\nFor me, the biggest weakness was how topics were covered in class. Often, when Professor Baron showed us code in class, it was difficult enough to understand that I had trouble grasping the main topic. It also seemed like he didn't always understand the code fully himself. I personally would have preferred much simpler code snippets that solely focused on the topics at hand.",
                "I thought this course was well taught. The problem sets went along with the lecture material and were all very insightful and rewarding. The lectures were engaging, especially for those who went in-person (would highly recommend).",
                "It makes most sense to have this course's lectures online. There was an extra credit incentive to come in-person, though there were little other incentives to attend in-person. For example, there is a quiz after class on the lecture material, but often it would be at least several hours after class before the quiz was available, thus there was an incentive to wait to watch lecture online until the quiz was available. Also, it is easier to watch lecture online for all the usual reasons. \r\nI thought psets were interesting and useful for the most part. \r\nOne issue was exam content. Java was only ever discussed in lecture; we never used it. However, there were some questions on Java on the exams, which seemed unnecessary. Also, on the final we had more complicated C++ questions than we had to do on the C++ pset, which seemed unfair. \r\nAnother issue is that the exams were memorization heavy. Instead of testing concepts, it seemed like it tested trivia. One could be very good at OOP programming and not do well on the exams.",
                "The grading was clear, the assignments were fair and the office hours were plentiful. The lectures were straightforward and recorded which was always helpful. One thing that could be improved is the participation point system; not only was it a bit difficult to know where you were at a given time (though the professor said it would be, and this is generally not a huge problem), but it seems that answering Ed questions was weighted very highly for participation, and this could be difficult since the competition to answer Ed questions meant that students had to be very fast to answer if they wanted to gain these participation points.",
                "The course gave a broad overview of Python programming and how it interfaces with OOP. The latter half of the course also dealt with C++. I liked the fact that the course gave me exposure to various topics.\r\n\r\nThe course felt dry at times, as the bulk of the class time was often devoted to looking at code files on the projector screen. This was mostly a passive learning experience. I would have liked to see more interactive components to the course where students can write and run code, for instance.",
                "I think in order to better teach object oriented programming, the class should switch to C++ like a few years ago. Since C++ is more strict on what should work and what shouldn't in a good object oriented design, I feel like I would have learned more with it than Python. Regardless, the class was taught well and I learned how to design good programs from the beginning that will scale.",
                "Strengths - fun psets\r\nWeaknesses - Lectures were not as enhancing as they could have been",
                "Everyone hates on this class but it is not a bad class. Professor Barron improves his course after every iteration, and 327 has been the most useful CS course I've taken at Yale so far. You learn practical applications of CS and industry standards (or at least ideals) when it comes to coding. I think an improvement is if Barron released the specs for the pset earlier, so when we were learning about the topics we needed to apply, we could have a background idea of how to connect our assignment to the lectures. The class could be dry sometimes, but I think the benefits (and general ease) of the class outweigh the dryness.",
                "It would be helpful if the lecture could be more interactive. It was hard to stay engaged with the lecture. The ULAs were super helpful in this course.",
                "I wish the lectures were more engaging, but I thought the psets were decent.",
                "Strengths: This course teaches relevant and useful programming skills for the \"real world.\" I can see object-oriented programming, Python, and unit testing skills being important to my career after university. \r\n\r\nWeaknesses: The code demonstrations in lectures were sometimes difficult to follow. I would have preferred more code \"highlights\" on lecture slides rather than lengthier code demonstrations."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "If you need an easier CS class",
                "Yes. Absolutely.\r\nIf  you are at all considering going into software development of any kind, this course is crucial.\r\nTruthfully, OOP should be a required class for all CS majors or anyone getting a CS certificate. It's literally that useful.\r\nI worked a software engineering job over two gap years writing object-oriented code. Most of the time I didn't know what I was doing, why code was written as it was, or how to do basic functions like testing my code.\r\nThen I would sit in an OOP lecture on testing, or design patterns, or logging, and I would think \"wow I wish I had known this.\"\r\n\r\nThis course is an absolute must-take. Do not skip it!",
                "A lot of Software Engineering internships and job postings are looking for OOP experience, so I would recommend it to anyone who has (1) never done OOP and\/or (2) wants to put OOP on their resume.",
                "Yes, it's a well-organized class that teaches you essential programming skills!",
                "I would recommend this course for the CS Certificate, a CS elective, or just to take if you want to become better at Python.",
                "I would say that this course is great for anyone who wants to improve at Python and learn object-oriented principles. However, I would say that the course reviews for the previous semester were inaccurate. This course is still a computer science course with a decently heavy workload. It's not as much work as 223 or 323, but it's also certainly not a GUT.",
                "Yes because it is a great introduction into a very important part of computer science so not only a very useful skill but also a well-organized course",
                "I would recommend this course to another student as a fifth course or an addition to their schedule. I think that this course comes close to maximizing the value\/work ratio, teaching very applicable skills with light homework and manageable exams.",
                "OOP is one of my favorite classes I took this semesterit teaches you a lot about how to program cleanly through the use of OOP techniques and design patterns. The skills you will learn in this class will be very similar to the skills needed in a software engineering job. I also really ENJOYED THE DEPENDENCE OF THE PSETS ON EACH OTHER (the first homework assignment will be to build a Bank Command Line Interface, the second will be to include exception calling and logging, the third will be to build upon it by making it a Graphical User Interface and build a database). Some may dislike this, however, Prof. Barron will provide the answer key to prior homeworks, so you won't have to debug prior assignments to start on the new ones. I also REALLY LIKED THE FINAL ASSIGNMENT - we had to use design patterns to implement Santorini; I personally worked with a teammate and was able to make use of git and it was really fun! \r\n\r\nHOWEVER, THERE ARE A COUPLE OF TEDIOUS ASSIGNMENTS in between like the unittesting assignment and implementing GUI, but starting and asking for help early will get you ahead. Seb and Gillian are rockstar TAs. Also assignments take reasonable hours - maybe 6-9 hours\/assignment? LEARNING ABOUT DESIGN PATTERNS, which take up the last 2-3 weeks of classes or so, can be annoying  many of them feel similar and repetitive but overall, you learn how to make your program cleaner by being familiar with a handful of them. There are also quizzes for every lecture, which I appreciate because it prevents you from falling behind on lectures, but they can be a lot sometimes (due Thurs, and Sat), which arguably are awkward times.",
                "This was one of my favorite courses I've taken. The material is really helpful to know for practical coding skills. Lectures could be dry and near the end a lot of it was Prof. Barron reviewing code he'd written ahead of time without uploading. But the psets were fun and I feel I was able to seriously improve my software design skills",
                "I would absolutely recommend this class if you're interested in Python and object-oriented programming. I'd coded a lot in Python for a couple years before taking this course, and now I'm going back and refactoring most of my old projects to use OOP principles when applicable. It's very helpful to understand this programming paradigm. If you're prepared to attend class, and not just skip and half-watch the recordings, you will have a meaningful and not-so-hard time with this course.",
                "Best Python and OOP class here at Yale. Extremely useful. You'll regret it if you don't take it.",
                "Yes, I would recommend this course! Whether you are a pure CS major or someone just doing the programming certificate, this course is perfect. It teaches you good design principles and other concepts\/tools that you might use in industry. It's one of the most useful CS elective at Yale!",
                "Yes I would! It's fun and not too difficult, so great for CS-adjacent majors or people trying to get the certificate.",
                "I would recommend this course to any student who would like to pursue a software engineering role in industry. The topics learned in this class are essential.",
                "Yes, just keep in mind that the grading is flat, so getting a good score on exams is very important!",
                "I would recommend this course to another student who wants to learn about object-oriented programming and Python. OOP is something that is used in the industry and is definitely a useful paradigm to learn about.",
                "I would recommend this class to anyone that would like to know how to design good software that could eventually scale, or if you wanted to take a very deep dive into Python and gain full understanding of what goes on behind the scenes in the language.",
                "Yes, if the student wants to get a lot out of this class and put a lot of time into making the OOP psets great, they can. But I didn't try that hard and still did really well on them",
                "Yes- it is a good workload CS class that is actually useful.",
                "I think that this class teaches important coding techniques. I'm not a CS major, but this class was helpful for the coding that I do for my STEM research. You probably won't enjoy the class, but I think it's good to take.",
                "Take it if you really want to, but I didn't get a lot out of the course and your time could probably be better spent with a more engaging CS course.",
                "Yes. This is a good course that covers useful topics. Professor Barron does a good job choosing relevant topics and also offers insights into how the knowledge and skills taught in class can be applied to software development in industry.",
                "I would recommend it to students who are interested in software development, as object oriented programming can be an important concept to learn. In addition, the course is a prerequisite for higher-level courses related to software development. However, I would advise those interested in other areas to take an elective more related to their interests."
            ]
        }
    ],
    "extras": {
        "title": "CPSC 327 01 - Object-Oriented Programming"
    }
}