{
    "crn_code": "20929",
    "season": "202201",
    "enrollment": {
        "enrolled": 202,
        "responses": 179,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                3,
                9,
                48,
                60,
                21
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                3,
                20,
                34,
                42,
                43
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                2,
                10,
                28,
                51,
                49
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                6,
                27,
                27,
                55,
                24
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                4,
                32,
                79,
                27
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                9,
                42,
                78,
                14
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "You gain a lot of white-board level understanding of algorithms in this class. You will be able to look at many programming assignments you've completed in the past and see what you did and how you can do it better. I think this class should be taken before more intensive programming classes, since you benefit more from this class if you do coding after, meaning that the concepts you learn in this class will serve you in the long run.",
                "You learn how to build algorithms, algorithmic concepts, run time analysis, proofs of algorithmic correctness, and NP completeness.",
                "lot of knowledge about graph theory, learned about dynamic programming and more formally about recursion, review of logic and proofs",
                "Proof and mathematical reasoning skills",
                "Various algorithms",
                "Understanding of key graph algorithms, complexity theory, time complexity, reduction strategies, network flows, recursion, analysis and design of algorithms",
                "I learned a wide array of paradigms for algorithm design, most of which revolved around the fundamental data structure of a graph. We covered greedy algorithms, divide-and-conquer, dynamic programming, network flow, and algorithmic complexity classes (e.g. P, NP, NP-hard, NP-complete).",
                "This was an amazing course content-wise... the problem sets and exams were well-written, fair, and truly showed me what I had learned. This type of thinking is so applicable. I will say, however, to READ THE BOOK. Wibisono's teaching style complements the book but does not provide all of the background that the reading does. If you only go to lecture and don't attend John's sections or the discussion sections, you may not do as well as you'd like. If you don't go to lecture... well, just go to lecture.",
                "Stable Matching Problem, Algorithmic Complexity",
                "Developed proof skills further. Graph algorithms: DFS, BFS, Dijkstra's, Ford-Fulkerson, Floyd-Warshal, etc. Learned how to reduce problems such as converting a bipartite matching into a max flow problem. Also explored complexity classes (P, NP, NP-Complete, NP-Hard) and how to prove which class a problem belonged to.",
                "I learned a lot about algorithms which will be useful for technical interviews.",
                "I developed analytical and problem solving skills.",
                "I learned about graphs, proofs, the stable matching problem, DFS, BFS, Dijkstra's algorithm (and other similar problems), Prim's\/Kruskal's algorithm, minimum cut in a spanning tree, flow networks, P\/NP-hard\/NP-complete problems, reduction of problems, and many more concepts.",
                "Algorithms.",
                "strengthened my understanding of algorithms and provided me the tools to make my own algorithms",
                "I learned about different algorithms such as Ford-Fulkerson, Depth First Search, and Breadth First Search. You also learn about different types of problems such as NP-Complete and NP-Hard.",
                "Learned many useful skills in problem-solving as well as solved problems that can be useful as reference in the future.",
                "Basic fundamental computer science algorithms.",
                "A good overview and knowledge of fundamental flavors of algorithms and ways of solving problems algorithmically.",
                "Little. I was able to glean a very basic idea of what a reduction was, and how to assess running time in algorithms. This class felt largely disconnected from programming, especially in the second half.",
                "learned a ton about algorithms and algorithm design",
                "I learned several algorithms that can be implemented, but I also learned how to approach problems with a new mindset.",
                "We learned about different families of problems and what kind of algorithms can be used to solve them. We also learned about the difference between problems in P and problems in NP, and the P=NP problem, which is a fundamental topic in computer science.",
                "Algorithms and efficiency",
                "This course really helped developed my problem-solving skills (for computer science) and made my approach to algorithms faster and more intuitive. I learnt a lot about the mathematics of algorithms through this class.",
                "Hiw to think in a way to solve algorithms problems",
                "I learned about algorithms for common search techniques, flow problems, reductions, constraint satisfaction problems, as well as how to write basic proofs\/justifications of correctness",
                "great introduction to algorithms and problem solving",
                "writing algorithmic proofs",
                "Im not all that much of a CS-oriented person; more of a math guy. So this course really helped me think about the math of graph theory in a more algorithmic way rather than the kind of static way present in graph theory and math 244. It also helped present more real life applications of such graph theory.",
                "Lot of proof based understanding of various algorithms",
                "Algorithms",
                "I learned how to solve and create algorithms.",
                "Knowledge of algorithms and algorithmic techniques- graph algorithm (DFS, BFS, Djikstra's), stable matching, minimum spanning tree, max-flow in network, NP-hardness. Also practiced proof techniques (induction, proof by contradiction)",
                "Learn how to do mathematical proofs in computer science and know many classical algorithms.",
                "Developed skills in algorithm analysis",
                "I learned about different types of algorithms and how to prove correctness of algorithms",
                "kinda how to do proofs and just formalize logic. Not really algorithms as they apply to the real world as much as just like theoretical proofs and stuff.",
                "Learned about a lot of algorithms",
                "Basic understanding of algorithms, time complexity, etc.",
                "I learned a lot about basic algorithms, proofs related to algorithms, and complexity.",
                "Correctness and efficiency proof techniques for various greedy methods including bipartite matching and graph traversals. Divide & Conquer and Dynamic programming. P vs NP, algorithmic reductions.",
                "Analysis and design of important algorithms. Prooving correctness and run time",
                "Basics of algorithms, time complexity, and applications of this knowledge",
                "Some of the topics covered were stable matching, search algorithms (BFS, DFS, Dijkstra's), MST, dynamic programming, flow of a network, the master theorem, and P and NP. We learned how to write and prove the correctness of an algorithm and evaluate its runtime.",
                "algorithms, dynamic programming, network flow, etc.",
                "An introduction to the field: its foundations and some results, as well as experience in creating and rigorously verifying algorithms.",
                "You don't write any code over the course of this class- it's all proofs and reductions about correctness and efficiency of algorithms and hardness of problems. You learn a toolbox of algorithms for solving problems on graphs, sets, etc, and apply them to various problems in the problemsets.",
                "Learned about different types of algorithms, how to design algorithms, prove their correctness, and also how to analyze the Hardness of algorithmic problems.",
                "I developed a good base of algorithmic knowledge. The course covered almost all of the important algorithms you'd see on a technical interview and provided a good foundation for later CS courses.",
                "The content we covered in this course was reminiscent of CPSC 202, but with more applications. Although I do not have any LeetCode experience, I felt like the concepts we learned here (DFS, BFS, greedy algorithms, and dynamic programming) are all very relevant to coding interviews and core CS content. I wish I had taken this class sooner.",
                "A lot of stuff about algorithm efficiency and dynamic programming. I think this will be really useful for future coding interviews because we did not code, but did a lot of conceptual problem solving.",
                "Algorithms theory and knowledge",
                "I gained significant knowledge in algorithms. The course did a great job in covering breadth and depth of the important algorithms, such as BFS\/DFS\/Dijkstras\/greedy\/dynamic programming. My proof skills also improved.",
                "Basic understanding of different prevalent algos and proving them",
                "I really learned a lot from this course. The algorithms are interesting. The problem sets are of excellent quality. My sense of algorithms was significantly improved.",
                "Intricately thinking about problem-solving",
                "I learned fundamental skills related to proofs and about a lot of different algorithms.",
                "I gained a much deeper understanding of algorithm design and how computer algorithms can be analyzed.",
                "Applications of algorithms in dating and marriage, graph theory, dynamic programming, complexity theory",
                "I learned about NP-complete problems, the sets of P and NP, NP-hardness, divide-and-conquer algorithms, big-O runtime of various algorithms, algorithms for searching graphs and finding shortest paths in weighted and unweighted graphs, minimum spanning tree algorithms, dynamic programming, recurrence relation notation, and the Master Theorem. One of the main things I got from the course was learning how to concisely describe and analyze algorithms in words (and how to use LaTex to do so efficiently). I also honed my problem-solving skills and practiced using creativity to come up with non-naive algorithms.",
                "You will learn how to analyze the motivation, time complexities, and application of algorithms.",
                "Foundational knowledge of different classes of algorithms, how to write proofs, and NP-completeness",
                "I grew my knowledge about algorithms in general and some fundamental concepts concerning them.",
                "In depth understanding of how computer algorithms work and their applications to real world scenarios",
                "I learned algorithm creation techniques, especially in memoization and dynamic programming, among others, as well as what goes into proving the correctness of an algorithm."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "The class was very organized, and the professor was very responsive. There were office hours and discussion sections each week, and those were very helpful. The Scribe notes were an invaluable addition, and should definitely be considered for other core CS classes, such as 323. The one weakness was the classroom: Davies had a horrible cable system and the screen was glitching all the time; additionally, the camera recording feature was a hit-or-miss, meaning you couldn't truly count on it, but that was not really the professor nor the teaching staff's problem, and they tried to help as much as they could.",
                "This class was one of the best taught courses at Yale. There were SO MANY resources: optional office hours on Fridays to review all of the concepts, ULA office hours, the best TA ever (John), lecture notes provided, scribe notes of all concepts... the list goes on and on. The class was very clear and well paced.",
                "Material is presented very well",
                "Strengths: scribe notes (TA written notes from lecture), good lecture notes Weakness: Everything was explained in very mathy\/proofy language which can be very difficult to decode for some people who are more visual\/conceptual learners.",
                "Strengths: Support from Professor Wibisono and TA John Lazarsfeld. Homeworks were challenging and brief, as it seems they should be for a class like this. Just a few problems that really require deep thought before tackling them. \r\n\r\nWeaknesses: ULAs were not the most helpful, their help often was problem-specific to a degree that meant the OH sessions weren't broadly educational but instead just helped on the particular homework problem they tackled. Course's scope is very broad, and it wasn't always easy to know which topics we covered were crucial and which ones were just \"flyover\" topics.",
                "I realize that a working knowledge of algorithms is essential to a good understanding of computer science, but this class was not the best. It was not nearly as bad as 202, but it again suffered from being not interesting. As someone who tends to do well in intellectually stimulating classes, this class was not stimulating enough to make me care. I realize this is not a particularly specific weakness. One specific weakness the class had this semester was that the assignments, psets and exams, other than the first exam, were not graded fast enough to be helpful.",
                "Strengths: Professor is super nice and had great lecturers, especially in the beginning of the year. Sought feedback and was open to suggestions from students.\r\nImprovement: Lectures gradually got less engaging. Wish professor asked a lot more questions in the middle of lecture to the classthis was really helpful in having us clarify and recall information during our first few Zoom lectures.",
                "Weakness: sometimes pset material was taught 4 days before the assignment was due. Besides that no weaknesses",
                "Strengths: interesting content, discussion sections, balanced problem sets.\r\nWeaknesses: disorganized and repetitive at times.",
                "I think the class lacked with engagement",
                "Strengths: Prof Wibisono, recorded lectures, reasonable exams and problem sets, scribe notes, Ed discussions, problem set walkthroughs, good amount of office hours\r\nWeaknesses: I wish problem set scores were returned faster",
                "Dr. Wibisono is really patient, kind and responsible. The lectures are well organized and really interesting.",
                "prof wibisono and the entire teaching staff were amazing!!! they put so much time and energy into making this course as educational as possible. exams were reasonable, there were pset walkthrough AND review sessions, and prof wibisono switched up his teaching method so many times to accommodate people. honestly, i learned so much in this course",
                "The lectures were quite frankly not that good. I learned a lot more from the book.",
                "Strengths: TA's were supportive and discussions helped as well. Weaknesses: Professor was great; however his material was a bit difficult to comprehend sometimes.",
                "Strengths were that it was very well organized and the material was well prepared. The course was also very well supported by ULAs and TAs and other Discussion material. Weaknesses were that the material was a bit confusing at times and lectures were poorly timed (some too fast and some too slow).",
                "The lectures were pretty dry but helpful. Psets were doable and pretty interesting.",
                "This course could stand from a more intuitive approach to explanation. The lectures focused on so many extremely technical explanations of formulas and not very much on proof demonstrations. Also, we spent far too long on the bipartite matching algorithm. The graphic professor Wibisono made with the mario characters was very cute and a good way to explain the algorithm, but that was probably one of the easiest parts of the class so when we spent multiple lectures and a large section of the final review on it, we were really just wasting time.",
                "strengths: lecture content\r\nweaknesses: grading harshly on proofs",
                "The lectures are a great asset to learn the material. I thought another strength of the course was the pset walkthroughs and review sessions. Those were very helpful in increasing my understanding.",
                "A lot of good things, like review sessions, and scribe notes that TA's take. However feedback on PSETs, one of the most important things, could be improved, as practically half of the grades came in 2 weeks after the last exam. Feedback on PSETs is far more important than any amount of review sessions, etc, since we can see what problems we specifically have. In review sessions, we do review knowledge, but it is quite passive, and we can't see where we would have gone wrong in a real problem solving situation. Though I ended with an A, I know for a fact that I could have done 3 letter grades better on the last exam if I'd gotten feedback on a problem set before it.",
                "The course moved a bit slowly at times, so we did not cover all of the concepts we were supposed to cover. But lectures were usually engaging and homeworks were helpful in solidifying concepts.",
                "The course is very well taughteveryone from the professors to the TAs to the ULAs put in a great amount of effort to make sure it went smoothly (discussions sections and scribe notes were an added bonus). \r\n\r\nSince it was Prof. Wibisonos first time teaching algorithms, there were some hiccups as he tried to figure out the best mode of delivering lectures. However, he was super adaptable and always listened to our needs!",
                "Strengths: easily accessible lecture recordings are a huge benefit, and the course textbook is really easy to follow. Weaknesses: none.",
                "Strengths: faculty\/TA support -- Wibisono really cares about his students, the TF, John, is also really approachable and knowledgeable, I liked the discussion sections, exams were well-written and reflective of what we'd learned in psets and review sessions Weaknesses: relatively slow pace of lectures in terms of content covered -- we'd spend a few lectures on the exact same topic\/one proof",
                "This class is insanely well organized and Wibisono does his best to make everything as easy to access for you as possible so that you can focus on the work.",
                "Strengths were the scribe notes that were uploaded. They provided a very concise summary of the course. Another strength of the course was the uploaded lectures. Overall, there were a lot of resources uploaded that were very helpful.\r\n\r\nWeakness was the pace of the lecture. While Wibisono evidently tried his best to explain the course material, by the end of the semester we were two weeks of course material behind. Also, it was pretty clear that this was Wibisono's first semester teaching algos, but I believe in him for the future.",
                "The course material was super fascinating and the problems were very satisfying to solve. But I kind of wish the course was harder. I understand that 366 exists, but 366 has an obnoxious no-collaboration policy that I felt was a dealbreaker given my already difficult schedule. I just want to tackle some actually difficult problems with my pals, is that too much to ask?",
                "It's very good.",
                "Strengths: ULAs and TFs were very helpful. The scribe notes that staff posted were very helpful. Professor Wibisono was also responsive to student concerns about lecture style and deadlines. \r\n\r\nWeaknesses: Some of the pset deadlines were rather tight: for instance, one week to do the first two psets. Additionally, multiple choice was heavily weighted on the exams (which makes demonstrating knowledge for partial credit difficult).",
                "The course gives me an understanding of theoretical computer science.\r\n\r\nIf the professor can explain more about the intuition of those algorithms, it will be perfect.",
                "It could not be improved, Professor Wibisono made it extremely organized, rigorous, and accommodating",
                "Lectures were just so so dry. Andre definitely cares a lot and is so kind, but class is just an hour and a half straight rambling. Also just so theoretical and proof based. Has potential to be a really fun class if we ever used any algorithms instead of just proving them.",
                "This class is so incredibly well organized",
                "Teaching isnt that related to the actual pset content",
                "Strength: Very useful topics. Great support from ULAs.\r\nWeakness: The lectures seemed to repeat a lot of information. Like we would talk about something in one lecture and then keep going back to it in the upcoming lectures. The prof could also do a better job explaining the proofs instead of just reading\/writing them out.",
                "One thing that I felt was lacking was instruction in how to grasp the intuitions of proving complexity class membership. Often it felt like I had to simply get lucky and have a magical stroke of inspiration to solve a NP-completeness proof, and otherwise I didn't have many tools to work with to solve such problems formulaically.",
                "The class was well paced! I think that made it much easier to follow along and even if there were times where it went quickly, enough review happened that there were opportunities to catch up or ask questions.",
                "The course supplied almost endless possibilities for students to get help and solidify the materials. Lectures were in-person, livestreamed, recorded and re-recorded, there were both slides and use of the chalkboard, typeset notes, tons and tons of office hours, TF review sessions, the list goes on and on. This course is set up to maximize the odds of student success.",
                "Very well organised\r\nAlways takes our feedback into account",
                "The course wasnt that well organized - the walkthroughs wouldnt be that helpful for problem sets because the lectures themselves were not well done. Most of my time was spent on the internet trying to teach myself the things the lecture was supposed to teach us. The lecture was also not interactive which I thought was the biggest issue because Prof Wibisono would just read off the slides.",
                "Strengths: Wibisono, TFs, ULAs, and note transcribers did a great job! They were well organized, helpful on EdStem and during office hours, and receptive to feedbackthey made adjustments on the lecture format or pset deadlines as deemed necessary by class sentiments. Weaknesses: perhaps we could have gotten practice exams or questions that were slightly more representative of the types of questions on the midterm and final.",
                "The biggest strength of this class was the teaching staff and Professor Wibisono. There were so many opportunities to get help and the teaching team really cared about students' opinions on how the course was being taught. The PSETs were spaced out reasonably and the midterms were challenging but fair. The material is interesting and tough, but the teaching team helped make the class feel manageable. Sometimes I do feel like there were grading discrepancies depending on which ULA was grading your PSET.",
                "strengths: content was super interesting \r\n\r\nweakness: lecture style was a bit inconsistent at times",
                "I would have preferred more content.",
                "Strengths: relatively unpunishing workload, much less brutal than many of the other CS required classes. The material was interesting and the tests were fair. \r\n\r\nWeaknesses: the pacing of the class was a little inconsistent, where it didn't feel like the lectures were evenly distributed with respect to the complexity present.",
                "There was a lot of support given, which made the course better. The discussion sessions and message boards were really great in helping review content, and also it was nice how the slides were always posted, as well as the scribe notes.",
                "The course was well-organized by professor Wibisono and the TF\/TAs. I think we fell behind a lot in class and had to rush to catch up, so it would've been nice to stay on track and have more time with the lecture content and practice problems.",
                "Strengths: Many many venues for help!! (I appreciated all the office hour options, discussion sections, Ed posts, and recorded reviews and homework walk-throughs, they were all extremely vital to me passing this class), extremely fair exams that reflected the practice midterms and homework\r\n\r\nWeaknesses: Prof Wibisono's later lectures were difficult to tie back into what we were learning, while I could follow the logic I would get lost in all the very-proof heavy content, some of the first homework assignments were very dense despite being worth less than the second half of the homeworks",
                "I thought it had a decent balance tbh",
                "I honestly loved this course!",
                "The class was very well taught.",
                "scribe notes were incredibly helpful when posted",
                "lectures could be more engaging. less writing down just math",
                "Strength: lectures, discussions, and problems sets together really laid a solid foundation for us students to master this course. I love the problems sets. \r\nNo weakness.",
                "Loved the course, I wish there were more applications taught.",
                "This course was incredibly done. Key strengths include the plethora of office hours (both in-person and virtual) and the discussion sections every week. Although the material was challenging, I had many opportunities to ask questions and learn more.",
                "The course was a very large lecture, so it was understandably hard to stay very engaged with all the lectures, but the problem sets were very fair, and the exams were also reasonable given the course material.",
                "Strengths: slides and lecture materials were very well designed\r\nWeaknesses: talking more about the real-world applications of algorithms would be beneficial",
                "The strengths were the amount of support offered by the ULAs. They were very knowledgeable and helpful. Weaknesses were the ever-changing style of teaching. Sometimes we used a blackboard and sometimes we used slides. Although some people prefer one over the other, so it spreads the teaching style to try and cater to everyone, it is somewhat confusing to follow along, so I didn't come to class that often and opted for watching the recording so that I could replay the lecture.",
                "Strengths - Prof and ULA's seem to care. Weaknesses - The teaching style kept changing and it was extremely hard to follow\/take notes.",
                "It was one of the most organized and professionally taught\/managed courses I've taken at Yale. Teaching was excellent, and there was an incredible amount of resources even besides the lectures (which were recorded) offered to help students learn. It was cool that Prof Wibisono switched between using slides and the chalkboard. One possible weakness is that sometimes Prof Wibisono just pretty much read or copied the slides during the lectures, but he still did a great job doing so and presented some additional diagrams on the chalkboard. I did feel like a lot of lecture time was wasted repeating material from the previous lecture (not typically done in college courses), which led to us not getting through all the material that was promised in syllabus.",
                "The psets were well structured",
                "I thought the course was very well taught, appreciated the optional sections, and almost every aspect of the course.  I am honestly only sad that we did not get to more material, in particular the approximation algorithms."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "If you're taking this class, then you most likely *have* to take it. The majority of the students are CS or CS+X students, so this is not really a recommendation, but more so a note that you can do well in this class if you put in the effort: other CS classes take a much more hands-off approach, whereas this class the professor does actually guide your learning, so you'll be okay.",
                "I mean, only take it if you need it. That being said, Andre IS THE BOMB. He is one of the best professors I've had at Yale in my 3 years here. He is clear, well organized, and super accommodating (getting class wide extensions on the PSETS was never an issue). The way Andre ran Algos seemed to be very different from professors prior and he implemented so many new great avenues to learn from: course staff written scribe notes, lecture notes, weekly optional discussion sections, and plenty of office hours options. I generally HATE PROOFS, but this class wasn't so terrible at all and graded pretty leniently when it comes to the little details of proofs. I don't know if Andre will be around in the future, but if he is: TAKE HIS CLASSES!!!",
                "yesas I said earlier, I think the material was useful and the professor was great",
                "Yes. For CS majors deciding between CPSC 365 or 366: I took 366 and dropped it for 365. Intensive algo for me was difficult and the material was not presented as nicely. In 365, everything is motivated well and the coverage is also broader and feels less arbitrary.",
                "It's required for CS majors",
                "Requirement for CS majors. If for some reason this is a non-major course for you, taking it cr\/d\/f could be a great idea. Material is interesting and casts a pretty wide net over algorithmic topics.",
                "I took this class because it is a requirement of the CS major. I would not have taken it otherwise because algorithmic design and analysis, although important, are not particularly interesting to me. If you are interested in these topics, then it will probably be a more interesting class. If you have a strong math background and\/or are willing to put in the work, take 366 instead.",
                "For your major, absolutely! This is a very specific type of class that teaches theoretical math behind algorithms, so know what you're jumping into before starting!",
                "Yes for the CS major. Learn many nifty algorithms that are efficient and are versatile to solve many problems through reduction.",
                "I recommend this course if you are looking to develop your understanding of algorithms, especially if you are planning on trying to do technical interviews in the future.",
                "I personally don't like this subject, so only if they are interested in the topic or have to take it for their major!",
                "If you are a CS major you probably have to take it. If Professor Wibisono is teaching it, I would highly recommend taking it with him.",
                "Sure. The course is interesting and challenging.",
                "yes! like, you probably have to take it anyways. but i think this semester this course was so well taught and i really think the material i learned in this course will be so important for any CS i do in the future.",
                "It is required fro the major...",
                "I would since it is a requirement.",
                "Yes, but if you aren't a CS major make sure you are very interested in algorithms and problem solving and have enough time to invest in the class.",
                "Yeah great class. It will help your understanding a ton.",
                "Not the most interesting class but Id rather take it with Prof. Wibinoso than Glenn.",
                "you prolly have to take this course so do it",
                "Yes, I would. It is a great class that you will make you learn to approach problems in new ways.",
                "You have to take some sort of an algorithms course for the CS major. If you're not a CS major but are interested in CS, you should still take an algorithms class because of the fundamemtal concepts in CS it teaches you.",
                "Absolutely! I would suggest that every student take this over 366, which is less well-organized and does not have recorded lectures or discussions. The grading in 365 is much consistent as well.",
                "Yes -- Prof Wibisono makes it very manageable, even for students who aren't super familiar with algorithms or rusty on their 202 knowledge. The course is very predictable and organized",
                "Yes",
                "If you are a cs major, you have tot take this course. Otherwise, I'd say grinding leetcode is a more practical way to learn algorithms.",
                "I would recommend this course to any student with the sufficient mathematical knowledge. It may be a CS course, but your success will be predicated on graph theory knowledge, NOT coding expertise.",
                "Yes.",
                "This is a required course for the CS majors. I would probably not recommend this course to students who don't need it as a required class- it is a very time-consuming course and generally quite rigorous. For the algorithms enthusiast who just wants to learn about different algorithms and how to use them, there are other places to learn that. But for a student who is serious about learning about proving the correctness of an algorithm and\/or its runtime, this course may be an option.",
                "Yes, if you want to learn more about computer science, you can choose the course.",
                "I would recommend this course to another student , especially if they are in need of an elective or it's part of the degree track",
                "Very much so, especially with Wibisono",
                "Obv you have to take this as CS major.",
                "No, unless mandatory",
                "Useful (and required lol) for cs majors",
                "Yes, if only because it's required and teaches key CS topics that are important to understand going forward.",
                "Yes! I really enjoyed this class with Prof Wibisono. There was never a topic where I felt like I was completely lost (at least not for too long) and I really enjoyed Prof Wibisonos teaching style.",
                "Professor Wibisono is a gem. His teaching style, organization, and explanations are all top-tier in the CS department and I hope the department treats him well over the years. Do yourself a favor and take this class with him!",
                "Only if you have to take it",
                "Yes! I learned a lot about algorithms and applications, and while I was thoroughly challenged, the workload was still manageable. I'm happy I chose this over 366. Wibisono cares a lot about the class and adjusts based on student feedback.",
                "Yes, all CS students should take algorithms. 365 is much more manageable than 366 from what I heard, and Professor Wibisono is an excellent instructor to take the class with.",
                "yes",
                "Required for major.",
                "If you have to take it, you have to take it. It won't be as bad as 323 but it won't be as easy as 201. If you don't have to take it, only take it if you're into the analytic\/proofs side of CS.",
                "Yes, definitely take this over 366 with Spielman. It is a basically stressfree learning experience where you get to go deep into many topics in algorithms. I definitely would recommend doing the readings if you wish to get the full experience and be very well versed in the topics.",
                "I'd recommend the course if you have to take it or have a strong interest in algorithms, to begin with. It's a fair bit of work and one may struggle to stay on track if they are not engaged with the material.",
                "It's a mandatory course, but if you can take it with Prof Wibisono I think it's a lot more manageable than other profs. Apart from that, maybe if the student wants to learn the theory behind algorithms that are famously seen in coding interviews",
                "Best class I have ever taken at Yale, and the best professor to take it with.",
                "Yes",
                "Yes!! Crucial course for CS majors.",
                "yes definitely. algorithms is a very important topic for any computer scientist.",
                "Don't take this as a first-year. I have learned my lesson the hard way.",
                "Yes. This course is a must-take if you want to learn more about computer science, especially if you're going to be an SDE in the future. The workload is in control. It's understandable as well. You can get a satisfying grade if you wish.",
                "Yes, loved it! You should take it to learn about the formal approach to problem-solving.",
                "Yes, I would highly recommend this class to anyone interested in fundamental computer algorithms or anyone who wants to pursue CS after school. A lot of the algorithms covered are very helpful for coding interviews! You will not get any hands on coding experience, but you will understand fundamental concepts.",
                "You probably will have to take this course for the CS major, but it was definitely doable. The scribe notes that were provided helped a lot, and all the lectures were also recorded, which also helped.",
                "Yes, I would! Especially if you are a CS student. Taking Algos with Wibisono really helps you think about problems in a more fascinating way.",
                "Requirement for CS majors",
                "Yes. You'll probably only take this course since it's a requirement, but if you're not a CS major you might enjoy it (although it's a lot of work and kind of stressful because it's so big). You'll do some interesting problems with real visible use cases, like trying to design the algorithm that Tesla has to use to figure out how much battery capacity is needed for their cars based on the layout of their supercharger network, etc. I thought Wibisono was an excellent teacher, and there are a ton of resources to learn. Very well-taught.",
                "Yes - Wibisono is a great teacher and was very flexible with the students. He provided plenty of resources through the ULAs and TFs to aid the students in their learning.",
                "Only if you have to take it",
                "Yes, it teaches you knowledge that is just good to know if you're interested in learning more about how computers work.",
                "Yes its a crucial class for any computer science major",
                "Yes"
            ]
        }
    ],
    "extras": {
        "title": "CPSC 365 01\/ECON 365 01 - Algorithms"
    }
}