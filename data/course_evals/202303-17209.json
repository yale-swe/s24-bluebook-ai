{
    "crn_code": "17209",
    "season": "202303",
    "enrollment": {
        "enrolled": 140,
        "responses": 69,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                5,
                14,
                21,
                15,
                8
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                4,
                20,
                20,
                13,
                6
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                3,
                14,
                20,
                17,
                9
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                5,
                13,
                23,
                17,
                4
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                4,
                19,
                33,
                7
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                4,
                15,
                32,
                12
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "Recursion, Turning machines, Assembly, Booleans and circuits",
                "Knowledge of programming in racket. some other basic cs principles.",
                "Time management, dealing with frustration, learned Racket, important CS ideas like recursion, lambda, time complexity, and Turing machines",
                "I learned many theoretical topics in computer science which strengthened my understanding of the world as a whole. I also used recursive thinking consistently, which allowed me to simplify problems and solve them efficiently.",
                "Learned topics in computer science including Racket, recursion, Turing machines, gates and circuits, UNIX, etc",
                "I learned the language Racket and principles of computers like logic, architecture, etc.",
                "Racket I guess?",
                "Very solid understanding of recursion and a decent working understanding of the other foundational topics of programming and CS (though I found the final difficult so I'm kind of questioning that). I also learned what its like to struggle with a programming challenge on the psets. It probably took me longer to complete the homeworks than most people, but I don't regret the time I spent really digging into trying to solve each challenge independently. The course has a way of just giving you a taste of a lot of foundational topics about the magic of computers that will get you interested for future classes.",
                "Recursion, racket, basic machine code, computer architecture, really not much useful stuff.",
                "Recursion, computer architecture, computational complexity, Turing machines/computability, strings, and more. Racket programming language; while not practically useful, I learned how to solve problems and enjoyed many of the problem sets.",
                "I learned basic introductory Computer Science topics and greatly increased my proficiency with recursion.",
                "We learned a lot of the basics of computer science. It is really helpful to have a programming background because it makes learning Racket that much easier. It is not an intuitive coding language for anyone who is new to the principles of computer science.",
                "Learned about assembly language and recursion.",
                "The main skill I learned was proficiency in recursion, a key thing to take with me in my computer science journey. Additionally, I gained knowledge in numerous fields that meshed well with CGSC 110 Intro to Cognitive Science because I was able to apply the ideas that we learned in class to actual machines such as Turing Machines and Context Free Grammar. Also, learning more about Computer Architecture was also rewarding.",
                "I learned a lot about recursion and how to learn a new programming language. I also learned a decent amount of computing theory.",
                "I gained experience with solving different types of coding problems, particularly recursion. I learned Racket. I also learned about other topics within computer science such as Turing and Von Neumann Machines.",
                "I developed a very good understanding and appreciation for the very basic principles of computer science. This course was a very manageable introduction to the Computer Science major, and I highly recommend making use of the class's great resources.",
                "Basic computer science topics such as boolean gates/circuits, Turing machines, computer infrastructure, etc.",
                "TC-201 assembly, turing machines, racket code and recursion",
                "Feel much better about recursion, knowledge of racket, turing machines, and unix",
                "I was introduced to a lot of the fundamentals of computer science.",
                "basic coding skills, recursion, how computers work, strings + tokens, turing machines",
                "I learned a new functional programming language through which we studied recursion, Turing Machines, computer architecture, grammars, boolean expressions and circuits. The problem sets helped us apply the knowledge that was presented in the lecture.",
                "Racket coding",
                "recursion recursion recursion. also a lot of very hardware-oriented units when we talk about turing machines, toy computers and their memory usage, and wires/circuits. psets are more like logic puzzles, instead of coding, since they usually have a big theme for each one. overall self-taught with the guidance of the psets.",
                "Understanding of the Assembly Language, Binary, Racket, Recursion, Turing Machines, Context Free Grammars, Deterministic State Acceptors, Regular Expressions, Unix, Circuits, Booleans, Sorting Methods and Big O Notation.",
                "This course definitely made me better at recursion. I also learned a lot about turing machines, boolean expressions, digital circuits, assembly and computer architecture, and some ideas in computational linguistics. We definitely covered a lot of big ideas in a good amount of detail in this course, and programming it all in racket really made me think about and understand everything I was doing because programming in racket is NOT natural. I also learned A TON of unix, which was very painful but will hopefully be helpful. I'm not sure that there is a way to learn unix that isn't very painful, and it does seem like it's important. This course will definitely teach it to you.",
                "I developed a greater ability to approach computer science problems.",
                "Racket programming language, recursion, assembly language, turing machine. It made me conceptually think better as a programmer as we learned how computers work fundamentally.",
                "Knowledge of computer science theory, such as Turing machines, recursion, and computer architecture",
                "I learned how to think recursively in the first few weeks of the course. I also think that some of the concepts the course presents you with are very interesting, though the course does make the process of learning them unnecessarily tedious and lacks any sense of direction.",
                "learned unix, recursion, computer architecture, racket",
                "I learned how to code and racket and about recursion.",
                "Recursion",
                "I learned how to create recursive functions, interacted with various styles/types of programming, and learned about multiple theoretical fields in computer science.",
                "Learned how to code in racket, basics of coding and some fundamentals.",
                "A much greater understanding of recursion. The biggest skill I feel like this course helped me develop is realizing a lot of college studying is on your own as I had to figure out a lot of things on my own.",
                "Racket recursion",
                "I developed my skills devising algorithms to solve problems, gained a more complete understanding of how computers work, and learned the nuts and bolts of other key processes and models in computer science.",
                "I learned how to use a new language called racket.",
                "I learned a lot about how to take college-level computer science courses, how computers execute instructions, and how to approach solving coding tasks.",
                "racket skills, recursion, unix skills, thinking like a coder in a more intuitive way",
                "An introduction to Racket and function-oriented programming, and a thorough understanding of all computer science topics covered."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "Never showed up to class after the first week, Only around 20 out of maybe 200 kids in the class consistently showed up after the first week, the pros were that good lecture notes were provided which would easily substitute the class, and the Psets were enjoyable and reinforced learning.",
                "lectures were basically useless - most knowledge was learned from hands on learning through psets or reviewing past lecture summaries.",
                "The strengths include online resource videos \r\nThe course discourages collaboration. I think it might be beneficial to have section times where ulas would go over similar problems to the psets.",
                "This course is strong in that the topics are very interesting and helpful.\r\nHowever, the lectures were extremely boring and didn't do much teaching. Rather, it felt like consistent ranting about the historical background of these concepts.",
                "It serves as a good foundation for critical topics in computer science and is challenging for all students, regardless of computer science background. Some concepts, specifically Racket-based techniques, have no applicability beyond this course.",
                "The psets are really well-structured to facilitate your learning of the course material and prepare you for evaluations.",
                "I dont think we should learn Racket. It is useless in both academic and professional settings. It also does not serve as any sort of foundation for higher level languages.",
                "I think the course touches on interesting stuff, but it favors breadth way over depth which is horrible for learning.\r\nThe lectures were super boring.",
                "Strengths: A LOT of resources provided by the course to help you learn and reinforce the topics. All lectures are recorded, there are tons of office hours, there are lecture slides, YouTube tutorials, ULA Exam Review Sessions (also recorded), etc. ALL provided by the 201 course. I pretty much never had to seek any outside YouTube or internet help to learn anything. You are given homework late days to ease the deadlines, and even a couple extra credit opportunities. All of it is pretty well organized once you get past the original hurdle of figuring out how to navigate the course website. Weaknesses: Lectures are not bad, but not super engaging either. Also, since the pset grading is automated, there is pretty much no feedback on homework, so if you miss stuff you're kind of on your own to figure out what went wrong. I also thought the final was pretty hard.",
                "The course has so much potential because it covers so much interesting stuff, but Slade just skims over the top of everything and makes it so unengaging. I think this class could be worth taking, but it just covers such a different topic set than 223 and 223 is so much more useful for people trying to find internships.",
                "Strengths: Slade is a very knowledgeable professor, problem sets well made, TAs are amazing. Solid course topics for introduction to computer science class.\r\n\r\nWeaknesses: Notes are incredibly unorganized, professor does not discuss exam material during lecture (often just refers to the notes)",
                "The strength of the course are the PSETS. Although time-consuming, they truly help you learn the material and are pretty interesting to work through. The weakness of the course are the lectures which tend to be boring and sometimes unhelpful.",
                "There are a lot of opportunities for office hours to get help throughout the term on the (almost) weekly Psets. However, they can be canceled or modified without advanced warning so be prepared. Lectures are recorded so if you need to watch them later, they are always available. Classroom instruction doesn't help too much with the Psets.",
                "Strengths -- great PSETs, review sessions, and review material online. The YouTube channel dedicated to 201 was also extremely helpful in solving the PSETs and understanding everything conceptually.\r\nWeaknesses -- the lectures weren't particularly interesting, so I found it more worth to just read the class notes online and watch the parts of the lecture recordings that I needed to solve the PSETs.",
                "I love the organization and the way there are so many resources to help us. A small fix: I would move the how many hours question to the bottom of the pset right before the tests. I would fill out the hours question before I did the pset so I didn't forget, and that meant that my answer was a total guess. Some ULAs never held office hours or scheduled them at very inconvenient times, which made life harder for the ULAs who were trying to help. I also think more coordination between the different resources would be helpful. For instance, the Unix tutorial sometimes covered slightly different commands than class. Also, it would be great if you could replace the irrelevant questions on the practice tests with relevant questions. The practice tests were very helpful, and because the exams are so different from the psets, when an exam question comes up which doesn't look like something on the practice test it is hard to have known that we should have studied that.",
                "I thought the topics of the problem sets were very interesting and made me think about programming in a way I hadn't before. However, I didn't find lecture to be that helpful as I felt that I did the majority of my learning on my own through working on the problem sets.",
                "I think all students would benefit greatly from a lot more engagement with the class. Most of the students never went to a single lecture and were consequently only showing up to take the quizzes. This is not Slade's or the ULA's fault, but as a student who went to every single lecture, I think my experience in this course would have been a whole lot worse if I hadn't had the help of the amazing instructors that this course has.",
                "Strengths: the topics covered were interesting and I thought they were presented in an easy to understand manner. \r\n\r\nWeaknesses: a lot of class time was wasted with random videos and activities that had little relation to the class content.",
                "Lectures are not very engaging and the content can be presented in a more interesting manner; the psets are often long and not closely tied to meaningful areas in the CS field and the course examinations themselves. We also had very very little practice content for the exams.",
                "It took forever to ask a question during office hours because there are so many students, maybe need more TAs or more times\r\n\r\nBut I liked that all the course info and recordings were posted online and the review sessions were great",
                "A strength was that there were a lot of resources (office hours, ed discussion, etc.) available if we needed help. Also, the problem sets were challenging but very effective in building understanding of content and the exams were very reflective of what we'd learned. An improvement is that I think the class covered some things too quickly at the end, such as object-oriented programming.",
                "the problem sets are amazing - after each one, I felt I understood the concept so much better",
                "One of the strengths is that we learn UNIX, which is an extremely useful skill to have. The problem sets help you take the concepts and understand how they can actually be implemented and the potential uses they have.",
                "professor slade is very knowledgeable but doesn't present the content in a way that makes that knowledge useful. lectures consist of 1) first 40% of the class time with logical problems and videos of the day (usually not associated with the curriculum like 75% of the time) and 2) professor slade reading off lecture notes or giving out pset answers without a lot of explanation behind. topics are mostly interesting for me personally, but i don't think they were brought out to full potential just because of the teaching style.",
                "Lectures were extraordinarily slow. Most people don't go and watch the lectures online on 2x speed. One issue was that the lectures felt only tangentially related to what we were doing on the psets and what we were studying for midterms. I know people who didn't look at the lectures at all and did well in the course. Strengths were that I learned a ton of important CS stuff and had fun programming. Course in general was a little rough though. Spent a ton of time on this class.",
                "The organization of this course was all over the place. Lecture notes covered more than what was necessary to know, frequently in very confusing and overcomplicated ways. There are links within links within links, with different lecture notes from different professors that taught the course in the past. It is very hard to find anything again once you've found it once. In addition, lectures go over material long before it appears in the homework, so you're usually stuck on the previous homework, re-watching old lectures because you weren't ready for that material the first time, while the new material is being covered but doesn't make any sense because you haven't gotten there yet with the homework. The most challenging aspect of this course was figuring out how to learn the material efficiently and effectively. I determined that not going to the lectures was best, and instead watching them on 2x speed along with working on the homework was the most efficient and effective strategy. So if the pacing of the lectures is to remain the same, having them recorded is essential. In terms of studying for exams, the materials were also all over the place. I highly recommend focusing on the TA review slides. The practice exams were also very confusing, particularly for the midterms, because at least half of the exam problems would be from a different iteration of the course or we hadn't gotten to that material yet, and were not responsible for knowing it. So it was hard to predict what exams would look like. The strength of this course was its material! I really thought everything we learned was very important and the homeworks were great (you will do most of your learning from the homeworks). I just wish the course was better organized to facilitate learning this material.",
                "I liked the help offered such as office hours and Youtube videos.",
                "Weaknesses\r\nEspecially for the later homework assignments and class material (CFGs, DFAs) I feel like the approach taken in the homework assignments was very different than what was expected from us in the final exam. This made it exceptionally difficult to know what to expect for those students who focused on studying via the homeworks and class materials instead of straight from the practice exam given to us.\r\nThis course suffers from a lack of a sense of direction. It looks like we are learning miscellaneous CS topics with no clear aim or uniformity.\r\nStarting at Homework 5, the assignments are excessively tedious with no real benefit to understanding.\r\n\r\nStrengths\r\nThe TAs and ULAs were honestly so incredibly helpful. Props to Mark, Taylor, and Aya who were especially fantastic.",
                "It's a good class for very abstract concepts but not very applicable until the very end. Would appreciate more preparation for cs223",
                "I liked that lectures were recorded. There were a lot of available office hours, but it was still really hard to get help with psets because it was possible to sit in office hours for over an hour without any of the TA's being available to see you.",
                "I would say the major strength is the amount of support for the course as they have TA's who can answer questions almost immediately via email or in office hours. The main weakness is the disconnect between the problem sets and exams, they look very different at times so practicing for the exams was a bit difficult.",
                "Psets are difficult, racket is not a great language, in class instruction was not great, and the office hour sessions are difficult with so few TAs and so many students. Test material was fine.",
                "The professor and TAs are very nice but the course content itself could be improved. A lot of my friends shared the same sentiments as me in that learning Racket felt a bit silly since there really is no practical application in the real world. Many concepts we were being taught were \"made up\" for the course, in that the professor came up with a way to simulate a concept in Racket that was completely arbitrary and specific to this course, so we could not turn to any outside resources to try to understand the concept and had to solely rely on the course materials.",
                "Classes aren't very useful, kind of have to figure out psets on your own or through ULAs",
                "The psets were awesomeinteresting topics, difficult enough to provide a challenge that was within reach. When I finished a pset, I felt my understanding of the material had grown a lot. Review sessions for exams were amazing. I had a hard time being engaged during lecture, especially since it felt like a reasonable amount of time each lecture was not spent discussing the material we were learning in that class. I also think it would be helpful if more past exams, especially more recent ones, were made available for us to study from.",
                "I don't think this is an intro course. Office hours were helpful to an extent",
                "I really enjoyed how all of the lecture and class material was located online on a helpful website. When I had to miss class, catching up was incredibly easy. No complaints at all. When I had questions, contacting TAs and going to office hours was usually really easy. Deadlines were also very flexible too, which I appreciated. I had no complaints about the class. \r\n\r\nI know some students may have found the class lectures \"boring\" because of how nearly all of the work in the class is done outside lecture while working on PSETS, but I enjoyed class being set up this way.",
                "i think it gives students too much freedom and the lack of guidance kind of makes it harder",
                "Weaknesses were lectures, which were for the most part not focused on content we needed to know for exams, and most learning was done through the problem sets. The problem sets were very well structured to learn the topics and often provided all that we needed to know for the topic. The class was mostly self-taught and learning was done by figuring out the problem sets, which was both a weakness and a strength."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "Honestly, a CS major can probably self-study for the placement exam in a week or less and just skip it. Non-CS majors probably have better other intro to CS classes to take.",
                "yes if you want a proper prep for cs 223. no if you are already very confident in your programming knowledge.",
                "Yes, I think it is a good introduction to test how invested you are into computer science. I don't think its the greatest as an introductory course and would only recommend to people with prior exposure.",
                "I would recommend this class, because the problem sets have built certain skills for me that will make me a smarter thinker and programmer.",
                "I would not recommend this course to any student who is not a computer science major. There are better alternative intro computer science courses to this one.",
                "No, unless their major required it.",
                "I mean you kind of have to take it.\r\nTaylor Tran's review sessions were nice, except the final was much harder than it needed to be in my opinion.",
                "Definitely, yes. It is very clear that this is not the CS weed-out class. It's definitely not an easy class, but it's also not a 30 hour/week head slamming on a table class either. The pace is fast-ish but not too fast to get left behind easily. CS is a really important field for just about anything, so taking this class to get some of the fundamentals down is recommendable to anyone. The class has TONS of resources to help you with the concepts and ensure you keep up. Grading is pretty forgiving (and late days for homework!). Slade is actually a pretty good prof for this class in my opinion. He can be dry at times, but he definitely does know what he's talking about, and it can actually be pretty interesting to hear this material come from someone who was around when a lot of it was being invented.",
                "Depends. Intrinsically, yes. Realistically, if you have programmed before and care about getting internships sooner, take 223. You'll be able to learn this stuff really quickly: honestly, I learned most of it during the 3 hour review sessions.",
                "If theyre a CS/adjacent major. Otherwise, probably no. Some may benefit from skipping",
                "Only take this course uf you want to do CS. This is not CS50, and there aren't \"fun\" projects. That being said, do not skip this course and go to 223 directly either, 201 is tedious but very important as an introduction to how computers actually work. It's a complete survey of how machines actually compute things, going all the way down to binary representation of memory, and then building our own circuits and gates, boolean functions, assembly languages, and mini-computer - and finally analyzing algorithms using runtime. The language used is racket, which takes getting used to. Programming assignments can take up to 10 hours, but you get about 10 days to do them. The best part about the course are the TAs, they're super passionate and the way they summarize and reteach the material almost guarantees you'll get a good score on the exams.",
                "Only if they need it for a major (also not a bad idea to skip for another class since Racket is annoying)",
                "I would only recommend this course to a student with a major in computer science or a related field of study. The course is mostly rewarding for its entry into the CS major. With the high workload, it is difficult to recommend this course for any other reason.",
                "I would recommend this course to anyone who has experience with computer science and who would like to learn a more unusual language. Learning racket helped me learn the broader concepts of computer science, which other could find useful.",
                "I would definitely recommend this course to another student if they are interested in a variety of topics that isn't just coding difficult CS problems. Learning about how CFGs, Turing Machines, and computer architecture was structured was something I found extremely intriguing as it gave me a deeper understanding of not only computers, but perhaps how our mind works. I would take this class in conjunction with CGSC 110 if possible",
                "If you're a non-major hoping to get practice with coding you will get that, but you will also have to learn a ton of things which are not relevant to you.",
                "I would recommend this course to anyone interesting in pursuing computer science as it provides a decent survey of the field and teaches you to solve problems. I would say that it would probably be pretty difficult to come into this class with no programming experience.",
                "It's not like recommending this course or not has any significant difference, since it is a major requirement for CS and some other majors, but, either way, if you're debating whether to skip it or not, I highly recommend you don't. This is a very manageable introduction to CS, and the course does a great job of teaching you the very basics, that will be much more important in the following years.",
                "Yes, if you are interested in computer science. The language taught in this class (Racket) does not have much practical application so I would not recommend this class if you just want to learn basic programming skills to apply to another field, or if you are already well versed with topics like boolean gates/circuits, recursion, and Turing machines.",
                "I would not recommend this course because I feel like much of the content can be skipped over or condensed in a far more effective way. However, I would agree that some of the content is helpful and relevant and therefore worth knowing about.",
                "Yes, even though racket can be difficult to use, i feel like its very helpful in understanding recursion. I enjoyed learning about turing machines and tc-201. And some of the concepts helped me when I was practicing coding interview questions.",
                "If you're interested in CS this is a good place to start. The problem sets take a good chunk of time but are definitely doable and there are late days.",
                "YES! You learn so much about computers and how they work. Also, your recursion skills will be greatly improved. The PSETS are so interesting.",
                "I would recommend this course because it takes you through a lot of topics and you actually get to learn a lot in a semester.",
                "Nope",
                "not enthusiastically recommend; reasonable to take this class if you absolutely have to for major or certificate. i only took it bc i was scared to take 223 with no previous yale cs class experience, but i'm still glad that i took 201 instead of skipping it. \r\n\r\nsummary: if you feel confident in coding ability, skip to 223; if not (like me), probably take a 100-level course rather than 201 and find out where you are",
                "I would only recommend this class to CS majors. One problem set took me 28 hours and it was due five days after the midterm. Most took me around ~17 hours but I know the times varied a lot from person to person. Someone always finished in a few hours so for that person my multiplier was 4 (if they took four hours it would take me twelve). I'm not an emotional person. By any means. But I would sit there at three in the morning on the verge of tears because my code would not work. This course was an emotional rollercoaster. It was an experience. It's also a good way to find out if you actually want to be a CS major. If you don't enjoy the programming at least a little bit, you probably shouldn't. I would be miserable spending 20 hours on a Chemistry or Math problem set but for this class I minded the time commitment more than the actual work itself. Take this course if you're considering being a CS major.",
                "I would absolutely recommend this course to any student wanting to major in computer science with previous programming experience looking for an intro course. This course definitely made me a better programmer, particularly with organizing and planning my code (which I didn't really do very much before). Also got a lot of good practice debugging. Just be warned that it is not like any class you have probably taken before, in that it is very hard to find your footing and figure out the best way to learn in this course for a while.",
                "Yes, it is a fair class",
                "Yes. It introduces you well to recursion and other fundamental ideas essential in programming.",
                "Yes, definitely! It has made my programming much stronger as I actually understand the ideas behind what I'm doing. I also feel prepared to work on harder computer science topics in future.",
                "Frankly, if you need to take it because it is a requirement for your major, take it. Otherwise, do the first couple assignments to get used to recursive thinking and move on to a different course.",
                "I would recommend this course to a student with limited coding experience who wants to learn some concepts that are important to programming.",
                "If you're taking it for a major, then yes, but otherwise there are probably other classes that are taught in more applicable languages that might be better. For majors, though, it's a good way to ease you into the core topics of CS.",
                "No",
                "If it is a requirement then you have to take it but for the most part if you're exploring the major then it is worth taking, especially as it is an important pre-requisite for other classes. It is also a good starting point for getting used to challenges of coding-intensive classes.",
                "You definitely need it for the major so you must take it.",
                "Only because its required for CS majors. If you are very good at coding already skip to 223 because most of the concepts and skills from this class are very specific and arbitrary to the class and not really applicable to the next levels.",
                "Even though its a tough course I did learn a lot",
                "I would! Its a good introduction to what the computer science major is, with really engaging psets and topics.",
                "If you are experienced with code, then go for it.",
                "This class was a great introduction to Yale's Computer Science Department! Everything was very manageable and the abundance of TAs made solving computer problems much easier.",
                "I think this course should only be taken by anyone taking it for the major or certificate requirement; for anyone simply seeking to learn more about computer science I think they would be better off taking the Python equivalent of the class."
            ]
        }
    ],
    "extras": {
        "title": "CPSC 201 01 - Intro to Computer Science"
    },
    "sentiment_info": {
        "YC401": {
            "sentiment_labels": [
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE"
            ],
            "sentiment_scores": [
                0.9688593149185181,
                0.9865905046463013,
                0.9987192153930664,
                0.9988564252853394,
                0.9985851049423218,
                0.9986163377761841,
                0.9978458881378174,
                0.9989339709281921,
                0.9994887113571167,
                0.9983983635902405,
                0.9987102746963501,
                0.9974105954170227,
                0.9985336065292358,
                0.9988141059875488,
                0.9987143278121948,
                0.998610258102417,
                0.9989308714866638,
                0.9943863153457642,
                0.9895584583282471,
                0.9983822107315063,
                0.9987443685531616,
                0.9917942881584167,
                0.9988210797309875,
                0.9923660159111023,
                0.9933772683143616,
                0.9980913996696472,
                0.9988394379615784,
                0.9987247586250305,
                0.998840868473053,
                0.9977172613143921,
                0.9718329906463623,
                0.9894317388534546,
                0.9986679553985596,
                0.9968650937080383,
                0.9988590478897095,
                0.9985465407371521,
                0.998805046081543,
                0.9941376447677612,
                0.9988460540771484,
                0.9975758194923401,
                0.9988425970077515,
                0.9986787438392639,
                0.998900294303894
            ],
            "sentiment_counts": {
                "POSITIVE": 37,
                "NEGATIVE": 6
            },
            "sentiment_distribution": {
                "POSITIVE": 0.8604651162790697,
                "NEGATIVE": 0.13953488372093023
            },
            "sentiment_overall": [
                "POSITIVE",
                0.8604651162790697
            ]
        },
        "YC403": {
            "sentiment_labels": [
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE"
            ],
            "sentiment_scores": [
                0.998810887336731,
                0.9994767308235168,
                0.9883294105529785,
                0.9994983673095703,
                0.9989124536514282,
                0.998913049697876,
                0.999500036239624,
                0.9994989633560181,
                0.9987743496894836,
                0.9995119571685791,
                0.9986691474914551,
                0.9987866282463074,
                0.9837093353271484,
                0.9985248446464539,
                0.9985672235488892,
                0.998695433139801,
                0.9986684322357178,
                0.9938772320747375,
                0.9995014667510986,
                0.9982434511184692,
                0.998930037021637,
                0.9988672733306885,
                0.9988982677459717,
                0.9995032548904419,
                0.9903244972229004,
                0.9914370179176331,
                0.998873770236969,
                0.9992358684539795,
                0.9862261414527893,
                0.9951045513153076,
                0.9988735318183899,
                0.9989056587219238,
                0.9956352114677429,
                0.9994124174118042,
                0.9988331198692322,
                0.9994266033172607,
                0.9989320635795593,
                0.9993591904640198,
                0.9987791180610657
            ],
            "sentiment_counts": {
                "NEGATIVE": 15,
                "POSITIVE": 24
            },
            "sentiment_distribution": {
                "NEGATIVE": 0.38461538461538464,
                "POSITIVE": 0.6153846153846154
            },
            "sentiment_overall": [
                "POSITIVE",
                0.6153846153846154
            ]
        },
        "YC409": {
            "sentiment_labels": [
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE"
            ],
            "sentiment_scores": [
                0.9993384480476379,
                0.9835756421089172,
                0.9924382567405701,
                0.9989247918128967,
                0.9994959831237793,
                0.9980179071426392,
                0.9931269884109497,
                0.9988583326339722,
                0.997050404548645,
                0.9989763498306274,
                0.9988250136375427,
                0.9981396198272705,
                0.9993467926979065,
                0.998870313167572,
                0.9988921284675598,
                0.9994956254959106,
                0.998897910118103,
                0.9988631010055542,
                0.9994931221008301,
                0.9994744658470154,
                0.9988251328468323,
                0.998664140701294,
                0.998802900314331,
                0.9989356398582458,
                0.9968211650848389,
                0.9986617565155029,
                0.998824417591095,
                0.9988277554512024,
                0.9985809326171875,
                0.9988585710525513,
                0.9988939166069031,
                0.9983422756195068,
                0.9988263249397278,
                0.9987249970436096,
                0.9980016350746155,
                0.9988194108009338,
                0.9985291957855225,
                0.999494194984436,
                0.9983208775520325,
                0.9989181756973267,
                0.9980239868164062,
                0.9989070892333984,
                0.9994346499443054
            ],
            "sentiment_counts": {
                "NEGATIVE": 15,
                "POSITIVE": 28
            },
            "sentiment_distribution": {
                "NEGATIVE": 0.3488372093023256,
                "POSITIVE": 0.6511627906976745
            },
            "sentiment_overall": [
                "POSITIVE",
                0.6511627906976745
            ]
        },
        "final_label": "POSITIVE",
        "final_count": 89,
        "final_proportion": 0.712,
        "final_counts": {
            "POSITIVE": 89,
            "NEGATIVE": 36
        },
        "final_distribution": {
            "POSITIVE": 0.712,
            "NEGATIVE": 0.288
        }
    }
}