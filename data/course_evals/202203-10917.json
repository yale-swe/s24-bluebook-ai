{
    "crn_code": "10917",
    "season": "202203",
    "enrollment": {
        "enrolled": 98,
        "responses": 85,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                2,
                4,
                18,
                22,
                28
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                4,
                14,
                23,
                24,
                11
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                3,
                11,
                19,
                28,
                15
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                6,
                21,
                22,
                14,
                13
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                1,
                12,
                30,
                33
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                0,
                8,
                22,
                47
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "data strcutures",
                "I learned how to build various data structures in C, as well as learned conceptually many other data structures.",
                "Taking CPSC 223 at Yale will provide you with experience procrastinating p-sets and staring at a wall of code for hours on end trying to figure out why your program is segfaulting. Valgrind will be your friend. GDB will be your friend. Stack Overflow will be your friend. You'll spend more time with them than some of your actual friends.",
                "Much more knowledge about data structures and programming in C",
                "I developed knowlege about the different data structures, how they're implemented, and how different algorithms are more or less efficient depending on the data structure used. I also learned how to use C and different aspects of memory allocation and control.",
                "Data structure",
                "C and data structures.",
                "Principles of data structures and how to implement them in C.",
                "Extensive knowledge of data structures and writing organized\/dynamic programs.",
                "How to code data structures in c, why some algorithms are better than others, and being able to code large projects in C.",
                "C language syntax and compilers. Data structures and algorithms. Too many and too technical, I won't list them here. They were really helpful.",
                "This course challenged my computer science knowledge, but it was fair in the concepts it introduced and the rigor to which they were tested.",
                "Learned about data structures like linked lists, hash tables, trees, graphs. Programmed in C. Dynamic programming techniques, sorting algorithms.",
                "You learn so much in this class, about data structures, memory and ways of coding. It is probably the class I have learnt the most in at Yale thus far.",
                "I actually feel pretty competent at understanding and using the data structures we covered in class.",
                "I developed a much better understanding of many commonly used data structures in computer science. Since the class is in C, I also gained a lot of experience coding it, learning about memory handling (especially memory indexes, leaks) and how to use valgrind on the command line.",
                "I learned a lot about how to program in C while using different data structures and efficiently optimizing my code. I developed better problem-solving abilities, critical thinking, and debugging abilities.",
                "C programming, memory management, basic data structures (linked list, array, hash map, graph, trees) and dynamic programming",
                "I learned the theoretical and practical side (in C) of an array of data structures. Pun intended.",
                "Learned about Data structures and some algorithms like BFS, DFS, Djikstras.",
                "Coding in C is the first thing -- you get a comprehensive introduction even if you are thrown right into it in the beginning. Comfort with dealing with memory allocation, freeing of memory, pointer structures, drawing memory diagrams, and understanding metadata structures and how to safeguard against segmentation faults.\r\n\r\nGained proficiency with basic data structures: array-based lists, linked lists (single and double), stacks, queues. Gained familiarity with other basic ADTs and their basic operations: heaps, graphs, maps\/hash tables, binary search trees (and their variants).",
                "This course taught me a lot of different skills related to CS\/programming and dealing with pressure and failure.",
                "I learned how to use deep thinking skills in analytical problems",
                "I learned about different types of data structures and learned to implement them in C. I also learned how to manage memory stored in the heap or the stack using C variables and pointers.",
                "Data structures and programming in C",
                "This course represented a rigorous and complex foundation in Data Structures and Programming Techniques, very useful and ubiquitous for a future Computer Scientist.",
                "programing in c, how to implement data structures by hand.",
                "Data structures, debugging, coding in C",
                "How to code in C, how data structures and memory allocation work.",
                "I learned how to code in c specifically with certain data structures and algorithms.",
                "Time management, critical thinking,",
                "I learned how different data structures work, and their implementation in c programming language.",
                "I learned about data structures and the C language.",
                "experience programming in C and knowledge of basic data structures",
                "Data structures",
                "I gained a solid understanding of data structures and the intricacies behind coding them.",
                "Greatly improved my knowledge of C and concepts such as pointers and memory allocation\/freeing.",
                "Learned the C programming language, data structures, Big O Notation and some basic efficiency analysis, programming techniques",
                "Data structures",
                "I learned all the basic data structures necessary for programming.",
                "Thinking programmatically, understanding how to organize data in applications or program, how various data structures work and their various efficiencies.",
                "understanding of data structures, sorting algorithms, testing code, etc. Also teaches you how to work effectively when deadlines get tight.",
                "Abstract data structures, some programming techniques, and computer science principles",
                "We learned about different data structures -- from linked lists and arrays to heaps\/stacks\/queues to red-black\/AVL binary search trees. We also learned about good programming practices and dynamic programming.",
                "I learned a lot about good coding practice and became very proficient in C. This was a very helpful course in that respect. I learned about machine organization, data structures, and analyzing run time. The projects were complicated and challenging, and have made me a better coder. I learned more about my coding habits as well.",
                "Very detailed understanding of data structures, how to program in C, and overall a deeper knowledge of computer science",
                "Learned about C, basic syntax and data structures\/algorithms.",
                "I learned how to write large C code bases. Plus, I learned how to use debugging tools and how to create some of the most important data structures in C.",
                "Basic data structures, basics of unix, knowledge of C programming language.",
                "I learned a lot about the essential data structures in Computer Science, how to implement them from scratch in C, and the C language itself. I also learned a lot about common algorithms and techniques performed on these data structures; although, we did not dive too deeply into algorithms.",
                "Data structures, basic algorithms"
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "difference of the way of teaching",
                "I believe the lectures could be made more engaging as they didn't seem to add much to the course.",
                "This course expects you have a strong understanding of C and search algorithms going in - but Yale doesn't have prior courses that teach you pointers and binary search without also sitting through days of lectures involving stuff you already know. There's a lot of self-teaching, which is to be expected for a CS course. It could be improved by having clearer instructions - a lot of time the pseudocode is very confusing, and perhaps more, shorter p-sets instead of few very long ones.",
                "The course is well-taught and easy to follow. The problem sets are pretty clear and the course uses Ed discussions very well to explain things that were misunderstood. The professors were very responsive on Ed.",
                "I feel as though the course was structured to filter students out of the CS major. The combination of a very difficult hw2 and the midterm caused a lot of students to drop the course, meanwhile later assignments were relatively easier. I think the homework assignments were quite engaging however, and helped me gain a very deep understanding of data structures and their implementation.",
                "Strengths: lectures related to psets. psets were on problems\/topics that are very relevant and applicable to real life. \r\nWeaknesses: strict with pset grading (no consideration for improvement or attempts. obvs it's a CS class and psets are based on whether your code can pass the test cases but I wish they would've took into consideration the improvement made over the semester) and midterm wasn't possible to be done in the assigned time.",
                "The lectures weren't always very engaging, and there were times were we just watched the professor code in front of us.",
                "The workload is slightly heavy to me.",
                "Strengths: The course is demanding, but in hindsight that made me a better programmer. It's a really good introduction to writing scalable programs. The class isn't too difficult if you just start your work early and attend lecture. It will be one of your higher workload courses (however, I felt like I did more work in CS50 than in this class if that means anything, but that was also my first Computer Science class), but if you're doing Computer Science because you enjoy it, then you should have no difficulties. Also, I know most students dislike it, but I really enjoy programming in C. Perhaps it's because I really like computer architecture as well, and C is a low-level language, but you really can do anything you want with C. I think it's a great language to pick up, and it will probably make learning any future programming languages much easier.\r\n\r\nWeaknesses: I would've enjoyed getting more practice implementing the data structures rather than just covering them conceptually. I thought the bigger programming projects were interesting but having more time to practice converting concepts to code would've been helpful. Additionally, there's very little feedback in terms of the programming projects. I'm not too sure how one would go about providing feedback without simply giving out the solutions, but it's just something to note if you were expecting extensive feedback on your code.",
                "The assignments are extremely time consuming but most of them are very fulfilling. The lecture content felt almost entirely useless, especially since most of it didn't translate to the assignments and definitely did not translate to the exams.\r\nThis class got extremely tough around PSET 2-3, but it got better after that.",
                "Strengths: really technical. The slides are well made in that reviewing them is helpful most of the time. Also each topic is well-taught. \r\nWeaknesses: the topics are interconnected. Once you get behind you're screwed. Sometimes the hand drawing on slides is really hard to review, so we need to turn to Youtube for help.",
                "This course is well armed with ULAs that were very helpful in covering any gaps from lectures. Lectures were always engaging and fun while still being informative.",
                "This class needs more organization. The programming assignments are very long and often need lots of clarification that isn't included in the spec. The TAs also have not all taken the same version of the class and are learning about the assignment at the same time as you. The queues in office hours get very long so you have to go in early and often to get help. I think this class could benefit from more coordination between staff, from clearer lectures, and more practice for exams.",
                "The main weakness to me is the slightly too intense focus on abstract problem solving. I feel that learning to solve problems by yourself in cs are super valuable, but in this class it felt like in every pSet there was a few too many tricks. Having said this it is very rewarding when you are done. I just feel there can be a slightly better workload balance. It definitely should be a class that has a heavy workload, but a couple of the pSets (tsp and heatmap) were a little intense.",
                "Only weakness is how office hours are organized. So much time spent waiting while one TA worked with one student. I literally timed it once, and 3 TAs covered 6 students in two hours.",
                "The course does indeed give a very good overview of data structures, however at times it can seem very random. Each data structure we learn doesn't really connect to the next one, but at least each homework assignment makes you explore the concept learned in class more deeply.",
                "A weakness of the course is the way office hours are structured. If you get there early before time starts, you will often receive lots of help early. However, if you show up later during the office hour period, it will likely take longer for you to get help as it takes time to debug each person's individual code. However, this is also a strength of the course because it allows the TAs to give you undivided attention to debug your code. \r\n\r\nThe strengths of the course are how helpful the TAs and professors are during office hours and during classtime. I feel that I am able to go to any of them with any question and I will get a thorough answer back.",
                "Strengths: organization of office hours, organization of submissions and grading, clarity of information, accessibility of video lectures and other class materials. Weaknesses: Would have appreciated more acknowledgement from the professors early-on in the course about how hard psets would be relative to each other. Namely, the first pset was pretty easy while the second was incredibly challenging, this unmentioned difference had many students scrambling.",
                "Strengths: the course was well-organized. It did teach all of the data structures in quick succession and taught them in succinct ways. It made a point on building upon past lectures. The problem sets were also genuinely fun to decipher, even if frustrating (segmentation faults and valgrind errors were incredibly, INCREDIBLY frustrating and tedious to deal with. I could spend upwards of 5 hours because I forgot a single equals sign on an array-based for loop because the index would go out of bounds). The test cases were also quite comprehensive -- they forced me to edge case to figure out the boundaries of my program. The instructions for the course in general were also clear and concise.\r\n\r\nWeaknesses: at least in the beginning, the introduction to C felt very rushed. It sort of threw us into learning how to use it. Those who have already had some familiarity with C++ were placed at a distinct advantage to the rest of us, as I had to learn most of the C by myself. There was basically no other constructive feedback in the course other than the life-saving Ed Discussion: if you got a private test case wrong, you got it wrong. The TAs were helpful in this regard, but otherwise I was left to the sharks.",
                "This course's most significant weaknesses were the Professor, who did not teach the in-class material in a clear way, and the awful pests, which were long and complicated but primarily unclear.\r\n\r\nStudents had to study the material online or through TA because, in class, none of the information was apparent.",
                "It can go a little bit slower, going more in depth about each topic",
                "I think the content is well taught by each professor. Some of the projects are pretty time consuming (many 15-20 hour 2 week long assignments), but they get less frustrating as you get used to C. The wait in office hours the day before a harder assignment's due date could be 2-3 hours so don't wait until the last minute.",
                "Strengths - PSETS were generally fun to complete, but took a lot of time\r\nWeaknesses - PSET 2 was WAY too hard. Midterm was also unreasonably difficult.",
                "The Office Hours were helpful for debugging errors in the code or for clarifying aspects from the lectures. All the lectures were really interesting, with exact examples from the real world, and seeing how we can use programming to efficiently solve them.",
                "core course for cs major, worth taking it for more than once.",
                "Not enough TAs made this course hellish. Please hire more. The course felt very scattered and demotivating.",
                "Strengths: essential class for any CS major, you really do learn a lot\r\nWeaknesses: Glenn's psets are *tough*. Not impossible, but tough (especially with private cases which I never learned how to master).",
                "STRENGTHS: Really fun problem sets, the professors are awesome. Ozan especially was just such an amazing professor with really clear slides and explanations. He made difficult concepts easy. \r\n\r\nWEAKNESS: Silly little edge cases can bring your grade down so much. I don't think that having tested out a ton of different inputs and accounting for whether there is a space in a certain place is a good metric of your coding ability. I didn't know anyone in the class and I definitely did worse on some psets since I didn't edge case with friends. Office hours are also a bit ridiculous with ULAs working with a single person for over an hour. If you need a ULA to literally do the homework for you, you should just not do super well instead of having people taking up literal hours.",
                "Strengths: Learned a lot about practical industry knowledge. Encouraged me to learn cs in a collaborative way\r\n\r\nWeakness: assignments really took a lot of time to do, eating into my engagement with other classes",
                "My biggest criticism was that the tests were closed notes. Programming, in practice, is not about memorizing stuff, its about how you use it and I would have liked the tests to reflect that.",
                "Very high workload, lectures were not helpful to learning",
                "I think that the course spent too much time teaching linked lists, arrays, queues, and stacks. As a result, the teaching of more complicated data structures such as balanced binary trees felt rushed.",
                "This course had very poorly organized homework assignments and an ineffective ULA system. This course needs many improvements. Lectures should be more relevant to the homework assignments, provide proper organized notes, and attempt to link ideas together rather than jump from topic to topic. The office hours for professors and ULA's must be improved to help a greater number of students because in its current state it is wildly inefficient.",
                "Hard course but I learned a lot\r\nLittle more guidance would be great, as the student to ta ratio at office hours was far too great",
                "Strengths of this course is that it is a great introduction to data structures. Weaknesses is that the work load of this course can sometimes be too much.",
                "Ozan Erat's explanation of concepts was very good; I also liked Alan's explanation of memory and how it works. I also liked how Glenn situated our learning of data structures in context (i.e. using locations). The psets were mostly challenging  (pset 2 especially) but I feel like they build resilience for further CS classes.",
                "You learn a lot and you get really good at coding in C. The PSETs are designed to really teach you the content of each data structure.\r\nHowever, the PSETs were unnecessarily hard and the exams were harder. Also, much of the class was taught through live-coding, which works for some, but didn't work for me.",
                "Profs in general are very responsive on Ed and try their best to help and answer questions. \r\n\r\nSometimes recordings would end a little early, cutting professors off mid-sentence. \r\n\r\nDidn't like that C++ syntax (without any relevance to data structures or programming techniques [like memory management]), yet accounted for 4% of the final. \r\n\r\nWould have been nice to have more in-class discussion of time complexity and dynamic programming. \r\n\r\nWould have preferred more problem sets in place of exams. This is especially because final exams felt like a test of stamina rather than a test of knowledge, and I think practical problem-solving (like the HW projects) is better for learning and assessment than seeing how a student performs during back-to-back time-pressure exams.",
                "Some of the lectures went a little slowly, but the material was covered thoroughly.",
                "I think the lectures could be structured better. It seems to be a little meandering at times and hard to stay engaged. I think the recorded lectures suit a computer science class well.",
                "Great course overall!",
                "The coding assignments were difficult, which I found helpful. \r\nI felt that lectures were not very engaging. Perhaps giving us a slideshow, or changing the lecture structure, or changing the lecture delivery will improve engagement. I think keeping detailed or better-structured lecture notes will be helpful. Sometimes I felt that the instructor would say something quickly, almost like a second thought, in lecture, which would turn out to be an important detail. \r\nThe feedback that we received from the autograder was our own to decipher, which is understandable.",
                "The lectures taught by all the professors were very engaging and clear and I could see how they related to each assignment. However, there were times when I did not feel like there was enough support offered to properly complete the assignment and also account for edge cases.",
                "Strengths: The students and the material made this class worth it. The only issue I had was how with the prof.",
                "I think C is a tedious with regards to memory management. I did, however, enjoy the first principle approach to all the data structures.",
                "The lectures often did not match up with the problem sets which was rather frustrating. Because problem sets were so time consuming, it was often difficult to focus on the material taught in lecture. \r\n\r\nThe overall auto-grading system and problem set format was very demanding, but felt like an effective way to develop strong programming skills.",
                "Strengths are that the data structures are introduced in a logical order and taught well from the bottom up. Basic algorithms are introduced as we learn the data structures. The readings provided, especially Professor Aspnes' Notes, cover absolutely every topic that the course covers in amazing detail. Weaknesses include how the problem set descriptions could be written in a more clear straightforward manner, how our midterm difficulty and timing made its average score very low and have a very high standard deviation in score compared to the final, and how you are essentially learning C as you go.",
                "The problem sets were challenging but not always conducive to learning the data structures we covered in class. (e.g. TSP) Thus students were often busy finishing the problem sets, rather than thoroughly learning the course material. It did not help that the lecture was mostly live coding and Professor Glenn scribbling on an ipad, which can be difficult for students to follow.\r\nIt was easy to feel unwelcomed in the course. There was not much study material available for students, and the expectation of \"you should know this already\" is prevalent among both faculty and students. Sometimes students were unjustly rude or surly at the large amount of work given to them. Sometimes students were looked down upon for not digesting course material\/ not knowing a concept taught in CPSC 201. It was not a pleasant learning atmosphere."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "Only take this course if you need it for the computer science major.",
                "Lots of people will say youre only taking this course because you have to. I disagree - data structures (hashmaps, graphs, trees, linked-lists) are really important for computer science. Even if you never write systems code, its good to know what is happening underneath all the abstraction. And it will help a lot for SWE interviews. BUT, this course is a lot of work. Dont take it if youre also taking other 4.5 and above workload courses (like I did) unless you really think you can handle it.",
                "Yes, if you're interested in computer programming",
                "It's required, but the homework is pretty engaging and interesting at least.",
                "yes. even for non-cs majors this course is good for making sure you learn C. if they make changes to the grading and start tracking students' progress in the class (and helping if needed), this is a helpful course",
                "Only if you're interested in computer science.",
                "Yes, to a student who loves to learn more about data structures and C.",
                "Sure, it's a requirement for the Computer Science major, but I don't have any issues with the course. I'm not really sure why the course hasn't had good reviews in the past because Professor Glenn is great at teaching, and his live coding in lectures is really helpful. Relative to other classes you'll find at Yale, the grading scheme of the class doesn't have much room for sympathy, but I don't think that is sufficient reasoning to call this class bad. Also, while I'm probably in the minority, something I really like about Professor Glenn is that he doesn't just give you the answer to your questions. If you ask a question on the Ed Discussion board, he'll prompt you with a question trying to guide you toward the solution rather than just giving it to you, which I think is the right way to go about developing your students' problem-solving skills. Two things that I've noticed among people struggling with this course is that they don't attend lecture, and they start problem sets a few days before they're do. For a lot of classes, you can get by with this, but as a rule for any computer science class you take: don't do that. The problem sets are actually pretty creative and really satisfying to solve (Professor Glenn really seems to like geography because a lot of the problem sets are related to it in some manner), so when they come out, start planning how you'd write it. Additionally, you may want to learn C before taking this course because it will help immensely. The \"programming experience\" requirement isn't really fitting if you've never programmed in a low-level language and have no knowledge of how low-level languages interact with the computer. Our midterm exam was difficult and a time crunch, so be prepared to work under pressure (definitely not a skill of mine), however, the final exam was completely fine. On programming assignments, don't assume that just because your code is working that you've received a 100. Try to come up with your own edge cases and stress test your programs.",
                "Yes, I would. This class made me realize I want to actually pursue computer science. However, be prepared for durations of this course to be awful.",
                "Yes. You have to take this as a CS major. And the stuff you learn is so helpful in the industry as well.",
                "I highly recommend this course, but only with a good background in computer science.",
                "If you're curious about the topic\/need the class. If you want to take it for fun, be aware that it'll be a lot of work unless you are very, very good at coding.",
                "Yes, but only if you are prepared for it to be the primary focus of your semester. It will without a doubt take away from your performance in other classes. Having said that it is extremely rewarding and you basic learn to be a programmer. It is great. Also I would make use of office hours early and get going on the pSets the second they are out so you dont have to cram it all at the end.",
                "I would recommend this course to another student as it is somewhat eye-opening in how one can manipulate memory pointers and data structures to make them even more efficient than I previously thought was possible. The course will be very useful for understanding the efficiencies behind the implementation of many software programs down the line.",
                "I would recommend this course. Although completing the problem sets was a very time-consuming process, I felt that it was worth it because I greatly developed my coding abilities. Learning all of the data structures and struggling with debugging was a very valuable learning process that I'm grateful for.",
                "I would recommend this course to students even outside the CS fields where it is required. I genuinely enjoyed learning about many of the ways that we organize data and thought that the assignments did a great job of facilitating this learning.",
                "Yes, Data structures is very very important for CS majors. While Glenn is difficult, he knows what he's talking about and the challenge of the course makes me understand the concept better than if I took it with another professor.",
                "It does do a great job of preparing you for interview concepts and algorithmic thought. You will know how to actually apply the vast number of data structures they give you and thus learn how to design effective programs. The problem sets do a good job in teaching you the concepts and breaking them down, even if vast amounts of edge casing is needed. However, it is a lot of work -- would highly recommend finding a study group for this class, becomes sometimes code works best when it is viewed with a fresh pair of eyes.",
                "I would recommend this course to other students, but not to this professor and those pests. Because this course can teach one a lot of things about CS",
                "It really will revolutionize your ability to code well and significantly improve your understanding of different data structures and techniques and when and why to use them. However, it is very difficult (especially at the beginning) and it can be tough to keep up, so make sure you stay on top of your work.",
                "I would if you want to struggle a bit, but it does approve your learning",
                "Yes, I think it's a useful and relatively interesting course. You'll learn to implement important data structures in C and get better at debugging. Be prepared for a heavier workload but if you're interested in computer science it's worth taking.",
                "Yes!",
                "Yes, I would definitely recommend this course, because it represents a solid backbone for the next courses in the CS Major, such as 323 or 365. We learned a lot of techniques and theories required for a Computer Scientist.",
                "Yes",
                "If you're taking this, you probably have to. Probably not a great course for non-CS related majors.",
                "If you want to rigorously learn coding, then yes, but not if you dont want to learn it in a pressurized situation.",
                "I enjoyed the material, but the way in which the course is organized is not conducive to digestion of the material",
                "Yes, as this course is required to gain an understanding of data structures.",
                "This course teaches you very useful topics you will need to know if you are pursuing computer science, but you most likely will not have a fun time taking it.",
                "It is a required course for CS majors, so I would recommend it to CS majors. However, I dislike that much of the course grades were determined by private test cases. You can get 100% on public test cases but still miss many private test cases, and oftentimes that is what determines grade boundaries.",
                "If youre a cs major",
                "I would as it was a great way to learn more past introductory programming techniques.",
                "Yes, definitely. If you're definitely looking to further in CS, you'd appreciate it.",
                "It is a LOT of work with the PSETs and the exams are very hard. But, it's very rewarding - you end up learning a lot about edge-casing and you know the data structures through and through. Only take it if you have to for a major.",
                "yes, especially if you want to go into software engineering. If you don't want to go into software engineering and just want to learn programming, this probably isn't the class for you",
                "Take it if you need it for the computer science major. It's fairly different from CPSC 201 so it will be a better indicator if you like cs \/ software engineering.",
                "Absolutely! This course is a great way to learn a lot about the nuances of programming in C and memory management as a result while working on interesting data structures problems.",
                "For the most part, I would. It has definitely improved my coding skills and expanded my coding and machine knowledge.",
                "If a student wants an in-depth understanding of data structures and C, take this course.",
                "Yes, it gives a good overview of a lot of fundamental algorithms and data structures, and also goes in-depth on how one should think about them. The projects also give a good insight into syntax",
                "Only take this if you are a CS major or CS+X major.",
                "Yes, it covers a lot of important concepts in CS and the lectures were pretty good.",
                "For many, it's a must take course, but it was not one of my favorites.",
                "I would highly recommend this course to another student. The opportunity to learn C is useful for later courses and teaches you things you wouldn't ever have to touch in a higher-level language. The data structures are taught in amazing detail along with the most useful algorithms related to them.",
                "Expect a semester full of self-studying: learning the concepts through GeeksforGeeks or Youtube before walking into class helps. Have experience with C before the semester starts. Most students find it difficult to do all three--learning C, finishing psets, learning data structures--in one semester."
            ]
        }
    ],
    "extras": {
        "title": "CPSC 223 01 - DataStructres&ProgrmmngTechnqs"
    }
}