{
    "crn_code": "10156",
    "season": "202003",
    "enrollment": {
        "enrolled": 165,
        "responses": 138,
        "declined": 5,
        "no response": 5
    },
    "ratings": [
        {
            "question_id": "YC601",
            "question_text": "Which of the following best describes your mode of learning in this course?",
            "options": [
                "recorded lecture",
                "live virtual lecture",
                "in-person lecture",
                "virtual seminar or other discussion format",
                "in-person seminar or other discussion format",
                "virtual lab",
                "in-person lab",
                "other or multiple (please describe below)"
            ],
            "data": [
                53,
                26,
                2,
                3,
                0,
                1,
                0,
                46
            ]
        },
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                2,
                13,
                45,
                50,
                17
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                5,
                26,
                45,
                38,
                14
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                2,
                6,
                40,
                62,
                17
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                7,
                26,
                51,
                31,
                10
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge<\/u> of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                9,
                37,
                74,
                8
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the <u>workload<\/u> of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                1,
                8,
                48,
                61,
                11
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC601N",
            "question_text": "Please list any other mode(s) of learning, including any combination or variation of the above options.",
            "comments": [
                "Each class is composed of a prererecorded lecture and a live 25 minute sessions, both of which are recorded.",
                "Both Live lectures and pre-recorded",
                "recorded and virtual lecture",
                "Live virtual lecture complemented with live sessions.",
                "There are also live virtual lecture\/discussion.",
                "Combination of recorded lectures and live virtual lectures with virtual Peer Tutoring Hours as well",
                "recorded lecture and live virtual lecture. The class is divided into 4 sections so there are significantly less students per each section.",
                "The course was taught using a combination of recorded lectures and live virtual lectures.",
                "Used virtual seminar along with pre-recorded lectures.",
                "Mix of recorded lectures and live lectures",
                "Combination of recorded lecture and live virtual lecture.",
                "Pre-recorded lecture to watch before class then a 25 minute live session during class.",
                "recorded and live virtual lecture",
                "The class utilized a combination of an asynchronous recorded pre-lecture video and a live discussion lecture via Zoom.",
                "There were both live lectures and pre-recorded lectures that had to be watched in preparation for the live lectures.",
                "Combination of pre-recorded lecture and live recorded lecture",
                "There are also live virtual discussion sections.",
                "Sometimes I came to the live lecture.",
                "Each class consisted of watching a pre-recorded lecture and attending a live virtual lectue.",
                "Virtual seminar",
                "Recorded lectures as well.",
                "My mode of learning was a combination of recorded and live virtual lectures.",
                "recorded and live lecture",
                "The class was half recorded lecture, half in-person lecture.",
                "live virtual lecture, virtual office hours",
                "There was a combination of longer recorded lectures you would watch before the live virtual lectures.",
                "Recorded lectures\r\nProblem sets\r\nOffice hours",
                "And live virtual lecture",
                "Meets 3 times in live lectures a week. A prerecorded lecture is released a day before every class, and you are expected to watch it before attending the live lecture.",
                "Recorded live virtual lectures.",
                "recorded lecture with live meeting groups",
                "pretty much all the learning needed to be done in TA hours. most of the time, lecture was not helpful.",
                "Live virtual lecture, recorded lecture",
                "Recorded lecture + live virtual lecture",
                "Live virtual lecture",
                "Each 50-minute class was broken down into 25 minutes of prerecorded lecture and 25 minutes of live virtual lecture.",
                "Live virtual lecture",
                "none really, maybe youtube",
                "This class was a combination of recorded lecture and live lecture sessions.",
                "Only through zoom, small groups",
                "Recorded lecture and live virtual lecture.",
                "This class was a combination of both live virtual lecture as well as recorded lecture.",
                "Recorded and live virtual lectures",
                "There were pre-recorcded lectures and then live lectures that followed\/expanded upon them.",
                "live and recorded virtual lecture",
                "The modes of learning in this course included a recorded lecture and a live virtual lecture.",
                "Pre-recorded lecture + live lecture",
                "Recorded lecture and Live Virtual Lecture",
                "In-person mini seminar",
                "We had a mix of live and recorded lectures.",
                "pre-recorded lecture + live virtual discussion",
                "This class was taught as a combination of recorded lectures and lic virtual seminars which were then also recorded.",
                "Combination of live and recorded lecture. Midterms were both written and oral.",
                "Recorded lectures (30 min before class) and virtual seminar or other discussion format (25 min, synchronously during class hours). There were four discussion groups, one for each combination of professor (Rushmeier or Barron) and time frame (first 25 minutes or second 25 minutes of the 50 minute class time).",
                "recorded lecture + live virtual lecture",
                "Record Lecture and Live Virtual Lecture",
                "Half recorded lecture, half in-person lecture",
                "Combination of recorded and live lectures.",
                "The class consisted of recorded lectures as well as live demo\/interactive sessions.",
                "Live lecture with pre-recorded segments",
                "This course had a recorded lecture, followed by a live section.",
                "recorded lectures and in-person lectures \r\nproblem sets\r\ncanvas tests",
                "25-minute recorded asynchronous lecture and 25-minute live lecture",
                "Lectures were additionally recorded.",
                "Pre-recorded lectures with a live virtual session to review material and answer questions.",
                "recorded lecture \/ virtual discussion group",
                "recorded lecture + live virtual coding session",
                "live lecture and recorded lectures",
                "Pre-recorded lecture, live Q&A or lecture, office hours with ULAs",
                "A combination of recorded mini lectures as well as live, in-person discussion sections each Monday, Wednesday & Friday.",
                "25 minutes of recorded lecture coupled with a 25 minute discussion section for each triweekly class block.",
                "With a recorded lecture component.",
                "We had a 25 minute live lecture\/ Q&A  time as well. But the recorded lectures held most of the content",
                "Prerecorded lectures",
                "Combination of live virtual lecture and recorded lecture",
                "A combination of recorded lecture and live virtual lecture. Half-synchronous.",
                "Prerecorded lectures",
                "Recorded lecture, live virtual lecture",
                "office hours, zoom sessions with classmates",
                "Personally, I found it difficult to concentrate on Zoom lectures -- recorded or live -- and learned a lot more from psets and other forms of active participation (doing the practice problems from live lectures again later on my own, for example).",
                "Recorded lecure & live virtual discussion",
                "Recorded lectures and live virtual lectures.",
                "Live virtual lectures as well",
                "recorded and live virtual lecture",
                "We had both a pre-recorded lecture and a live component.",
                "There were live lectures and in-person discussions.",
                "Recorded lectures plus live virtual seminars",
                "This class was half live virtual lecture and half pre-recorded lectures.",
                "It was a combination of recorded lectures and live virtual lectures.",
                "Pre-recorded lectures and live virtual lectures (that were also recorded)",
                "Alongside the recorded lectures (~30mins), there was 25 minute lectures with the professor that would expand on the information in the recording or they would leave time for questions.",
                "Live virtual lecture+prerecorded lecture",
                "The bulk of the mode of learning was prerecorded lectures. Accompanying these were live-sessions held by the professors that supplemented with practice problems, in-depth explanations of examples, and time for us to ask questions.",
                "A combination of recorded lectures and live virtual lectures",
                "recorded lecture + live lecture",
                "short live virtual lectures",
                "This layout of this class was a 20ish minute recorded lecture that was intended to be watched before live lecture, and then in live lecture, we would review the recorded lecture and work through problems as a class of things learned in the recorded lecture.",
                "This class was half recorded and half in person.",
                "Recorded lectures (20 - 30 minutes) as well as live virtual lectures.",
                "There was usually a 25 minute recorded lecture to watch before class and a 25 minute live lecture"
            ]
        },
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?\n(Your anonymous response to this question may be viewed by Yale College students, faculty, and advisers to aid in course selection and evaluating teaching.)",
            "comments": [
                "I was introduced to the more theoretical aspects of CS. I also became much more proficient in Racket and thinking about how to solve problems recursively.",
                "Definitely learned the foundations of computer science and how a computer is built up from the basic 1s and 0s. While exploring these concepts, we learned how to effectively use recursion.",
                "I learned some basic concepts on programming, including algorithms, time complexity, data types and structures. The language we used was Racket, which probably isn't a very useful language in itself, but it served as a tool to understanding programming concepts.",
                "I learned about a lot of the basics in computer science, and way too much racket.",
                "An introduction to many of the fundamental computer science concepts that I often took for granted or just was completely oblivious to previously. Lots of new concepts were introduced to me that very clearly will have extensions in future classes.",
                "Racket, functional programming, turing machines, machine\/assembly code, logic circuits, basic data structures, and grammar\/languages. Basically the basics.",
                "Functional programming (Racket\/LISP), RECURSION, fundamental low-level concepts (boolean logic, circuits, architectures), automata, computability theory, Turing machines.",
                "Racket programming, knowledge of how computers work at a basic level.",
                "Developed skills in a new programming language (Racket) as well as refreshed my memory of fundamental computer science topics such as recursion. Got a better overall grasp of the grand scheme of computer science and how pure programming falls within the spectrum of computer science.",
                "I developed my computer programming skills-- problem solving, recursion, etc.",
                "I gained an understanding of the fundamentals of computer science. There are going to be a lot of salty comments about Racket, and while Racket is annoying, it was nice to learn how to program in a functional language. Additionally, I found a lot of theory really interesting, and I finally have a solid understanding of topics in how computers are built and algorithms, and a better sense of what parts of computer science I want to purse in more depth.",
                "functional programming?",
                "I learned how to use recursion comfortably via functional programing in Racket, and I also learned about fundamental computer science concepts such as Turing machines, circuits, and assembly language.",
                "I learned how to code in Racket and fundamental principles of Computer Science like recursion.",
                "Fundamental computer knowledge, functional programming",
                "Improved computer science knowledge, specifically problem-solving skills with recursion.",
                "Recursion, basic logic operations, etc. Basically everything in the syllabus is well-covered.",
                "I learned a lot about the foundational topics in computer science and how to program in Racket.",
                "The fundamentals of computer science and understanding how computers work at a microscopic scale.",
                "Everything that the syllabus said I would learn.",
                "I developed my knowledge of Racket and the fundamental principles of computer science, such as Turing machines.",
                "I learned a lot about basic programming and how a computer works.",
                "How to program in Racket, lots of basic CS concepts (especially about low level language).",
                "Simple recursion, turing machines, Racket, and logic circuits",
                "Good understanding of some theoretical ideas underlying computer science\r\nGood understanding of basic computer architecture\r\nBasic understanding of data structures, compilers, computer languages and algorithms\r\nWriting recursive functions",
                "You will learn Racket, which while less practical of a language, has interesting syntax that could help you understand recursion more intuitively. You also learn introductory concepts such as algorithms, complexity, language analysis, recursion, Turing Machines, Regex, etc.",
                "I learned about a lot of computer science concepts I wouldn't have learned about otherwise. It was enjoyable to learn about DFAs and finite state machines. It was also cool to learn about computers at a low level with concepts such as machine\/assembly code.",
                "Got better at recursion.",
                "Knowledge of data structures (trees, queues, stacks) and algorithms (sorting, recursive) as well as assembly language.",
                "This course taught me a lot about perseverance and utilizing the resources provided. First, as the problem sets were tedious, sometimes difficult, and individual assignments, it took willpower to not give up throughout the problem set. As I progressed throughout the semester, I started setting goals for myself and using a reward system; really just any way to motivate me to finish up to a certain problem. This greatly improved my productivity, and I plan to continue using this strategy in my future courses. Furthermore, through the use of the Racket programming language, my understanding of recursion has strengthened greatly.",
                "I truly developed an appreciation for how Computer Science isn't just about knowing a laundry list of coding languages - its about being able to problem solve. The fact that this course was taught in Racket (a language very unheard of) forced us to move out of our comfort zone and stop relying on what we already know, and instead sit down and really think about a particular problem.",
                "I learned how to program in racket and recursion, and the basics of computer architecture.",
                "I developed a very high level understanding of computer science. This course touched on many topics with an emphasis in the theoretical aspects of computer programming. Racket programming, recursion, Boolean logic, computer architecture, regular expressions, and data structures are some of the main topics that were covered in the course.",
                "I feel better about using recursion",
                "I learned a lot about how to problem solve and think about specific questions.",
                "I developed knowledge in various computing concepts including functioning programming, recursion, Turing machines, assembly code, data structures and run-time complexity.",
                "Learned the basics of Racket and some theory about how computers generally work.",
                "I developed a significantly greater understanding of recursion in terms of how it is implemented as well as where it can be used. I also greatly developed my knowledge and understanding of how computers process instructions and the core elements of how programs are processed.",
                "learning Racket and basic recursion, pretty good exposure to a broad scope of CS topics but not super in-depth (makes sense for an intro course)",
                "I learned about a variety of introductory topics in computer science and gained skills in using recursion in programming. I also learned how to program in Racket.",
                "practice recursion with Racket, introduction to BTS of a computer (e.g. von neumann architecture), introduction to data structures and grammars",
                "Racket, Functional programming, broad overview of different subjects in CS, breaking down a large problem into smaller ones",
                "Coding in Racket, basics of computer science on a more theoretical level",
                "Essential computer science topics like data structures, functional programming, and computer architecture.",
                "recursion",
                "This course was an introduction to computer programming but was solely focused on recursion. Additionally, it was taught in the language Doctor Racket which had a unique and seemingly useless syntax.",
                "CPSC 201 surveys lots of different concepts in computer science, basically as a preview of all the CS classes to come at Yale. For example we did a bit of straight up programming, then a week of talking about computability\/Turing machines, we did some computer architecture (the von Neumann computer), logic gates, string expressions, programming languages (i.e. what is a compiler and how do strings get put together to make commands), and finally algorithms. All this stuff isn't very in-depth, but for whatever parts of it you like best there's a more advanced class in the department that will go into it in greater detail.\r\n\r\nMost importantly though all the conceptual stuff does turn into programs for the HW, so if you're good at programming but don't entirely understand the concepts, you'll be fine on the HW (and by doing the programs you'll get a better understanding of the concepts). And the most important thing for the programs is RECURSION (if you've never done it before this class, like me, you'll be able to do it in your sleep by the end).",
                "Understanding the fundamentals of computer science. Learned more theoretical concepts like turing machines, machine code, logic gates, etc.",
                "Better skill at Recursion, Understanding of Basic Computation and CPU, Understanding of Algorithm Speed Analysis.",
                "Functional programming and problem-solving",
                "Racket, computer architecture, problem-solving",
                "Basic CS topics such as recursion, Turing machines, assembly code.",
                "CPSC 201 is a great class to hone your programming skills. Having some background is great, but even without any programming experience I'm sure you could manage the coursework with some extra work. This class really helped my problem solving skills and helped me understand computing at a deeper level.",
                "Basic data structures and concepts of computer sscience",
                "You learn to code in Racket, an obsolete language.  You do learn basic concepts of programming and a survey of cs topics.",
                "lots of topics of computer science that I probably wouldn't have learned otherwise\r\n- algorithms\/time complexity\r\n- grammars\/language\r\n- data structures\r\n- machine\/assembly code\r\n- building a simple machine\r\n- logic circuits\r\n- boolean expressions\r\n- computability\/turing machines\r\n- racket\/ functional programming",
                "The basics of the more theoretical side of computer science -- regular expressions, Turing machines, DFAs. Also learned how to think recursively. It's extremely different from any other CS course I've taken before, but it was nice to develop a conceptual understanding of these topics.",
                "Basic cs theories",
                "Very solid course for introducing some of the core concepts of computer science.",
                "Learned about introductory computer architecture and programming techniques.",
                "fundamental principles and theories of computer science: Turing machines, theory of programming languages (context free grammars, regular expressions, etc), boolean functions, assembly and machine code, computability (P v. NP), basic data structures (stacks and queues), basic algorithm analysis (intro to Big-O notation, sorting algorithms, etc). In addition to the fundamentals that the course is meant to teach, I also learned a lot about higher-level stuff about functional programming languages (using Racket) and recursion.",
                "I learned the fundamentals of computer programming by learning how to use recursion. I learned what makes computers work at the fundamental level.",
                "I learned about recursion.",
                "I think this course was a good introduction to extremely low-level concepts in CS, and was particularly helpful in getting me to start thinking recursively, which is essential if you want to use Racket effectively.",
                "Using Racket has taught me to think about programming in a way that differs from other traditional and commonly used programming languages. Rather than relying on basic iterations and for\/while loops, I enjoyed applying recursions in all kinds of situations, as it gave me a new tool and new perspective on problem solving. Along the course syllabus side of things, I learned topics in computer science that I haven't learned before, including Turing machines and several abstract data structures.",
                "Functional programming with Racket, Turing machines, Booleans and logic gates, computer architecture, machine code and assembly, data structures, algorithms, computability, and complexity.",
                "My understanding of the fundamentals of computer science have improved. For example, I now better understand basic computer architecture, assembly code, logic circuits, and languages. Additionally, my ability to solve computational problems has improved.",
                "Basics of computer science and some of its history. Implemented different concepts using the Racket language.",
                "Racket\/functional programming, recursion, and some foundational topics in computer science (logic, Turing machines, assembly\/machine code, basic data structures, time complexity)",
                "Understanding the foundational components of computers and programming. Really solidifying understanding of how to code recursively.",
                "I learned the basics of the general field of computer science. I understand better how computers work and learned the basics of coding.",
                "How to code with racket, turring machines, binary, logic gates, assembly, algorithms.",
                "Problem solving, programming",
                "a solid understanding of the engineering side of computer science \r\nfrom logic gates, truth tables to tuning machines and how memory and RAM is stored in a computer.",
                "Recursion and general problem solving skills",
                "A solid understanding of basic computer science, including recursion, Turing machine, TC-201 machine, and regular expression.",
                "I learned functional programming (ie. programming in Racket), recursion, basic data structures like queues, stacks, arrays, and linked lists, machine code\/assembly code, and algorithms.",
                "Using an unfamiliar coding language with a new structure forced me to really think about the procedures instead of just resorting to a simple inefficient solution",
                "This course reinforced the idea of writing recursive code",
                "The most valuable skills I learned in this course were the fundamental ideas and layouts of computers.",
                "We learned how to use the Racket programming language (it's like Lisp) and learned a lot about computer science in general. We covered Turing machines, computability, Boolean algebra, and other fun stuff. The problemsets were definitely a highlight of the course. They were beautifully designed, with each problem building on the previous one to make an elegant final product.",
                "I learned how to program using recursion. I also learned how to persevere through difficult coding problems. Additionally, I learned a lot about how computers interpret binary code and how they work on a smaller scale.",
                "I learned about Turing machines, computability, boolean expressions, computer architecture, algorithms, context free grammars and other introductory computer science topics. I also learned how to create programs in Racket, which we used for the psets, and we did lots of recursion.",
                "Problem-solving, time management, and asking for help - I found office hours extremely helpful for this course in particular",
                "The class places a huge emphasis on fundamentals and the thought process behind coding. Although a stronger coding background would have helped for the problem sets go by faster, I felt that for each unit the methods and examples discussed in lecture were fairly reflected in the homework. The expansive nature of CS was not lost on me, and although this class was difficult, it did make for excellent introduction into Computer Science at Yale.",
                "Good overview of computer science while using Racket as a learning tool, from the physical machine level to algorithms.",
                "Through the psets, I got a lot of practice solving problems in recursion. While there were some psets with slightly-harder edge cases to catch, there was not a significant emphasis on thinking about these; for the most part, once you solved the problem and hit the public test cases, you would be fine. This helped my grade and saved time, but it also means I will likely struggle a little more in adjusting to catching edge cases in cpsc 223.  \r\n\r\nI also especially enjoyed learning about assembly\/machine language, the low-level code computations are run on, and grammars\/compilers, the set of rules that computers use to interpret strings of written code. We spent a fair amount of time on both units.",
                "I learned how to code in racket and use recursion, as well as basics of computers, turing machines",
                "I learned about foundational computer science ideas and built a base for future classes.",
                "Fundamental coding techniques, especially recursion, a basic understanding of computers and algorithms",
                "This class covered a variety of introductory computer science themes. Although I've done programming and taken some programming courses before, I didn't feel like any of this class was basic review of how to use a programming language. Instead, it used the programming language Racket to explore and implement important CS concepts that can and will be used in any programming language. We explored object oriented programming, recursion (a lot), memory usage, basic computers, data types, sorting, computability... etc.",
                "I learned about the fundamentals of computer science and also how it is contextualized in both history and society.",
                "I became a lot better at \"thinking like a coder.\" The programming language we used, Racket, was extremely different from anything I've ever used and forced me to learn new ways to attack problems."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?\n(Your anonymous response to this question may be viewed by Yale College students, faculty, and advisers to aid in course selection and evaluating teaching.)",
            "comments": [
                "Strengths: The problem sets were very well designed for understanding all the material. Good introduction to a lot of different topics in CS while still keeping it somewhat cohesive.",
                "Strength: focused on basic programming concepts. Racket isn't a complicated language so I could focus on understanding the concepts rather than trying to learn its grammar.\r\nWeakness: The live sessions are often a repetition of recorded lectures. I think the live lectures would be better utilized if they are more devoted to example problems. I also feel like some of the more complicated concepts were not explained very clearly, e.g. machine von Neumann and its different parts.",
                "The weakness is Racket and the scope of things being learned is too broad. In my opinion, it would be better to focus on less things and dive deeper into some of the concepts.",
                "Strengths were that a lot of important information was covered and the Peer Tutoring Hours were always very well run and very helpful. A weakness was that sometimes the lectures were a bit confusing and the homeworks weren't explained very well or very well connected to what was being taught.",
                "Strengths: a good overview of the basics and introduction to data structures\/algorithms. \r\nWeakness: I really did not enjoy the oral section of the exam although I could see the necessity for it during a virtual format. Psets are not collaborative but are a reasonable amount of work.",
                "The main strength of this course were the 7 psets. They were useful for consolidating ideas and more importantly a joy to complete.\r\nThe teaching style was overall effective, but due to the lack of a textbook and the large list of at times disparate topics, this class was more of an overview of a bunch of different ideas.",
                "As everyone says, the language is useful , but the psets are quite fun and the workload is fair. The first two exams were an insane time crunch, and most people were unable to finish. Then the third exam was a cakewalk. So be prepared for that.",
                "Strengths: Overall a pretty good introduction to college programming, not too much of a difficult class if you've had some prior high school experience with computer science\r\n\r\nWeaknesses: Felt like the live lectures didn't really teach much material compared to the recorded lectures, so the recorded lectures were the main source of learning.",
                "I'm copying-and-pasting from question 11 here: My biggest issue with this course is the tests--the tests were 10-12 questions each with 50 minutes to do them, giving 5 minutes or less to write, test, and copy a working Racket procedure for each question. Then you have 5 minute oral exams...I don't understand why they tested us this way, there's no time to think in either scenario. On top of that they switched the weight of assignments and exams in the middle of the semester without any announcement. \r\n\r\nI also had some trouble with the way the questions were worded, which may just have been a personal thing, but most of the time I went to office hours was just to clarify what the instructions were asking for because I didn't understand the way they were worded.",
                "I really enjoyed the PSETS! I think they were great, except for the fact that in the beginning psets, there was often one question that was exceedingly difficult for seemingly no reason. I think that needs to be adjusted. I understand wanting to challenge us, but that sort of challenge should come in the later psets, not in the beginning when the learning curve is really steep and people are freaking out and spending 5-6 hours on a single problem.",
                "The live sessions frequently felt like a repetition of the pre-record, and it felt unnecessary for them to be small. The course would have been better if we just had one large lecture section that included both the contents of the pre-record, then break out rooms to go over what we typically did in live section. This would have made it more engaging. Additionally, the time management for the lectures could be improved. However, the was sufficient help and time to complete psets and all the materials were easily accessible making it easy to review materials and study for tests.",
                "Strengths: Racket, because it forced me to learn how to use recursion effectively. The ULAs were also an invaluable resource, and the \"Review with Rob\" sessions were a lifesaver.\r\n\r\nWeaknesses: Also Racket, because literally no one uses it outside of this course.",
                "The live lectures were only 25 minutes long, so they were often used as supplements to the prerecorded lectures. However, we often did not get through all of the examples in the live lectures and I think that sticking with a 50 minute lecture would have been more productive.",
                "Give a warning beforehand on how the exams will be tight on time",
                "Weaknesses -- recorded lectures were not very well-explained. Often time instructor just read the slides, especially in the computer architecture unit. I had to rewatch recorded lectures more than 2-3 times to get a full understanding of the concepts.",
                "Great course. Was very well organized.",
                "Strengths - psets and review workshops\r\nWeaknesses - time constraint on exams were very difficult and I wish there was more practice in reinforcing concepts during the live lecture",
                "I would've preferred just recorded lectures and cutting out the live lecture. I never went to the live ones, as they sort of just seemed like a waste of time.",
                "I learned a lot in the course, and the problem sets were effective in reinforcing the concepts we learned. However, I feel like only having 25 minute live lectures was somewhat limiting.",
                "The class was pretty organized and lectures were interesting. A huge weakness was that there were no professor office hours and the ULAs were often not sure how to do the problem sets themselves.",
                "Weaknesses: The split lecture format was really weird and made it hard to keep up with the class. I really would have preferred for it to be one or the other. It ended feeling like shorter vaguer lectures and then office hours. The split class was also really weird; I get it was for the interest in time but it made class sessions short. Also, the test format was just personally not very enjoyable. As a person without a strong STEM background, how intensely timed the tests were made it really difficult to get things done even if I already knew the answer because I'm a slow test taker. The third midterm, although closed book was a lot better. My suggestion for the future is to maybe throw in a couple more multiple choice if the tests are going to be so short. \r\nStrengths: Virtual office hours was really successful. The recorded lectures were easy enough to understand. The provided files and resources were also really great for review.",
                "The live lectures were next to useless in learning the content because my professor never got through anything besides the introduction in the live part. The recorded parts were monotonous, but I thought the problem sets were pretty interesting and fun(?) to work through. The times per pset varied widely, as did the difficulty for each test. Overall, learning was incredibly boring the way this was taught.",
                "Strengths:\r\nP-sets were a great help in solidifying concepts\r\nLectures were well-structured and ordered\r\nSupplemental written notes were very helpful to refer to\r\n \r\nWeaknesses:\r\nGrading on the midterms was pretty ambiguous. The midterms had good questions but how points were awarded was often correlated to \"how many lines are correct\" which does not make much sense if single mistakes are carried through.",
                "Characteristic of Yale, more theory-focused and you will struggle to see immediate applications of your skills. If you know programming and some basic algorithm and data structures, you will find this course incredibly manageable, especially the first half.\r\n\r\nBiggest potential difficulties:\r\n- Class is graded on a CURVE\r\n- Problem sets have extra test cases and so you could be caught with a lower grade than expected\r\n- MIDTERMS will determine your grade by quite a large factor, so be sure to study. The second midterm in particular was quite challenging for many students.",
                "Extended length for exams. I felt very rushed during the first two exams.",
                "The course is organized in a very logical and clear way, which facilitated learning.",
                "i think zoom for CS just doesn't work with me personally, i dont know about others. I did not find it engaging nor did i find myself able to learn the material like I was able to in 112. Just didnt work for me.",
                "Was unclear whether I was supposed to watch both pre-recorded and live lectures or just live.\r\n\r\nSecond midterm was far too difficult in comparison to first midterm. \r\n\r\nLearned a lot! Really enjoyed the homework assignments.",
                "Strengths: Lab assignments were of appropriate difficulty and ULAs were always helpful.\r\n\r\nWeaknesses: Information in lectures did not align with lab timeline, so there wasn't much incentive to attend live lecture as students would inevitably have to re-watch the lecture once the information became relevant. Recorded lectures were also not very engaging, and it was at times difficult to discern which information was important to the big picture \/ what concepts were being emphasized.",
                "Solely having a lecture made it difficult to engage with this course. While I enjoyed the content and structure of the course greatly, as the course provides an overview and sets the foundation for the field of computer science, I sometimes did find it a bit rushed.",
                "Strengths: Very engaging and comprehensive cover of the material\r\n\r\nWeaknesses: Live lecture component being split up into four groups made each live lecture too short - very little time to ask questions, and instructor often had to rush through the material if they started late.",
                "Strengths: Problems sets are written well and facilitate learning. The lectures and materials provided covered all the material needed. \r\nWeakness: Online office hour queues sometimes had extremely long wait times. Even though I was second in line it may take over an hour to get into a call with a TA.",
                "The course gives a good overview of the field of computer science and generally lives up to its name. The homework assignments took a fair amount of time to complete, but I found that they somewhat felt like a separate entity to the lectures and exams. While I understand that the instructors wished to engage in smaller groups of students and chose to split the class into four groups, I believe that a weakness of the course was this structure. Each live lecture was only 25 minutes long which was insufficient for the instructors to fully explain concepts for students. Often times, it was difficult to finish covering all of the material in that short time limit.",
                "The recorded\/live format of this class was effective (especially given the large number of students in the class), but I think longer live lectures would have been appreciated, as our group sometimes felt rushed.",
                "It feels like a pre rec class. We learn stuff, but its not that exciting or fun",
                "I think the recorded lectures were very solid but the live lectures were a little bland and could've been improved. Given the COVID-19 circumstances this is understandable.",
                "Strengths: Good introduction to a variety of topics in computing, fair grading.\r\nWeaknesses: P-sets could be relate a little more to topics covered in class. Queue-system office hours does not work; needs a revamp.",
                "Strengths:  Covers some foundational knowledge about computers that helps give cs some context. Weaknesses: The time limit for midterms are way too short, especially in the online format where you need to constantly scroll back and forth to reference charts at the top of the webpage. PSETS also sometimes had questions that went far beyond the scope of lecture.",
                "It was overall a very strong course; I think I learned a lot and the usage\/limitations of racket were very well applied in order to maximize the learning experience.",
                "strengths: psets are doable and representative of what lectures discuss, course is pretty structured and streamlined\r\nweaknesses: not a lot of information about exams & some formats were not representative of psets, live lectures were only 25 minute sessions and didn't seem long enough",
                "I thought this was a good introduction to computer science. The material covered and the problem sets were interesting. Office hours were helpful.",
                "felt like a pretty standard introductory computer science course, not sure that there is much to be changed\/improved",
                "I really liked how the course gave a broad overview of computer science, including both the theoretical and practical aspects. Personally, I would have preferred a full live lecture format, which could be more conducive to question-asking and engagement.",
                "We never got feedback for our exams, only a score",
                "Strengths: I think it gave me a solid foundation in computer science, a much deeper understanding of the discipline than what I had learned before college\r\nWeaknesses: not sure how practical\/applicable the material is, sure it's good to learn foundational material but I'm not convinced that I'll take much useful from this course",
                "The course was well organized and the online resources are very helpful, but we were split into sections in class, which gave us less time to ask questions. I think having one larger group instead of two smaller groups may work out better by allowing more time for questions and having more people asking questions.",
                "This course had incredibly low engagement and the exams were inproportionally difficult for the material taught in class. The lectures were straight forward and seemed applicable to future CS classes. However, the use of Doctor Racket seemed very pointless. This class could have taken advantage of a programming language like C which would have proved to be more useful moving forward. Additionally, the professors and course manager were not very supportive or flexible. It felt as if they were not willing to help you understand and learn and only there to catch you on your mistakes and penalize you. It was incredibly frustrating.",
                "Lectures were a bit dry, and Professor Rushmeier is not a great lecturer. However, the problem sets were interesting. Midterms were tough under the time crunch but fair.",
                "Strengths: Very well organized in my opinion - I really liked how there was a prerecorded lecture and then more discussion-based synchronous part. This allowed us to learn the new stuff at our own pace and then get to apply it in the live sessions. The problem sets were fair in terms of difficulty and I found them very interesting.\r\n\r\nWeaknesses: I know this is just how the course is designed but it did feel strange sometimes, because the Racket programming didn't have any immediate applications. I now know that's the point of the course, because you have to learn to adapt to whatever new language comes your way as a computer scientist, but clearly this is not what you're looking for if you want an intro to coding (go to CPSC 100 (\"CS50\") for that) and I'm not sure they make that clear enough in the course description.",
                "Strengths: I thought the problem sets were all very well-made and conducive to learning, and I generally enjoyed the class format.\r\nWeaknesses: The way of accessing office hours through one-to-one appointments (which I'm assuming was to maintain the \"no collaboration on psets\" rule - a rule I do think was helpful for my learning because this is an introductory class but also felt quite restricting) discouraged me from asking for help. This one isn't quite a weakness, but our first homework assignment placed emphasis on computer science as a humanities class, and there was an effort to work that in through talking about CS history in recorded lectures, but I think that if this course professes to care about this, the homework should also include humanities-oriented sections. Finally, I feel that the psets could have better prepared us for exams by having more theory as well as just coding.",
                "Plenty of office hours (very helpful to go to)\r\nTeaching could be more interactive\/better",
                "I think the strengths of this course were the ample resources available to students. The course is designed in such a way where collaborative work is not allowed, however, I do think discussion with other students would lead to a more beneficial experience. Also, the timed exams were very difficult for me personally. Coding certain problems can be difficult if you don't see a solution instantly. I feel like having more time for exams would be more conducive to learning because I found myself running out of time to finish exams even though I knew the material... simply put, I just needed a little bit more time.",
                "More review sessions would have been nice, as they were super helpful when they did happen. I really liked the psets and thought they were very satisfying to complete.",
                "Strengths: Engaging concepts, lots of resources and help, fun problem sets, and very manageable tests",
                "I found the problem sets to be pretty engaging. Although time-consuming, after solving them you grasp a good amount of the concepts.  Weaknesses- The recorded lecture and Holly were very unengaging and pointless. The course would have benefitted from having a larger, live lecture. The tests were VERY DIFFICULT and not enough time. 50 minutes for ten problems was ridiculous (considering some were lengthy, coding problems and grades were not curved).",
                "strengths\r\n- really good understanding of how computer works from basic circuits\/bits instruction\r\n- problem sets were helpful\r\n\r\nweaknesses\r\n- more practice problems during class time instead of review of recorded videos",
                "Strengths: the psets were actually pretty interesting and not too challenging -- for example, we built a \"tiny computer\" that could process strings of 0s and 1s and perform basic computations, which was really cool! Professor Rushmeier's lectures were also insightful and well organized, and reviewing them was definitely helpful for doing well on the midterms. The ULAs were extremely friendly and helpful.\r\nWeaknesses: the psets didn't really connect well to the midterms since they were more conceptual. For the second midterm, the timing was insane and everyone felt very rushed. The ULA system is useful, but on rare busy nights, it can take up to an hour for students to get help.",
                "It was very hard to connect with the professors and get help",
                "Strengths: Psets were very enjoyable\r\nWeaknesses: I wish we had advanced warning that the final midterm would be closed notes.",
                "This course covered a wide variety of topics giving us a view of the computer science field as a whole. However, due to the virtual format, the course was not particularly engaging.",
                "Strengths: really covers a lot of ground with fundamental computer science concepts. Even as someone with a lot of higher-level programming experience, there was still a lot I didn't know about lower-level CS theory. So the breadth of 201 is a huge strength. Having a live lecture section in addition to short lecture videos was helpful for asking questions and for overall engagement. The programming assignments were very well designed, especially when it comes to building simulators of Turing machines or assembly code, which was a great way to put into practice these models which often stay theoretical (and Racket was a great choice of language to accomplish this).\r\nWeaknesses: some of the exam questions can be better written and better formatted. Canvas never quite worked very well for writing code on exams. The time limits can be very restrictive and slightly unnecessary. otherwise this course is pretty solid.",
                "This course did a great job of teaching recursion. The course could have gone over how to use the terminal in the beginning of the course since many students had never used it before.",
                "The biggest strength is Professor Rushmeier. She is very nice and willing to teach. The biggest weakness is the office hours. I lined up for hours before a ULA comes. Then, the ULA either doesn't know how to answer my questions or doesn't finish helping me before leaving. Sometimes, I even suddenly get deleted from the queue without any ULA coming to help. Joyce Wu keeps avoiding my questions and says that she has to help other people in the queue as an excuse to abandon me, even if there is nobody else left in the queue. When I questioned that, she ignored me and left my zoom immediately. After many times, I think she actually doesn't know how to answer my question. Because of ULAs like her, I felt so lost, frustrated, and helpless. I'm writing all this not to blame anyone, but to let the Yale computer science department know that in order to encourage students pursuing computer science, they should pick the right ULAs.",
                "I think the syllabus and course content is very well developed. The progression of topics makes a lot of sense. The pacing of the course is also very reasonable.",
                "Using Racket is both a strength and a weakness. Racket is not commonly used in the industry, so it may seem \"irrelevant\". But it forces the student to adapt to a new language they probably never seen before.",
                "Strengths: Interesting material and psets\r\nWeakness: We consistently ran over the allotted time for the 25 minute live lecture or didn't get to discuss everything that we wanted to from the pre-recorded lecture. We would also usually rush through the material we did cover because of this time constraint. \r\n\r\nMaking the live lecture a longer portion of the allotted class time would allow more content from the pre-recorded lecture to be discussed in more depth.",
                "The autograding feature provided confidence to homework problems.\r\n\r\nThe course offers little help from the instructors and it is left to the undergraduate learning assistants to help students understand the content. There is also no feedback at all for what was done incorrectly, either on homework or exams.",
                "Strengths: The material is interesting, the ULAs are really helpful, and the course is well structured. There are lots of opportunities to get help, which is great.\r\nWeaknesses: Some of the material is not taught as well as the other topics in my opinion (specifically the unit with logic circuits and some of the von Neumann architecture), and Racket isn't the most useful language. Also, the exams go by super quickly.",
                "I think the class lecture notes and prerecorded lectures were thorough and good for learning. I do think that the problem sets at times challenged different skills and ideas than the actual topics we were learning in class.",
                "This course has a great ecosystem of resources. I loved the multiple modes of teaching and there were lots of places to get help from.",
                "Coding in racket took a while to get used to and it made it a little harder to focus on the new concept we were covering in a problem set when I was just struggling with racket errors.",
                "Very well organized and I learned a lot. Maybe a little slow in pace.",
                "the professors could have been better at explaining, ,longer sessions and offering review sessions of previous coding assignments would have been good\r\nlectures were too short, and professors were constantly rushing \r\noffice hours could have been better organised",
                "I wish the recorded lectures were more interactive -- there were some instances where the prof would say \"pause and work through that again in your head,\" but I wish we were asked to pause and try to work through problems before the solutions were given.",
                "Strengths: The structure of the course is good, as every new concept is built on knowledge prior learned in class.\r\n\r\nWeaknesses: The depth can be improved. For example, provide more insight into the detailed implementation of some algorithms.",
                "The professors seemed invested in moving the class to the virtual setting. They had a prerecorded lecture section and then a live lecture session to tune into. I like the format of the class and I think it was conducive to learning. I think a weakness of the class was that the homeworks are MUCH harder than the problems we investigate in class.",
                "I think the problem sets were a strong point as they always required one to think and come up with a variety of solutions to many different problems. I do think that the recorded lecture has issues with the pacing at times. Sometimes they moved on from topics too quickly and other times they dwelt on them for too long.",
                "I think this course could be improved by increasing the number of office hours there are leading up to the homework being due.",
                "The problemsets were definitely a huge strength of the course. Dr. Rushmeier was also amazing, and although I didn't interact with Professor Barron I heard he was great. The prerecorded lectures were really great as well.",
                "Strengths: lots of opportunities to ask questions, the course moves at a good pace, very appropriate amount of homework (enough to cement in the topics learned, not so much that it is super overwhelming).",
                "This class covers really important material, necessary for any computer science major. The psets were also very well done despite being quite challenging and time consuming.\r\n\r\nHowever, the three midterms were very definitely a time crunch and hard to do well on. This year especially, we had lots of issues regarding the midterms because they were administered asynchronously through Canvas.",
                "I liked that live lectures were in smaller sections to provide more of an intimate experience. I wish, however, that more TAs were online for office hours before the due date of problem sets, because sometimes the queue became so large that they would run out of time before getting to answer your questions.",
                "I would like to see more collaboration between peers. I'm not sure if I entirely understood why we completed the homework with absolutely no collaboration. I think being able to bounce ideas off of students would enrich the learning experience in homework sets.  \r\nThe timing for tests also felt very short. My coding background was limited, so this crunched time feeling could also just be a result of me needing more coding practice. Nevertheless, I feel that more time would help students do better on the tests. \r\n\r\nThe avenues for help, like office hours, discussion posts, and CS201 email were always quick to answer. The class was also extremely well-structured in that everything felt like it was building on top of each other and even with my limited background I never felt extremely lost.",
                "Strengths: the workload is fair, supplemental notes are provided for many lectures, and office hours are extremely helpful in getting you over pset problems where you're stuck.\r\n\r\nWeaknesses: I didn't think there were many. However, the second midterm an outlier for almost everyone and much harsher than other assignments. Some questions on the test required justification, or no credit would be given. This was the first time we had done any written problem of the sort where we were expected to fully write out our reasoning: it would have been helpful if we had more practice problems where it was clear how much justification we actually needed to provide.",
                "Strengths: The problem sets of the course were very engaging and were very useful in understanding what was taught through lectures. Besides, the instructors and peer tutors also provided valuable help when preparing for exams and solving the problem sets.\r\n\r\nWeaknesses: There seemed to be a lack of coordination and organization between the faculty members heading this course. For all three exams, students had to ask for a review session a few days prior to the exam dates instead of the instructors directly communicating with one another and making it happen. In addition, the live sessions were very short. Most of the time, we were not able to even get through what was planned for the day. We were also not able ask some questions due to time constraints, and sometimes, insufficient responses were provided. Besides, the exams were poorly designed as they were Canvas quizzes with very limited amount of time given to complete them. More often than not, these exams seemed to be aimed at getting as many students wrong as possible, instead of actually testing their understanding. I was able to see previous exams from past years online, and the time limit as well as the questions given on those exams were much better and more reasonable. I understand that this drop in the quality of exams may be due to COVID-19, remote learning and as an effort to prevent cheating. However, I still believe that it could have been done better. The weights given to each question could have been more reasonable. The exams could also have been administered live through Zoom calls (like other classes) without having to compromise the amount of weight given to each question and the amount of time given to solve each question (like the exams from previous years).",
                "Strengths: All the lectures are recorded so you can always go back and rewatch them. The class was split into smaller groups. The homework prepared well for exams and I learned a bulk of the class through the homework\r\n\r\nWeakness: Because the class was split and different groups had different profs, sometimes there would be explanations or things one group gets ahead and learns while the other doesn't. The fact that we also couldn't work with students on the homework also made the class a bit difficult. Many times I would get stuck on how to approach a problem and talking with my peers would have helped me get started on them. I also think being able to work with others means you get to learn different ways to approach coding an algorithm, so it was disappointing to learn that there is a strict no collaboration policy in the class.",
                "I liked the projects and the coding part. However, I found that I didn't get that much out of the actual class time. I think I did most of my learning by watching the prerecorded lectures and doing the homework.",
                "The strength is it covers a lot of different areas, so it's comprehensive. The weakness is, personally, I think that the material isn't that interesting. Maybe it's because the fundamentals are always a bit boring, but overall I feel like I wasn't solving challenging problems, and I did not come out of this course with a sense of accomplishment. I know this course isn't coding based, but I would like to code\/build something interesting throughout the semester. Also, in homework, I often get points deducted for marginal cases that aren't mentioned in the homework, which is annoying.",
                "The tri-weekly live lectures were extremely short (25 minutes) and made me feel cheated. I had very little time to synchronously learn from the professor and I wish the lectures were longer."
            ]
        },
        {
            "question_id": "YC602",
            "question_text": "Among the practices in this course geared toward learning during the COVID-19 pandemic, which succeeded and which could be improved? Please comment on course practices that allowed for virtual engagement. (Your anonymous response to this question may be viewed by Yale College students, faculty, and advisers to aid in course selection and evaluating teaching.)",
            "comments": [
                "Strengths: Recording everything was very helpful is getting things done on my own time.",
                "I liked how the course was divided up into a virtual component and a live component, which allowed me to watch the lecture whenever I want but also get some live engagement out of the class. I also liked how the exams are designed so that you can start on it at any point within a 24-hour window, and I could take the exam at a comfortable time for my time zone.",
                "I think it was not a good idea to have recorded and live section. Since both were 25 minutes, there was not much that could be done in either. It would have been better to have one or the other.",
                "All virtual-adapted practices were great, but the live lectures could have been a little longer to prevent rushing.",
                "The recorded lectures were very helpful as well as the virtual office hours. I was able to engage a decent amount with ULAs but had virtually no connection with the professor aside from the 5 min oral exam.",
                "The splitting of lectures into a prerecorded and live session worked for the most part; however, each member of the course was assigned to one of four live sessions, two of which met at the beginning of the course's timeslot. I had a class that ended 15 minutes before this time, and the prerecorded lectures were frequently over 30 minutes long. This meant that I was frequently unable to learn a single lecture's material in one sitting, either having to watch the prerecorded lectures well before the live lecture, or finish the prerecorded lecture after the live lecture.",
                "Midterm review sessions were an amazing resource for studying for the exam. Pre-recorded lectures were decent for allowing freedom to learn that class's material, but would have preferred more instruction and new material to be introduced in live lecture.",
                "The recorded lecture and live lecture combination was great and worked asynchronously very well. I'd never done office hours they way they had it set up before but I think that worked well too. God bless the ULAs.",
                "I think that the live lectures were virtually useless. We didn't really need the live lectures in addition to the recorded lectures. I would have preferred having a single live lecture per week on Fridays that reviewed the course material from the past week, and 2 longer recorded lectures.",
                "The split between live and pre-recorded felt unnecessary. The live sessions frequently felt rushed and I felt there was less engagement with the lecture because there was no way to ask questions during it. I feel like the class would be better structured with one or two hour lectures live a week, then the rest of the time in live sessions.",
                "Class engagement as a whole was quite low, and people only started speaking up when the professors made it clear that participation might be used as a factor in determining final grades. I would suggest implementing a mandatory camera-on policy, with exceptions for those who have extenuating circumstances - it often felt like (and often was reality) I was just mindlessly staring at an instructor, almost as if I was taking a course on Coursera.",
                "n\/a",
                "The course format was generally good.",
                "I liked the pre-recorded lectures, made it very easy to learn\/rewatch\/take notes in preparing for homework or exams.",
                "I believe office hours and review workshops were successful. I believe that live lectures could be improved upon to be more useful.",
                "Mentioned above.",
                "The combination of recorded and live lectures worked fairly well.",
                "ULA Office Hours were run pretty seamlessly though there were many times where the ULA did not know there was a queue and it would take 30 minutes for them to join. I thought the half recorded half live lecture was very successful.",
                "Overall archaic transition. I have never been as disengaged during a class as I have been sitting through this class. I went to every live lecture and didn't learn a thing in any of them because my professor couldn't get past the start of any problem before running out of time--I felt at a disadvantage for tests because I never saw solutions for half the example problems we attempted in class.",
                "I think all of the components of the class, office hours, p-sets and lectures, are standard independent of the pandemic. I thought they all worked pretty well and I felt like I learned a lot.",
                "Nitpicking but I think we could have met live less often (e.g. 2 times a week with longer live lectures), or released prerecorded lectures earlier so there is more flexibility in our schedules.",
                "Offering asynchronous lectures was very beneficial in my learning. I do think office hours could have been reformatted to allow for simultaneous questions instead of one on one appointments.",
                "I think the recorded lectures + live sessions plan works and provides enough opportunity for engagement. I also think that the office hours system was well organized and helpful.",
                "I do not have any suggestions. my experience was miserable. i love CS and want to major in CS econ, but will be refraining from taking a CS class until in person is back.",
                "Unclear whether we were supposed to watch both pre-recorded and live lecture of just live one.",
                "The lab assignments and office hours were well managed, however the format of midterms (ie multiple choice, with time constraint of 50 mins) was unforgiving in its online format. I also found that they didn't exactly assess our ability to complete the labs, since some short answer questions were designed so that they favored tedious details over conceptual understanding.",
                "I would say this course was significantly impacted by the COVID-19 pandemic, in an unfortunately negative way. To make the class smaller and more engaged, each 50-minute lecture was cut in half, and we were assigned to 25-minute lecture, with a pre-recorded lecture to watch beforehand. While this makes sense on paper, I found that myself and my peers were relatively unengaged, in addition to feeling extremely rushed in the 25 minute live lecture. In the spring semester, I believe that holding a single, normal 50-minute lecture would be more beneficial.",
                "The lecture format did not succeed. I do not believe that 25 minutes of live lecture is enough to provide students with a full understanding of the course material. Unfortunately, live lecture is not something that can be replaced with 25 minutes of prerecorded lecture. Although there were times where the queue was impossible to get through, I found the one-on-one office hours to be especially helpful because ULAs were able to address individual issues and focus their attention.",
                "I liked the smaller groups",
                "I think the recorded lecture and office hours were very helpful. I think some improvements to the course could be instructions on the homeworks. Oftentimes they were unclear.",
                "Works: Pre-recorded lectures to introduce the concepts with live lectures to build on such concepts and to act as a Q&A session (Good example of flipped classroom)\r\nDoesn't Work: Office hour queue system does not work at all. Students stuck in queue for hours, TAs stressfully hopping to various rooms and answering questions.",
                "Classes were split into 25 minute segments to facilitate the virtual format, but it was definitely not enough time to cover the necessary material in each segment.",
                "The 50-person in-person lectures did not make much sense. 25 minutes was simply not long enough for any substantial in-person learning and 50 students is not a cohort small enough for seminar-style learning. Two 100-person 50' courses might have been preferential as the professors would have more time to flesh out their ideas (maybe it could even be 25-30' teaching but then 20-25' optional Q&A, ensuring students can still interact with professors as intended with the 50-person groups but not changing the course material to accommodate more content being taught live). I did however like how I could speed up\/slow down\/pause\/rewind during the pre-recorded lectures as topics were introduced for the first time.",
                "the live lectures were split into four groups, which each got 25 minutes of the section time with one of the two professors. These 25 minutes were definitely not long enough for 90% of the lectures & content, and many groups went over time (understandably) which would delay the group that followed.",
                "I thought the combination of live virtual and recorded lectures worked well for this course. The small live virtual lecture sections encouraged participation.",
                "being able to rewatch pre-lecture and lecture videos on my own time, and at faster speeds if necessary, was very helpful",
                "I enjoyed having the lectures be recorded, and I thought the online office hours were very helpful\/well-run",
                "The recorded lectures were very helpful for getting us prepared for the live lectures, but I do with the live lectures were not split into sections to give us a little more time to ask questions.",
                "This course was adapted to be taught in an online format. However, the professors were not understanding of the challenges that the pandemic posed. It seemed like they were not considerate of different living situations and hardships of the students. It was a very impersonal class and lectures lacked engagement or a level of compassion.",
                "The live lectures were short and were not particularly helpful or engaging.",
                "I was a big fan of the division between prerecorded lectures and synchronous 25-minute sessions in smaller groups. This made it a lot easier to follow the lecture part at my own pace and then ask relevant questions for the synchronous session. I can't think of any weaknesses with how they managed virtual learning.",
                "I thought that mixing recorded lecture with in-person practice was good.",
                "Office hours was very smooth",
                "I think a combination of prerecorded and live lectures allowed for students to watch half the lectures on their own time (when was ideal) while the live sessions allowed for a time where the professor could answer questions. I thought it was a great format.",
                "I really liked the hybrid format. It wouldve been nice if there were more questions that were asked to students during the live part",
                "I think it was as good as it could be given the circumstances",
                "Again, there was not nearly enough time for the \"quizzes\" (exams). Considering classes were virtual, this was a very poor decision by the staff to have such little amount of time to take a difficult, online quiz. The recorded lecture only worsened the experience of the class, since they were very bland and unengaging.",
                "the recorded videos were helpful since they allowed us to learn at our own pace\r\nthe psets were also helpful and tas during office hours were nice\r\nthe live sessions could've spent more time on practice problems on the concepts (active learning)",
                "It was nice having half of the lecture as asynchronous, with the synchronous lecture as review! The handraising system was also useful for encouraging participation. Not many improvements that I can think of!",
                "I think being assigned a specific ula would have helped",
                "Recorded lecture format was fantastic. Good adaptation towards COVID-19.",
                "Live lectures were successful in helping me understand and digest pre-recorded lectures, however, it would be helpful if there was a stronger emphasis on the live portion of the class.",
                "shorter recorded lectures coupled with live lecture groups worked great in my opinion; I think all large lecture courses should use this format, which has the recorded session to present new material, and the live lecture groups for questions and live demonstrations. I did feel like live lecture sessions were always running short of time though: maybe it would be better to extend the live sessions from 25 to 35 min?",
                "They did the live lectures very well given the circumstances. I believe the prerecorded lectures should have been live too in order to allow for more questions that students had.",
                "Pre-recorded lectures decreased virtual engagement because they had no opportunity to ask questions. There was no time to ask during the live lectures because they were so short and contained new material. The availability of live and prerecorded lecture videos was good for students in different timezones who may have missed classes though.",
                "Many of the practices in this course were suitable for an online learning environment. The discussion section for each class period worked well. Office hours overall went well, making TA's accessible to anyone who needs help.",
                "Recorded lectures were great.",
                "I really liked the pre-recorded lectures as a mode of presenting the information because they allowed me to pause and re-watch parts about difficult concepts. I think the live lesson should have been a larger portion of the allotted class time because we were usually going over time or rushing through the examples. I think that the class did not need to be divided into four groups, it could have been okay with just two to give the live portion more time.",
                "The structure of the class periods could be reevaluated. It was difficult with the live lectures being less than half an hour long. It was difficult to ask more than a few questions without time running out and having to wait for the next session to ask your questions \"in-person\". While there is the CS201 help e-mail, I was often met with vague responses.",
                "The combination of live virtual lectures and recorded lectures felt a little disjoint at times. Namely, the live lectures were shortened to half the class time to accommodate smaller groups of students in each half, but it always either felt like we were running out of time when doing an exercise or we were just reviewing the recorded lecture material rather than doing a supplementary exercise. I guess, in short, the time management varied. The ULA office hours were well managed and worked well.",
                "Lecture notes and pre-recorded lectures were very helpful.",
                "Virtual office hours were great and the recorded videos were very good too.",
                "It was pretty good, except the recorded lectures and live lectures sometimes covered the same material.",
                "This is not a very valid critique because I could definitely resolve the problem on my end alone -- but I wish the teachers required us to have cameras on during live lectures; I kept mine off mostly from peer pressure of most people having them off and oftentimes exhaustion, which are absolutely my own issues, but could also be resolved by a class-wide requirement.",
                "The combinationof pre-recorded lecture and live discussion section allows for real-time engagement. The improvement can be extending the discussion section from 25 minutes to 50 minutes.",
                "The recorded lectures and in-person lectures were not both necessary, I feel that they often repeated themselves",
                "I think that in-person discussions were kind of useless throughout the course since they just regurgitated what we did in pre-recorded lectures... I wish we had more people to talk to leading up to homework assignments being due and tests.",
                "Honestly I can't think of any improvements. The course was amazing. Actually one thing, it would be nice to get feedback back faster on our homeworks, especially given that it's an autograder.",
                "I think I would have preferred to have lecture for the entire length of the scheduled class time, instead of only having to be present for half of the class time and having to watch the prerecorded lecture before class starts. It was kind of stressful trying to remember to watch the prerecorded lectures, and the shortened class time always made the live lecture feel rushed. \r\n\r\nI really liked having lectures be recorded though. I looked back on the recordings very often.",
                "the way that the course was structured this year (30 min recorded lectures + 25 mis of live lecture) was very ineffective. The live lecture was way too short to cover all the material that needed to be covered, and we often ended up going overtime. I think they should have kept the 50 mins of class instead of splitting it in two.",
                "I liked that the live lectures were recorded in case you wanted to go back and listen to something you originally missed. The live lectures were often spent rehashing material from the pre-recorded lecture, and I think that it would be beneficial to spend the live lectures answering student questions or moving onto new material.",
                "The ULA office hours and the email help-line were invaluable.\r\n\r\nI think it would be more worthwhile to have complete class live lectures, rather than 25 minutes of rushed lecturing. Alternatively, divide the group evenly between the two profs and have an early lecture and a later lecture if the issue was about timing. I think having 4 different groups made me unsure if we were all hearing the same information or getting the same advice on certain homeworks or test reviews.",
                "I found the lecture recordings, slides, and supplemental notes extremely helpful. I could watch lectures anytime I needed, although I recommend trying your best to attend all the live sessions to learn the material on a timely matter. Since the materials posted were detailed and consistent, they were my main resource while studying\r\n\r\nObviously, the downside was that I sped over non-midterm material at 2x speed and didn't learn as many fun facts as one would've in a normal year. I think this would be the benefit of having a completely live lecture instead of splitting it into prerecorded and an additional live detail session.",
                "The live sessions, although a bit too short, were useful in recapping and breaking down what was explained through the recorded lectures.",
                "I wasn't a huge fan of the synchronous lectures (see answer above).",
                "I found the half\/half structure to be a strength.",
                "There were no office hours with the course's professors, which was very inconvenient. However, the virtual office hours with ULAs were abundant and useful."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.\n(Your anonymous response to this question may be viewed by Yale College students, faculty, and advisers to aid in course selection and evaluating teaching.)",
            "comments": [
                "Yes! I was initially adamant about taking 201 instead of 223 because I already had taken 3 years of CS in high school but I learned a lot of new important foundational things in this class like how computers work on a fundamental level, levels of computability, etc. It's also a very well organized course and not too much work so a good way to ease into Yale CS. Racket is also great for thinking about how to break complex problems into smaller recursive parts.",
                "Well take it to fulfill the CS major requirement. Other than that, take it if you want an introduction to programming concepts. Since the class uses Racket, it will not give you something you can immediately put into practice outside of this class. However you would definitely learn some helpful concepts if you go on to take more CS classes in the future.",
                "Only if they want to be a CS major because it is a required class. If possible, I would skip this class.",
                "Yes. A very complete and broad introduction to fundamental concepts of computer science that seems to be very useful to delving into this major.",
                "If you are pursuing a computer science degree this course is necessary and definitely not difficult especially if you have previous AP computer science background. But if this is not a mandatory course for you, I don't see much of a reason to take this course besides as a prerequisite. The langauge, Racket, you learn is not useful in direct application.",
                "CPSC 201 was a really enjoyable class. I know it's a bit of a trend to hate on Racket\/LISP's perceived obsolescence and lack of utility (by which people simply mean unpopular in industry), but I think the psets in this class were able to impart the joy of functional programming. The content covered was usually pretty interesting, and the workload was very doable. I honestly had a lot of fun working on all of the problem sets and often worked on them as a way to procrastinate on my other classes.",
                "Yes, required for comp sci major but it's a decent class. If you aren't a comp sci major and want to just learn a usable programming language, this is not your class.",
                "As a first year, remote freshman transitioning into college level courses, this class was a nice way to ease into CS to complement heavier math coursework. Would definitely recommend, and the class was overall pretty interesting!",
                "No, but it doesn't really matter since this is the class that's required for the major. In a conversation with the DUS I found that CS 200 was a weed-out while this class, CS 201, is a more theoretical approach. I think it's more practical to teach what we learned over a more functional program, especially considering the amount of languages CS majors learn about and program with. My biggest issue with this course is the tests--the tests were 10-12 questions each with 50 minutes to do them, giving 5 minutes or less to write, test, and copy a working Racket procedure for each question. Then you have 5 minute oral exams...I don't understand why they tested us this way, there's no time to think in either scenario. On top of that they switched the weight of assignments and exams in the middle of the semester without any announcement. The flappers game was fun though.",
                "Definitely recommend this course to anyone that has coding skills, but has not done much recursion. Recursion is a very useful skill that this course will force you to implement, even if you hate it at times!",
                "I fully intend to major in CS and came into Yale with a large CS background. I considered placing in to CS223 but decided against it after shopping the first class for a variety of reasons. First is the departmental advice that you will miss out on some fundamentals that are crucial to the rest of computer science. While I cannot assess the validity of this, I did learn a lot of new concepts in more depth than I had before. I really appreciated this. Additionally, because I had a background in computer science already, it was possible to see how a lot of these concepts would be applied in the future, which at least for me made it even more interesting to learn. The second reason I recommend taking this class is because it was nice to have at the start of college. CS223 is a lot of work, and I appreciated a class where we had a pset every one to two weeks that only took be 5-10 hours to complete. The workload was lighter and it allowed me to adapt to college and understand how to study computer science in college. I feel much more prepared to go forward and succeed in more advanced CS classes because of 201.",
                "hot take: you should skip to 223 if you've gone through cs 50 already",
                "Although the course was a bit dry, I would recommend this course to another student simply because it teaches fundamental computer science concepts. However, if you have the option to skip to CPSC 223 and feel like you are well-prepared to do so, you should at least consider that option.",
                "The office hours were run incredibly well and it was easy to get help through multiple avenues. If you start the psets early (I aimed for 1 problem a day and started a week in advance) then grades are all but guaranteed. The exams were timed and you had to be quick, but over the semester they got easier.",
                "Yes -- as an introduction to general concepts in computer science.",
                "Yes. I think I learned a lot and gained a number of computer science skills.",
                "If they are interested in becoming a computer science major, yes. However I do not believe non-majors would enjoy this class unless they are really into computer science.",
                "Not really relevant since the course is required for CS majors.",
                "I would recommend this course because I learned a great deal about the fundamental concepts of computer science and improved my problem solving skills.",
                "I would recommend this to students who are interested in the academic field of computer science and not just programming.",
                "Yes if you are serious about CS being your major and don't have a ton of experience.",
                "If you want to go into CS, then yes. For the introductory options, between CS50 and CS201, I would begrudgingly choose this class again. The workload was manageable, exams were ok, and I was interested in the subject. Did make me second guess where I was going, though.",
                "Yes. I thought the content was very interesting and a very good foundation for many CS topics. The course built up from foundational concepts so virtually no background knowledge was required which was very nice.",
                "Yes if you're interested in higher-level CS! Otherwise, not really. If you're not interested in a CS Major or certificate, this might not be the best class for you as there are not immediate applications. If you are interested, this is a great class to introduce you to Yale CS and moderately challenging.",
                "If you're struggling go to office hours. If office hours failed, email the grad school TA's. You could fail the exams but try not to fail the Psets.",
                "If you would like to learn more about theoretical computer science concepts and computers at a low level yes.",
                "Absolutely, if the course was taken in person. I feel I wouldve had a completely different experience, and the material itself was very interesting. I do not fault my professor, just the nature of the circumstances.",
                "Yes! Foundational CS courrse.",
                "Although I had mixed experiences with this course, I would still recommend it to other students, whether they are interested in getting the Certificate in Programming or majoring in computer science, as it sets up the foundation for various computer science-related topics.",
                "Absolutely! It is a great way for any Computer Scientist to get into the problem-solving mindset required of a Computer Scientist, and makes you think in a way that will make you more successful in later courses.",
                "I would only recommend this course if you are planning to major in computer science as it is one of the required courses. If you have an extensive background in computer science, consider skipping to 223. For those who are not majoring in CS but want a high level look at the field, I would recommend that you take this course Credit\/D\/Fail. The problem sets are time-intensive and I found myself sitting in office hours quite frequently. If you are looking for a practical programming course, this is not the course for you.",
                "I recommend this course. It is very manageable and the PSETs are good preparation for exams, although exam length (and therefore difficulty) tends to vary quite a bit.",
                "Yes. I think this class is a good way to improve your logical thinking processes.",
                "Since this is required for CS major track, yes. Even if you're not planning to major in CS, good to take to get a broad understanding of what Computer Science entails beyond drag-and-drop.",
                "It's a required course for cs majors but for anyone just looking to understand cs for personal purposes, I would not recommend it.",
                "Yes, if you are in the major. It was a good course in which I learned a lot, but I would only recommend the course if you plan to take future CS courses at Yale; otherwise, I feel you would be better served taking a course that emphasizes more in-use languages as those skills might be more applicable for broader applications than the more specific details covered in this course that likely will apply to future coursework but perhaps not as much to CS applications.",
                "if you're planning to major in CS yes, it's required, and a nice exposure to a range of CS-related topics",
                "Yes, I think it is a good introductory computer science course.",
                "If you are unsure if you are interested in computer science, I would definitely recommend this course to get a feel for what cs is about. This could also be a good first-year course for CS majors; it's not too challenging but introduces some new concepts and is a good way to transition from HS to college.",
                "Yes; the course teaches memory and pointers very well, and these concepts are crucial for more advanced courses.",
                "Kind of. I'd recommend it only if someone is genuinely interested in majoring in CS. If not, don't bother taking it and choose a more practical\/applicable class instead",
                "Yes, it is an excellent introduction to computer science.",
                "For students who need to take this course as a requirement for their major, there is simply no other way of getting around it unless skipping it altogether to go into 202. However, for students who are simply interested in learning programming and CS principles, do no take this course. Although some of the problem sets were interesting and enjoyable, the material itself was not that exciting and exams were very frustrating.",
                "Yes - definitely take this class if you have any interest in possibly pursuing a CS major. You really learn how to think like a computer scientist in 201 which is great, and you get some programming practice along the way too. One warning I should make though is this is NOT an introduction to programming class: the programs aren't bad but they do assume that you've done longer stuff before (otherwise I think there's a big learning curve). Racket is an archaic language (even the TAs agree lol), but you don't need to do anything fancy with it and I found it fun to use by the end. If you've never done CS before, I suggest two options: if you just want one class to say you've done some coding, take CPSC 100 (\"CS50\") instead, but if you want to take many CS classes at Yale, absolutely start with this class because it's a great foundation. If you're an incoming first year thinking about majoring in CS reading this, it's definitely ok to start here if you have either of the AP CS classes in high school, and if you're a newcomer, I suggest taking CS50 over the summer either in Yale Summer Session or for free on edX so that you can start with this class. The community of fellow first-years in 201 was awesome and I'm looking forward to taking future classes on the CS track with them.",
                "Probably not a course for non CS majors, as it might seem to theoretical\/impractical.",
                "For anyone who is trying to learn the basics of software development or the foundations of computing, this is a good beginning course to set you off.",
                "Yes, I think the problem-solving skills I gained and the information I learned about lower-level computing was an important foundation for future CS work.",
                "Yes, it's a cs major req, and will help you understand fundamentals behind computer science.",
                "I would recommend this course for CS majors and anyone looking to dive a little deeper into the field.",
                "Yes! It is a great class that will get you very up to speed on your coding and computer science skills. There are ample resources available so you never feel lost.",
                "Yes, it is a good introduction to CS.",
                "No, if holly is teaching this course, I do not recommend it. If you have to take this course virtually then definitely do not. The material in the class was pretty interesting but very poor decisions were made when it came to structuring the grading for the course.",
                "yes! I learned so much about computers and computer science in this course that I don't think I would've learned otherwise",
                "I would definitely recommend this course to other students! It's a good class to start out in if you've only taken AP CS in high school, but if this is going to be your first introduction to computer science\/programming, I'd recommend starting with CS50 or CS112 instead. This course was definitely a lot more conceptual, and you won't really be taught the basic programming fundamentals. It's a survey course, but the concepts we covered (e.g. logic gates, Turing machines, TC201, regex) were really interesting. The psets are also pretty easy to tackle because they're split up into multiple small problems\/questions, each of which only requires a couple of lines of code. Although the course is taught in Racket, I think it puts everyone on a level playing field and does teach you how to think recursively. There's a slight learning curve at the beginning since the syntax is so different from more popular programming languages, but it's almost easier towards the end because we're only allowed to use a specified set of functions. Overall, it's a pretty manageable and interesting survey course!",
                "Would highly recommend to any student interesting in doing computer science.",
                "Yes, this class gives you a solid introduction to the field of computer science.",
                "Yes. You need CS201 to understand the fundamentals of computer science, not just programming. Even if you have lots of higher-level programming experience (like I did), it would still be unwise to skip 201. CS201 gives you an opportunity to work with very basic CS concepts like Turing machines, assembly code, parse trees, etc that you might not have seen elsewhere. This breadth of this course really expands your perspective of computer science as a discipline.\r\n\r\nI think Racket gets more hate than it should. In fact, I think the experience of programming in Racket is one of my central takeaways from CS201. It's very different from mainstream programming languages like Python, C++, Java, etc, but I think that's precisely the point: Racket introduces you to a new, functional programming paradigm. I found that the code I was able to write in Racket, without the procedural overhead, is often much cleaner and more mathematical than the code I might write in Java, etc. Recursion really is not that bad, once you get used to it. And I really think the programming assignments make a lot more sense in Racket than it would in something like Python, because Racket is so versatile with symbol manipulation. So yes, the course is definitely not perfect, but I would definitely recommend 201, and I would definitely recommend learning Racket.",
                "I would recommend this for people who want to learn basic problem solving skills and if you're majoring in CS.",
                "Saying that this course is a test of will is an understatement. But since it is required for computer science majors, it makes no difference whether I recommend or not.",
                "Likely only if you're a major or looking for the CS certificate; if not, there are other fun ways to pick up practicable CS skills.",
                "Yes, unless you have zero prior experience with computer science, in which case you may find this class frustrating and time-consuming. While many students complain about the programming language, I think this course teaches valuable content and finds a great balance between providing an introduction into several topics in CS while also drawing on previous knowledge.",
                "For CS majors, definitely, because it's required. For non-majors who are interested in CS, I would probably recommend a course such as cs50 rather than this course.",
                "I would recommend this course to another student interested in computer science and wants to understand the basic theory behind the field.",
                "If it weren't a requirement for one's major, then no I would not recommend this class. Even if you are able to learn and make progress towards mastery, there are little opportunities to prove your effort. I also felt uncomfortable asking other students for help in fear of violating the no collaboration outside of teaching assistants rule. My whole semester was full of desperation.",
                "I would recommend this to anyone who is interested in foundational topics in computer science. I took 112 and was considering taking 223 over 201 but decided to take 201, and I don't regret it. I don't think you would learn some of the material in any other class.",
                "Absolutely, I think it is a fascinating intro to computer science.",
                "If you need it to fulfill your major requirement.",
                "Yes, not only to develop programming skills but also problem sovling skills. It is also very useful and interesting to understand better how computers work as well as computer languages etc.",
                "if you are a CS major and need to fulfil requirement do it \r\nif you are into engineering, want to get familiar with recursion, do it",
                "Yes, I think it is a challenging course with a reasonable workload and thus a good intro for prospective cs majors",
                "Yes. This course is pretty solid and seems to be importanrt & necessary for subsequent computer science study.",
                "For students wanting to do the CS major, it's a mandatory course. Otherwise, I wouldn't recommend to  any non-CS majors.",
                "yes",
                "good intro cs course",
                "I would recommend this course. I think that it does well in achieving the goal of teaching one to solve problems recursively and develops a good foundation in coding and problem solving.",
                "I would not recommend this course at least not right now because I believe that it's difficult to get help on homework or help to study for tests. TAs can only help you with one problem at a time and professors are never really available to discuss questions.",
                "I would definitely recommend the class. If you haven't programmed before it'll be a bit of a shock at first, but from what I've heard the TAs are super helpful and you'll be okay.",
                "Yes, I would recommend this class to anybody that wants a deeper understanding of computer science. However, I would definitely not recommend taking this as your first ever CS course. It is a lot more manageable if you have a decent amount of coding knowledge already.",
                "I would only recommend this course to potential CS majors (it is a requirement for the major). If you want to learn practical programming skills, this is not the course for you (unless you want to spend a semester on only recursion in Racket).",
                "For a still relatively new coding student, it's going to be hard to feel prepared. I had some coding experience a few years ago, so I decided to go straight to 201 instead of taking CS50. I eventually realized how far behind I was compared to most of my peers in terms of coding experience. It was hard, and I was spending a rather embarrassingly long time on psets problems that were meant to be easy.",
                "Yes. It is a well organized course with a reasonable workload. I took AP CS A in high school and also have decent experience with python, and I thought the psets were the right difficulty for me to have to spend time thinking about and debugging some problems but still not spend too much time on. I was considering skipping to CPSC 223 from the get-go but I'm glad I took this as my intro cs course instead. I've found a few friends that I can cross-check answers with and I'm happy I can probably work with them on harder problems in 223 next semester.",
                "I would recommend this course to students with prior programming experience and who would like to have an overview of the basics of CS in-depth.",
                "Yes, I think computer science as a whole is a skill that is very useful. The class codes in Racket which isn't very applicable in the professional setting but I thought overall skills were pretty useful. But the course does require effort and time so people should expect to put in ~10 hours per week for this course.",
                "I would recommend it to a student interested in taking more computer science classes.",
                "To a CS major, yes, because it is informative, and at Yale it is necessary. To a non-CS major who wants to learn the fun side of CS, no. I never talk about this course to my friends who are not focused on CS.",
                "Yes, though if you haven't taken a ton of CS before, it's sometimes difficult (especially at the beginning) to think through the problems correctly. Eventually,  some ideas become simple, but it can be hard to keep up with actual CS majors.",
                "For me, the course was extremely difficult. I spent 12-16 hours on the PSETs and struggled to turn them in on time, while some of my friends only spent maybe half of that time. The difficulty of this course seems to highly depend on the student taking it. However, I feel like this course would be a lot better in person. However, even with all of the struggle, I would recommend this course.",
                "If you're planning on majoring in CS or any CS-adjacent major, then this class is a requirement. If you're not, then I think a class like CS 50 is a better introduction to CS"
            ]
        }
    ],
    "extras": {
        "title": " CPSC 201 01\n        Intro to Computer Science "
    }
}