{
    "crn_code": "10948",
    "season": "202203",
    "enrollment": {
        "enrolled": 160,
        "responses": 82,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                4,
                9,
                25,
                28,
                9
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                5,
                12,
                30,
                18,
                10
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                3,
                7,
                26,
                28,
                11
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                8,
                16,
                26,
                17,
                8
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                2,
                4,
                23,
                35,
                10
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                1,
                1,
                23,
                39,
                11
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "Deep understanding of recursion, Racket (lol), and computer science basics",
                "Racket, recursion, Turing machines, a bit of computer architecture and assembly language, strings",
                "I have learned and developed programming skills in Racket. The course is a good introduction to Computer Science and serves its purpose well. A lot of fundamental concepts were introduced.",
                "I learned recursion and how to problem-solve.",
                "recursion",
                "Learned lots of knowledge on UNIX, Turing Machines, Assembly code, Computer Architecture, Recursion, Language processing (compilers), and Boolean logic. There is a lot of knowledge about computing to gain in this class that you would not find in any other CS class.",
                "I've learned about recursion, Turing machines, assembly code, regular expressions, context-free grammars, and running time of programs.",
                "Racket, recursion, functional programming, computer architecture, linux, context free grammars",
                "I learned how to code in Racket, and I learned many foundational CS concepts such as recursion and Turing machines.",
                "Honestly a lot of interesting non-techinical stuff about the history of computers that was quite interesting. Also def developed a better understanding of recursion.",
                "I learned a lot about the science of computers.",
                "Recursion, UNIX, the inner workings of Turing machines, and CPUs are what first come to mind.",
                "I learned some of the basics of programming in Racket, as well as how a computer works at a very general level.",
                "Racket, Turing Machines, Computer Architecture, UNIX, Recursion",
                "This course taught me a lot about the principles of recursion, computer architecture, and other functions of racket (a fairly useless language) and unix.",
                "Tons and tons of basic CS principles, how to write more recursive code than you could ever want to, and Racket.",
                "This class has given me a better understanding on how computers work. Once I understood recursion and how to use binary, I definitely think it helped me learn the importance of efficient code and how computer resources are used in programs.",
                "Racket and recursion",
                "This coursed helped me not only grow as a programmer, but as a computer scientist. I feel like I have learned so much about various area of computer science through this class and it has encouraged my curiosity in computer science. Overall, an excellent course.",
                "Basis of working processes of computers, logical approach to problem solving.",
                "I gained insights into computer systems and learned an overview of computer science as a field. I also learned some programming concepts, specifically recursion.",
                "Advanced Racket programming skills (especially in recursion), and an overview of the theoretical topics of computer science.",
                "I learned a ton of CS principles and how to go about coding, on top of history of the CS world.",
                "I gained a lot of skills in programming in Racket, and I gained a lot of insight into the underlying principles that go into operating a computer.",
                "racket, boolean circuits, computer architecture, strings, complexity.",
                "This course fosters an understanding of computer science as a discipline and abstract problem-solving.",
                "I learned a lot about recursion, boolean logic, gates and circuits, Turing machines, assembly language, regular languages, and a little bit about time complexity.",
                "Recursion and Racket",
                "I learned a lot about deep recursion, tail recursion, computer architecture, strings, how a computer works (cpu\/instructions), turing machines, and time complexity. Additionally, I learned why understanding how computer work internally is important for future courses.",
                "Knowledge on UNIX, Recursion, Turing machines, circuits, assembly, strings and languages, runtime, etc. are developed. Though functional programming is not very applicable beyond the scope of the course, problem solving skills are tested and improved upon throughout the semester.",
                "I learned a lot about racket, as well as Turing machines, Boolean operators, and strings.",
                "General skills on recursion in code. Basic knowledge on computer architecture",
                "I learnt a lot about how to think about programming, and I gained useful fundamentals about a lot of computer systems that may be useful in the future",
                "A bit of Racket, recursion, Turing machines, TC-201, DFA, CFG, data structures",
                "Recursion! Also computer science topics like turing machines, compilers and regular expressions, computer architecture, etc.",
                "In CS 201, you learn how to write programs in racket, which although its not commonly used today, was really useful in reshaping the way I think about programming. The emphasis on recursion was especially helpful and I am much more comfortable writing recursive programs. I found the topics to be really engaging, from Turing machines, to context free grammars. It was actually quite cool to be able to write in assembly language and build a Turing machine simulator from scratch.",
                "Recursion.",
                "I learned Racket, Unix, and about a lot of the different components and areas of computer science including logic gates, architecture, and language generation.",
                "Broad introduction to a lot of important ideas in theoretical computer science (recursion, Turing machines, Boolean algebra, circuits, assembly language, computer architecture, compilers, etc).",
                "I learned lots of recursion",
                "A lot of computational thinking",
                "I learned Unix and racket, which I previously had no exposure to. I also learned more about recursion and how computers work, not just the programming aspect of CS.",
                "I learned about functional programming and recursion, representations of computation, machine language, and compilers.",
                "recursion",
                "Learned computer architecture, lots of recursion practice, learned about computer theory starting with the earliest Turing Machines to modern CPUs. Although basic, Racket programming helped me rethink problems that could have been solved with a loop or class in OOP languages.",
                "This course provided an introduction to computer science from the theory of computation, to the implementation of computational systems in logic gates, to an introduction to machine architecture.",
                "Recursion",
                "I learned computer science fundamentals using Racket. This class explores functional programming, recursion, Turing machines, boolean logic, grammars, and an introduction to assembly languages (using the TC-201).",
                "Knowledge of theoretical areas in CS, such as Turing Machines, recursion, run time complexity, and boolean expressions. This is a great course for learning *how* to think about CS problems.",
                "I learned both how to code in the language Racket and more conceptual topics like recursion, how computers work on a fundamental level and how languages are formally defined.",
                "Logic, critical thinking",
                "I gained insight on a vast array of computer science topics, ranging from circuits all the way to languages and computer architecture. It was also covered in a chronological way, making the jump from each step to the next justifiable and clear, ex: going from boolean functions to representing circuits which can be done with boolean functions.",
                "Recursion and more Recursions, Assembly, Computer Architecture, Unix (console). This course is good if you're thinking about continuing in CS. I had the option to skip to 223, but I don't regret taking 201 since it went over a lot of interesting concepts, and since recursion is probably more important than you think it is. If you don't plan on taking more CS classes, there might be better classes to learn how to code with more applications than 201.",
                "I learned about all sorts of things, including circuits, Turing machines, writing effective recursive algorithms, computer architecture, language structure, grammars, and UNIX."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "Strengths: The content was pretty engaging and really interesting as a survey course. It's also not too hard as an introduction course and teaches important aspects of CS that may not be taught in other intro courses. Despite the reputation of this class, the lectures are also really entertaining.\r\n\r\nWeaknesses: The lectures",
                "I liked the flexibility of the course as Homework due dates were very lenient. The course progressed at an acceptable pace and there was plenty of support offered to students.",
                "Strengths: PSETS are very interesting and learn a lot from them\r\nWeaknesses: class is not very exciting or captivating. Can easily get away with doing PSETs without attending lectures",
                "strengths- there is lots of support and resources to go to for help\r\n\r\nweaknesses- content was not taught in an engaging manner, and lectures did not help accomplish the problem sets.",
                "Some of the strengths of the course are that the lecture was very tied to the course content. Slade is funny and an enjoyable lecturer. There is an initial learning curve to using racket, but fairly quickly the course turns from being about coding in racket to computer science fundamentals, which is where the true bread and butter of this course lies. This course could be improved with more practice questions along the way, and maybe some more supplementary ways to help deal with questions. The youtube tutorial series was essential to understanding some of the topics and finishing psets.",
                "The videos for the PSETS are helpful. The lectures could be improved.",
                "This course was a great way to develop my foundational knowledge in CS.",
                "The handwritten tests are kinda annoying cuz that's not realistic but I get it. Slade is pretty cool and the recorded lectures are great.",
                "pretty good class! lectures a bit slow. For better and for worse, completing problem sets did not directly prepare me that much for exams.",
                "I can't emphasize enough how impressed I am with how welcoming I feel this course is as a CS course. It can be so discouraging to go into STEM and not have support, and this class did such an amazing job of being forgiving and rewarding the effort put in. In addition, I found the content very interesting and the PSETs a natural progression of learning. The Youtube videos were awesome.\r\n\r\nThe lectures were a weakness. Many times I would be done with the PSET content that we were covering in lecture, and I felt it was not as engaging as it could have been.",
                "Strengths: well organized.  Professor is compassionate and understanding and quite humorous at times.  You get a lot of late days for the psets (although each counts for a significant portion of your grade, so this makes sense).  I like the dropping of the worst midterm in place of the final if applicable.\r\n\r\nWeaknesses: there's no point to teaching us racket, it's never used in industry.  The psets can be really, really annoying.  They line up decently with the lecture but they're still complicated and take a lot of time, and often they don't really teach you much.  Slade as a lecturer isn't the most informative.  While the test cases in the pset are really helpful, as they dwindle in number later in the semester you can lose a lot of points for a tiny error.  The psets are machine graded, and no partial credit is awarded.",
                "Strengths: psets were well-structured to teach us important aspects of computing (such as computer architecture and boolean expressions) through writing code.\r\nWeaknesses: lectures were dull (though they did get better over time) and often found myself skipping lectures as they weren't really necessary to do well.",
                "This course really improves your knowledge of racket and recursion, and how to think (as does every other cs course), but otherwise had more weaknesses than strengths. Not all the ULAs were good, the lectures were extremely boring (often unhelpful), the psets were long, the language learned was fairly useless.",
                "There are two big issues with this class. First, Slades lecturing is extremely disengaging, and often full of irrelevant tangents instead of useful explanations of concepts. Second, the timing of problem sets with exams is awful; two of the most difficult problem sets were due right before midterms, making it extremely difficult to prepare for those midterms.",
                "I learned many skills about computer science very comprehensively. I wish we got more support on the topics on the second half of the semester.",
                "Strengths: Everything you need to learn is recorded or provided in typed notes\r\nWeakness: The structure of the class does not prompt engagement",
                "Strengths were the clear teaching of recursion, the availability of peer tutors \/ OH, the YouTube videos, and the abundance of class notes online. In fact, I believe the class notes online could be better condensed and\/or broken down into parts because revising the lectures for the psets and exams was quite tedious to go through all of the html\/jupyter and the linked pdfs. Having a pset (I believe p-set 7) and exam so close to each other was quite brutal.",
                "This course did a good job of covering a variety of topics and providing students with the resources they need to succeed. A weakness I saw was the lack of engagement during lecture. An effort to make lectures more interactive or engaging would make this great course better.",
                "The homeworks were really integral in my understanding of the concepts we covered in lecture. Having the lecture notes was also really helpful in both better understanding concepts and also being able to review them and further engage with them.",
                "Somewhat boring lectures, repetitive and monotone.",
                "The lectures were quite monotonous and it was hard to follow at times. I think the instructor sometimes assumed prior knowledge in some areas that not all students had prior knowledge in. The problem sets were reasonable in length and difficulty.",
                "Strengths: frequent office hours, litany of online information and records, Ed discussion enabled some course discussion outside of lecture\r\nWeaknesses: lack of opportunity for small group discussion, lectures felt disengaging due to the severely low attendance, not enough practice exams, slow pset grading",
                "There are countless office hours to go to and tons of TAs to help with psets and understanding; the actual class itself could do with a little more discussion of the psets though.",
                "I think one of the strengths if this course is that it is able to give you a pretty general overview of how a computer works in only 1 semester.",
                "i feel this course - it doesnt use iterative ideas (for loops or while loops) at all; its kinda spoiled my computational thinking skills by forcing me to think recursively. even simple problems that couldve been solved iteratively - im trying to structure them recursively and suffer in the process.",
                "The course is incredibly well organized. Problem sets are designed very thoughtfully and the content is thought-provoking.",
                "Weaknesses: The lectures were the biggest weaknessthey were not very engaging or interactive at all. I think the last unit (time complexity and closures) was rushed through and presented in a confusing manner. I also had a few frustrating experiences where ULAs did not show up to their assigned office hours or left early (also, some of the ULAs were not very helpful.)\r\nStrengths: I appreciate that the lectures were all recorded. I thought the psets and topics were interesting and reasonable, for the most part. Some of the ULAs were fantastic, such as Deanna and Shyla.",
                "I think that there should be more guidance in the lecture itself. Most of the lectures just went over specifications of the homework test cases, which was useful but only to a certain extent. I think that if there was more content directly being taught and visual representations, it would be easier and more engaging.",
                "To be frank, this course was not formatted in a way that engages students with the content. I understand the extreme class size, however, lectures consisted of reading through pre written notes and going over homework, which can easily be done outside of class and in office hours, respectively. The lack of incentive to attend lectures caused me and many others to take the course much less seriously. I thought Ozans guest lectures were much more engaging and interesting. Administration needs to severely consider reformatting this course as it is a very fundamental one for CS majors. In terms of strengths, I would say the content is actually very interesting and fun. There is also a huge support team of ULAs that are very helpful.",
                "The strength is that this course has a lot of topics, but that is also slightly a weakness. The second half of the course goes very quickly, and it is very challenging to learn and understand topics like strings. I also think that racket is a weakness as we spend more time learning how to use racket rather than actually learning concepts in computer science.",
                "This course puts all resources online, but that also means that live lecture attendance isnt necessary. I.e., lectures could be more engaging",
                "I feel like the lectures waste a lot of time with stuff that isn't necessary (such as other videos and stuff, also the homework is always reviewed there for some reason, which isn't very helpful since most people are done anyway, and those that haven't finished aren't helped by those last minute tips).",
                "No strengths. The teaching was inadequate, the lecture notes were insufficient and virtually no examples were provided. The homework was always challenging and time consuming; additionally there was no guarantee that OH would be able to help either. Not only that, the homework was often based on trying to guess what the creator of these problems was thinking rather than doing actual CS. Online sources are also scarce since Racket is basically obsolete at this point. Midterms and final were somewhat similar to homework, though I always felt that there was stuff that never appeared in lectures or homework. Everything I learned was based on my own time and effort rather than the \"resources\" given to us. Overall not a good experience.",
                "Slade's lectures and online notebooks, the psets, and the python UNIX tutorial are great resources at communicating what you need to learn to succeed in the course. ULA study hours were very inconsistent; multiple times there was a date\/time\/place posted and then no ULAs showed up. It also takes forever to talk to a ULA during these study hours, which is understandable due to the nature of helping a student with their code. However, more ULAs would help remedy this.",
                "The strengths of the course include the homework assignments which were intellectually interesting to complete and were spaced out enough to not be stressful. I also enjoyed learning about the history of computer science in lecture.",
                "Strength: Recorded lectures. Grading scheme. Weaknesses: The grind around Midterm Two is unnecessarily difficult  a midterm and two problem sets within about five days.",
                "Strengths: Covered a decent amount of material and I felt like I learned a lot, homework assignments weren't too bad\r\nWeaknesses: Horrible office hours scheduling, half of the time when the calendar said there was office hours there was nobody there, also the lectures could be quite boring as the professor would mostly read off of a website with the class notes, lastly we used Racket which is a programming language that is never used in industry and is not applicable anywhere, I think this course would've been if it was taught in Python or C or Java",
                "The material in the course should be interesting to anyone who enjoys math or theoretical computer science. Although a lot of people complain about the use of Racket, I did not really mind this and actually thought it was a fairly good language to illustrate many of the important theoretical ideas introduced in the course.",
                "There was a lot of interesting content, but when it came to exams I would have appreciated more practice exams so that I could be better prepared.",
                "Strengths: decent, broad interview to computing and computer science\r\nWeaknesses: didnt cover concepts like loops you'd normally expect in an introductory course (also learning Unix is fairly painful and not that useful)",
                "The content is interesting, however, I found class lectures to be a bit slow paced and boring.",
                "The course topics are engaging and psets are fantastic at clarifying and solidifying understanding of topics. There are many resources available to help students. A weakness is that the lectures vary in quality. I enjoyed the theory section of lectures but found the practical element unengaging.",
                "strengths: recorded lectures; weaknesses: class notes not very concise, not enough ULAs, needed more explanations to understand TC-201s",
                "This course covered a really broad range of topics and interesting theory about computer architecture and computational linguistics. The office hours were really helpful in completing the problem sets, and I think that this course was a good introduction to computer theory. I think the courses could have been more spaced out between the middle few problem sets, since we had two problem sets and a midterm due over the span of a week.",
                "This course was very well structured.",
                "If you want to learn recursion, this is a great class for that. And if you wanted to learn more about \"how\" computers works and some more theoretical concept than this is great. But, I don't know how applicability everything I learned will be to future CS courses and a career in tech.",
                "Strengths: This class made me much more comfortable with recursion and functional programming. The problem sets are closely related to lecture material, making them a valuable tool to study and learn the class material. There are also plenty of resources (like the CS201 YouTube channel!) to help you.\r\n\r\nWeaknesses: The last few problem sets are quite time consuming.",
                "Strengths: Interesting programming language and learning important fundamental cs concepts\r\nWeaknesses: I really wish we could have solutions to psets afterwards, it really wouldve helped",
                "Strengths- the content of the course was very interesting and useful. Even though the material isn't always the easiest, Professor Slade was relatively generous in his grading curve which was appreciated.\r\n\r\nCons- even though I did well it the course and liked what I was learning, the course itself had multiple issues that made the experience not as great as it could be:\r\n\r\n1) Office Hours. I've had the experience on multiple occasions where I'd end up waiting 1.5-2 hours for zoom office hours because 8 students would show up, and there would only be one ULA helping out. Given that each student can take anywhere from 5-25 minutes to help, there were simply not enough ULAs on duty to get the help I needed. While 1 ULA is fine during low traffic office hour time slots, there should be at least 2-3 when major assignments are due soon. \r\n\r\nI've heard from ULAs that there have been issues of some ULAs holding lots of office hours, and others doing almost none (but still getting paid the same). ULAs would also list office hours and then cancel them last minute, or just not show up.\r\n\r\n2) The Course Management. The grading of psets was an excessively drawn out process. Even though they are graded automatically by a computer program, grades would take multiple weeks in most cases (occasionally up to a month). While I am aware that the course manager is new this year, I think he has still lacked competence, since this delayed grading issue has persisted throughout the entire course. Even though the course is taught entirely in Racket, he does not know the language, and is thus having trouble running the course well.\r\n\r\n3) Exam Grading. The ULA grading of the exam was often very inconsistent and the rubrics were unclear. On every exam I would have to request regrades and end up getting 4-7% back because the grading rubric was either poorly designed or applied incorrectly.",
                "The course covers interesting topics, and the psets, although sometimes tedious, do a good job of guiding you through the material. I didnt really have any issues with the course, though I did have significantly more coding experience than most students in the course have beforehand, so that I am not representative of the student body.",
                "The biggest strength is the problem sets as they helped me grasp concepts well and improved my logical thinking skills.",
                "I liked how the class periods were more than just lectures. Opening class with a video\/song, then the logical problem of the day, and then a CS related joke or quote really made the class feel special. Also, the occasional tangents that were taken by Prof. Slade to talk about the history of some aspect of computer science really added personality to the course. Overall the course was very comprehensive, and gave a great survey of the topics to come in later CS classes. The workload was certainly a bit high at some points, but it was probably necessary to go into as much depth as we did.",
                "Class is an excellent introduction to functional programming. However, there needed to be more peer tutoring and exam review sessions. Feedback for assignments could be faster and more clear. One of other weaknesses is that class is built on Racket language that nobody using nowadays.",
                "The main strength of this course is how it manages breadth and depth. It is very broad it its material, but I felt like I really had to grapple with each subject to understand and complete the homework. I think the biggest weakness of the course is the absolute lack of feedback. Because the homework is graded automatically -- by a program, not a human -- you will never really get a sense of if you're writing code well or understanding things in the proper way until the midterms. Nobody will ever look at your code and tell you if you're approaching problems in the right way. Also, many topics covered on the midterms and final are barely touched on in class, and never touched on in the homework. Combined with the fact that homework grades are returned 3-4 weeks after submission (despite the grading being automatic!) means it is really hard to gauge your understanding and study well."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "Absolutely, I am definitely a greater computer scientist after this course",
                "I would! Many people skip directly to 223, but I feel like this courses covers an introduction to some topics you may not otherwise see.",
                "I would recommend this course to a student only if they are Computer Science majors. The workload becomes stressful at times and this is not a course that teaches the type of programming used in industry, but rather a broader survey of computer science topics through programming in Racket.",
                "Yes, great PSETS. Learn recursion and some hardware concepts",
                "i think most of this content was not usefull as recursion could be taught to the same extent in a more applicable language in a few weeks at most.",
                "This course has a reputation for being \"skippable\" and unnecessary since people will complain how useless racket is. I think that misses the bigger purpose of this course, you learn about much more than just how to code in Racket. Racket is a tool that you use in this course to actually learn about the interesting concepts. There is a lot to gain from this course and even as an experienced programmer I found a lot of use out of starting CS at Yale with this class. People think you can also skip lectures. But trust me, you want to be there for the second half of this class. All of my friends who skipped lecture are doing way worse than the ones who stayed.",
                "Yes, the course teachers important computer science topics.",
                "Yes, good introduction to some fundemental concepts in computer science. Different way of programming than most might be used to, since there is a focus on recursion rather than for\/while loops.",
                "Yes, I would recommend this course to another student because it allows you to learn many important concepts in computer science.",
                "Yes for the CS major, it's not that bad and pretty interesting. But no real world applications without taking other CS classes.",
                "Yeah",
                "Absolutely. Though many CS students are hesitant because of Racket, I feel that the content is actually very relevant and the only course at Yale I've experienced so far that feels it emphasizes learning the content and skills instead of getting a good grade.",
                "Take CPSC 200 in its place if you can.  It's the python version of this class, which is infinitely more useful to a CS major or anyone seeking to use it.  If for some reason 200 is a conflict or you need 201 specifically... it's not terrible, but it won't be your favorite class.  Go to office hours.  And supposedly the final sucks, though the midterms aren't that bad.  Grade distribution is generous, less generous when you realize you're against STEM kids.",
                "If you plan to go further into computer science, yes. Otherwise, you'd be better served by taking a class in a more relevant programming language.",
                "I wouldn't recommend this course unless you have to take it for your major or a certificate. The course isn't terrible, and can be very interesting at times, but the weaknesses are many and it is not a course I would take for fun.",
                "If you are dedicated to learning the contents of this course for the sake of learning, I would recommend. From a practicality standpoint, it may be difficult to stay motivated. But the content is interesting if you take the time to learn it.",
                "Problem sets took me ~10-12 hrs per week, so do with that what you will.",
                "Yes. I recommend this course to any Yale students interested in computer science or curious about what the field entails. It is an excellent intro course that will give you many useful skills.",
                "Yes! I think it really helped me understand foundational concepts of computing and helped me develop a greater appreciation for computer science.",
                "Not necessarily. This course is mainly for computer science majors and I cannot see a great reason to take it otherwise.",
                "I would only recommend this course if you are interested in majoring in computer science. The topics were too high-level to be applied in real world settings, which makes it hard to justify for non-majors and people simply interested in learning applications.",
                "If you plan on studying CS to the level of a certificate or major, this course is a must-have. Even if you have programming experience, I recommend starting with 201 to get a feel for a college level CS course and solidifying your skills. If you only want to dip your toes in and gain a little programming skills, CPSC 100\/110\/112 or ENAS 130 should suffice.",
                "Yes, for anyone interested in CS and without a lot of experience this class is excellent.",
                "I would recommend this course. I believe it teaches a lot of fundamental programming techniques and while doing this introduces a bunch of concepts commonly crossed in computer science in an engaging way.",
                "Yes, if youre looking for an intro to cs course and are on the CS major track.",
                "probably a requirement for the certificate or the major.",
                "I would definitely recommend this course to another student. You come out of the class with a baseline programming skillset and an understanding of the field of computer science.",
                "Yes, I think it provides a good foundation for a CS education. I would discourage students from skipping 201 and going straight into 223 just because Racket is not an employable language.",
                "I would recommend the course simply because I think the topics are useful and important to understand as a foundation to computer science, but the course itself is not super well designed and engaging for students.",
                "I can really only speak for CS majors, but if you arent one I would highly recommend CS50 over CS201. If you are a CS major and you have significant prior programming experience, I would highly recommend CS223. If you are a CS major with less programming experience, I might even recommend a CS50-CS223 track if viable (skipping this course). This course is very lacking in engagement, whereas I have heard better things from the other two courses.",
                "Yes, I would. The content of the class is very interesting, and the PSETS are written very well to reinforce learning. You will also learn how to think out of the box.",
                "I think I would only because its a required course.",
                "I think it's useful if you intend to really get into computer systems, but honestly I'd skip it and go straight for CPSC 223",
                "No unless the student is adamant about doing the CS major. I think this course helped me realize how flawed the teaching of CS at Yale and beyond can be and it convinced me that I don't need to put myself through so much trouble just to have the name of the major in my degree. In fact, CS 201 took a lot of time that I could have used more productively.",
                "I was on the fence about taking this course as a CS major, but I'm glad I did. I really enjoyed learning about computer architecture and other under-the-hood topics, and I definitely got much better at recursion and UNIX. Slade grew on me throughout the semester and is a pretty funny guy. On the other hand, if you wanted to skip straight to 223, I wouldn't blame you. This course was fun for intellectual reasons, not practical ones. Expect to spend 8-15 hours per pset, increasing over the semester. Also, the practice exams prepare you really well for the actual exams, which are fair and not super hard.",
                "This class is very interesting and useful for later computer science courses. I went to every lecture this year, but many others did not as the course was also posted online. If you take this course, I would recommend going to lecture.",
                "If not a CS \/ Cog Sci Major, I'd say a course in programming is probably a better investment.",
                "Yes, this course gives you a good overview of some of the components of computer science and applications, however I don't think this class was completely necessary and skipping to 223 having a little experience may be fine.",
                "I would recommend this course to anyone who wants to major in computer science (or obtain the certificate). It's required after all. If you don't plan on getting a degree in CS, I would only recommend this course if you're interested in theoretical computer science. It's not an especially practical course, so only take it if you're actually interested in the material.",
                "Not really. I think CS201 is not necessary for CS majors. The topics and stuff we learned were pretty simple if you have some CS background or took AP CSA. I also think Racket as a language is not super useful.",
                "Yes, its a decent course overall and helps a lot with computational thinking. Many of concepts taught in this class (such as recursion, stacks, queues, running time of programs etc) will come handy in 223 while many others, such as gates\/circuits and computer architecture (which they teach quite well in this class) are relevant to 323. Dont worry about learning Racket, it comes intuitively after the first or second psets, plus it ensures that no one has too much of an initial advantage (for eg. if they used python instead, there's a lot of very experienced people out there). Learning Unix is a bit of a pain but some of the commands are actually useful for future use. Exams are a bit tricky yes, but they get you to think in a different way and push you to find patterns that you might not see otherwise. On the whole, it's an interesting class that shouldnt be too hard for anyone with even a small amount of programming experience.",
                "I would not recommend this course because I found the lectures to be a bit boring and the content is not very applicable to future programming. This class had a wide variety of topics which was nice, but I felt that some of them were not really relevant. It also does not prepare you for CS 223. Take this class only if you need the perquisition or CS credit.",
                "CS 201 covers a variety of interesting computer science topics, but it is my understanding that these topics are mostly relevant to students interested in studying higher level computer science. If you have a very strong CS theory background or are solely interested in programming (not the computer science), this is not the course to take.",
                "Not unless they were definitely planning on majoring in Computer Science or majors that required the course (almost every CS major I talked to told me that this course was not an accurate reflection of the major and that they hoped it would not discourage me from staying in STEM).",
                "This class gives a great base of CS knowledge for prospective CS majors. The class is not best suited for a student's first dive into programming, but if it is the TFs and peer tutors are there to help those who need help catching up.",
                "I would recommend to cs majors, of course, but for non cs people I would probably recommend cs50 over 201 because it is more programming oriented",
                "Even though I rated the course a 3\/5, I still would recommend it. While the course teaching is mediocre, the knowledge gained is still very helpful. Many students will tell you \"Oh just skip the class\" but I wouldn't recommend that, since understanding CS theory is crucial for building a deeper understanding of the subject as a whole.",
                "I would recommend it to another student if they were a CS major since it covers some interesting fundamental theoretical concepts in computer science, while mixing in coding practice. While it is annoying to learn Racket, I think the challenge of learning a new language is worthwhile, since coding skills should be independent of the language used.",
                "This course is good if you're thinking about continuing in CS. I had the option to skip to 223, but I don't regret taking 201 since it went over a lot of interesting concepts, and since recursion is probably more important than you think it is. If you don't plan on taking more CS classes, there might be better classes to learn how to code with more applications than 201.",
                "Yes! Great intro to CS. Not for practical coding, but still good."
            ]
        }
    ],
    "extras": {
        "title": "CPSC 201 01 - Intro to Computer Science"
    }
}