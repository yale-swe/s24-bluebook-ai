{
    "crn_code": "12326",
    "season": "202003",
    "enrollment": {
        "enrolled": 143,
        "responses": 98,
        "declined": 9,
        "no response": 20
    },
    "ratings": [
        {
            "question_id": "YC601",
            "question_text": "Which of the following best describes your mode of learning in this course?",
            "options": [
                "recorded lecture",
                "live virtual lecture",
                "in-person lecture",
                "virtual seminar or other discussion format",
                "in-person seminar or other discussion format",
                "virtual lab",
                "in-person lab",
                "other or multiple (please describe below)"
            ],
            "data": [
                31,
                58,
                1,
                0,
                0,
                0,
                0,
                2
            ]
        },
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                1,
                9,
                19,
                41,
                21
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                6,
                22,
                24,
                30,
                10
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                6,
                10,
                26,
                35,
                14
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                13,
                26,
                36,
                12,
                5
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge<\/u> of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                2,
                12,
                36,
                42
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the <u>workload<\/u> of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                2,
                4,
                28,
                58
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC601N",
            "question_text": "Please list any other mode(s) of learning, including any combination or variation of the above options.",
            "comments": [
                "Lectures were also recorded. Synchronous attendance wasn't required.",
                "Lecture was recorded for those who preferred to watch the class after the fact.",
                "I primarily watched the recordings of the lectures, rather than attending the lectures live.",
                "Live lecture was an option, but did not fit with my course schedule. Another mode of learning was virtual ULA\/TA office hours.",
                "Lectures were also recorded.",
                "Live virtual lectures that were recorded.",
                "None",
                "Recorded lectures were the best recorded lectures I had.",
                "lecture was recorded",
                "Live lecture with recorded lectures to rewatch.",
                "I watched recorded lecture and attended some lectures live virtually.",
                "recorded lectures and office hours.",
                "Office hours",
                "Bad learning",
                "N\/A",
                "The lectures were recorded, so often times I watched the recorded lecture instead.",
                "Office hours were more personal and helpful",
                "I am in a different timezone so I would watch the recorded lecture.",
                "It was pretty much just live zoom lectures with recordings posted to canvas.",
                "Either recorded lecture or live virtual lecture",
                "n\/a",
                "Lectures were also recorded.",
                "Office hour sessions for help with assignments.",
                "Combination of a Live virtual lecture and recorded lecture.",
                "N\/A",
                "There was a synchronous lecture but they were recorded and put on canvas",
                "Live lecture was also recorded and uploaded",
                "Lectures were recorded as well so I sometimes watched those.",
                "Office hours on zoom and a piazza forum",
                "watched lectures again after they were recorded. also prof. aspes's previous notes sheet",
                "Live virtual lecture that's also recorded",
                "office hours",
                "Live virtual lecture with option of watching all lectures recorded",
                "N\/A",
                "Live lectures were recorded and uploaded for later viewing.",
                "We had live virtual lectures that were recorded so that they could be watched at a later time"
            ]
        },
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?\n(Your anonymous response to this question may be viewed by Yale College students, faculty, and advisers to aid in course selection and evaluating teaching.)",
            "comments": [
                "How to code in C. How to write makefiles. ADTs. Pointers. Data structures. How to structure a program that involves multiple files. Amortized time. Some algorithms. Professor Glenn and airport codes.",
                "Low-ish level programming in C, implementing fundamental data structures and running algorithms efficiently with them, memory safety and debugging with gdb and valgrind, plus a lot of practice in handling character input.",
                "I guess I practiced my ability to approach extremely difficult, multi step problems.",
                "I got much better at programming in a structured way.",
                "Learnt a lot more about algorithms and coding skills.",
                "I improved my ability to implement and debug programs in C. I also learned about a variety of different data structures, such as self-balancing binary trees and hash tables. Though C is not a common language for software development today except in systems programming, the material taught in this class is very useful and necessary for any computer science student.",
                "I learn a lot about abstract data types and how they can work with each other.  I previously thought of each structure as a separate entity but this class taught me how to mix and match them for maximum optimization.",
                "This course teaches data structures and programming techniques, as the course title suggests.",
                "Learned how to code in C, as well as how to use a variety of data structures (directed graphs, hash tables, linked lists, etc) as well as how to implement a number of basic search and sort algorithms (heapsort, binary search).",
                "How to implement data structures like hash tables and binary search trees. Became more familiar with the C language generally (especially memory allocation and pointers).",
                "The first half of the course provided a comprehensive overview of the C programming language as well as some overarching programming principles. After the first exam, we then shifted to learning about abstract data types: hash tables, trees, graphs, and heaps. There were additional emphases on asymptotic efficiency and recursion for the various algorithms we discussed.",
                "I got much better at programming in C and learned a lot about different data structures",
                "Essential stuff for CS",
                "all of the important data structures necessary for programming. Additionally, I learned how to develop a large codebase (with proper \"programming techniques\") that was logical and made sense.",
                "Learned how to implement data structures in c, however graphs and dijkstra felt extremely rushed",
                "I gained a solid amount of knowledge on not only how to code in C, but the theory and conceptual understanding behind it.",
                "Data structures, programming techniques, how to approach CS problems and think about the efficiency of solutions",
                "learned how and when to implement specific data structures in C.",
                "Good organizational skills, time management, abstract thinking,",
                "I got a much better sense for the underlying actions a computer takes when running code.",
                "Data structures and programming techniques",
                "The class covered classic data structures including stacks and queues, hash tables, binary search trees, heaps, and graphs.",
                "I learned programming in C and different data structures and algorithms that C commonly uses to implement different tools. In addition, I learned about many fundamental tools and concepts in programming, such as debugging, commenting, formatting, time complexity, and more.",
                "I learned a lot of C and data structures while taking this course.",
                "Learnt how to implement abstract data types in C.",
                "Programming in C, learning data structures such as trees, graphs and lists",
                "I learned how to persevere as well as what the class promises to teach: data structures, algorithms, and modes of thinking in computer science.",
                "I learned a lot in this course: maps, hash tables, stacks, queues, linked lists, graphs, and other ADTs using C",
                "I learned more about different data structures in programming and about the intricacies of coding in C.",
                "I definitely learned a lot about C, a lot about data structures (hash tables, binary trees, balanced binary search trees, heaps, queues, different implementations of a lot of these structures, graphs, etc.). I also learned a good amount about run time analysis and of efficiency. This course definitely teaches a lot of stuff if you're interested in cs.",
                "I learned how to program more efficiently by creating new data structures and techniques. I got experience programming larger programs in C that use multiple files and data structures to solve common problems like the traveling sales person problem.",
                "Learned how to write code in C, as well as the underlying mechanics of how data allocation works in C. Also learned several different algorithms and data structures.",
                "I learned a lot about data structures and how to approach a problem, weighing the pros and cons of different approaches.",
                "I learned about programming in C, data structures, sorting and searching, and data allocation.",
                "Programming in C, how to think about memory in C, many data structures.",
                "I learned a lot more about coding in C, as well as a lot about how to structure data so as to search for, add, and remove particular data elements efficiently.",
                "Through the in-depth study of a variety of data structures, I gained deeper insight into the best and most efficient ways to program (i.e. time and space complexity). I got a lot of practice in programming in C throughout the course with exercises and projects.",
                "Data structures and the ins and outs of C",
                "The basics of various data structures and algorithms. I left with much more knowledge of how data is formatted into different structures each with their advantages and disadvantages depending on its function.",
                "Pretty much everything I learned was on my own. I had to self-study almost all of the content from youtube tutorials and the James Aspnes notes. The lectures were very disorganized and incomprehensible.",
                "Better knowledge of programming in C and data structures.",
                "Data structures, C, and debugging.",
                "I grew so much as a computer scientist in this class. I truly learned a lot of new syntax and it really changed the way I approach coding problems.",
                "Throughout this course I learned how to program in C, which differed from other languages I've learned due to the importance of manual memory management and the use of pointers. I also learned about a wide range of fundamental computer science data structures and coded several projects incorporating this new knowledge I learned.",
                "I learnt a bit about memory",
                "Programming, analytical thinking, data structures",
                "I developed programming skills in C, as well as familiarity with data structures",
                "Some basic algorithms and mostly data structures.",
                "I learned about data structures and implementing them in C.",
                "Data structures and how to debug in C and write it",
                "I learned how to implement numerous data structures in C as opaque structs, and I learned how to build efficient solutions to problems like the traveling salesperson.",
                "Lots of knowledge of data structures and algos used in real world contexts",
                "knowledge about data structures, c, and writing efficient code",
                "Programming in C, data structures, memory allocation, efficiency",
                "Ability to implement just about any data structure I can theoretically describe, in the C language.",
                "The basics of data structures.",
                "Fundamentals of computer science - ranging from a deep understanding of some important data structures and algorithmic methods",
                "Basics of C syntax, memory management, organizing code in large projects with opaque structs, various implementations of certain data structures, complexity analysis, and a variety of algorithms and their applications.",
                "I learned to better code data structures and algorithms. I also learned some of the more advanced inner workings of C (used pointers a lot, etc).",
                "C syntax, basic data structures",
                "Learned how to implement a number of data structures and algorithms",
                "I gained exposure to a low-level language like C. I also was able to become more comfortable with both application-based computer science and the theories behind the algorithms used in computer science. I also got more experience working in a terminal and using Visual Studio Code.",
                "Students can expect to have an introduction to data structures and their implementations. Glenn taught the course in a way such that each implementation of the data structures could be used in a programming environment, which is incredibly useful.",
                "I was introduced to many new data structures and began to understand their applications, costs, and benefits. I became much more adept at handling dynamic memory, and debugging issues in my code.",
                "I learned so much about how to actually program, which was really great. I learned a lot about C and data structures as well.",
                "C",
                "I learned how to use, implement, and adapt standard data structures to design efficient solutions to problems in C on Unix systems.",
                "Basic ways of how different data structures are tackled. Keep in mind this class doesn't really tell you how to convert raw data."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?\n(Your anonymous response to this question may be viewed by Yale College students, faculty, and advisers to aid in course selection and evaluating teaching.)",
            "comments": [
                "Strengths: I liked Professor Glenn (even though I know there are people who find him monotone or dull). He does speak slowly, which might be a strength if you're someone who likes to watch the recorded lecture - you can do it at 2x speed and it'll sound just fine.\r\nWeaknesses: This is more like a complaint - On the syllabus it said \"3-4 programming projects and 10-12 programming exercises\" but we ended doing 4 projects and 12 exercises. (And I was feeling so happy when I finished the 3rd project because I thought I was done.) But they weren't that bad so it was okay.",
                "Pretty much no strengths. The class doesn't really teach you how to approach hard problems, it just forces you how to figure out how to do so on your own.",
                "The course material is decently interesting, but the context of the projects and weekly exercises feels antiquated and a little dull. Additionally, there is an extreme focus on private test cases in grading projectsfor me, this meant the balance between \"Data Structures\" and \"Programming Techniques\" in the course title was heavily imbalanced towards the latter. In my opinion, it would have been more valuable for me to get a deeper understanding of data structures and broad use cases in the real world, rather than using a data structure only once or twice throughout the whole course and spending most of my time testing my code for a good grade, as in the end, I was focused more on the grade than the content.\r\n\r\nA very big gripe I have with the course is that they take way too long to get grades back to you for projects and exercises. For exercises, it's not a big deal, because they are very easy and such a small part of your grade, but projects are a huge part of your grade. Each project took about 3 weeks to grade, and it doesn't even seem like they're that hard to grade (it's just coming up with more test cases on their end). Additionally, the course staff took more than a month to grade the 3rd project (out of 4), which meant by the Cr\/D\/Fail deadline, we only had half of our grade.",
                "NA",
                "The course was very well-structured. Having small, weekly programming exercises which took 1-2 hours on top of four larger programming projects which took 12-16 hours allowed for students to practice their C programming skills at a regular rate throughout the semester, rather than in short, furious bursts. The lectures were a little dry - however, this is more a function of the subject matter than anything the professor could have done. Additionally, more time could have been spent at the beginning familiarizing students to programming in C. Students coming in with experience do fine, but students without experience programming in C have to work hard to get up to speed at the beginning of the course without that much support from the course itself. Having a few \"Crash Course in C Programming\"-style extra sessions at the beginning would have been useful.",
                "strength: a lot of help and support, amazing and understanding teacher\r\ncon: a lot of material if not managed properly",
                "The class was taught in a manner that was conducive to learning if the student put in a significant amount of effort. However, the class is very very very time consuming compared to other courses at Yale. It was also difficult to seek help at times, especially given that everything was moved online. There would also be weeks where you would have to balance a project, programming exercise, and midterm at the same time.",
                "Strengths: Covered a lot of content and learned how to use C very well.\r\nWeaknesses: Workload was increased from previous years, despite already being a notoriously hard class.",
                "I thought it was well done overall. Glenn was good, the Tas were helpful, and I liked that there was low-stress weekly practice in the form of exercises. \r\n\r\nWeaknesses: My only beef was with the programming section of the exams. Objectively I can see how ~2 hours seems like a ton of time to complete four mini programming exercises. But if you get a minor bug in one of them that screws it up, youre at a maximum 75%, and in two and you can only get a 50%. And grade-wise theres no difference between someone who totally doesnt understand the question vs. someone who has the right logic but made a syntax error, for example. If it wasnt an exam I wouldnt freak out and would probably do better, but in the exam setting that gets pretty stressful. I can see how a take-home exam (like a full day to do it) could be problematic, but an extra hour wouldve really helped me relax and focus. We havent gotten grades back yet, but I wouldnt be surprised if the exam category singlehandedly tanks my grade 5 or 6 points. Which is a little frustrating because 6 hours out of the whole semester doesn't seem like the best representation of my work vs. the >120 hours I put in on exercises and projects.",
                "The programming exercises and assignments were well-designed, requiring that students understand and implement the concepts discussed during lectures. Professor Glenn also did a great job emphasizing the advantages and drawbacks of different algorithms and when we would prefer one data type over another. \r\n\r\nThe large weight placed on out-of-class assignments as opposed to timed exams was beneficial, especially during such a stressful semester. However, despite Professor Glenn's claim that the three-hour slot was much more time than students would need on the two exams, everyone else I know in the class was rushing to finish. This is because the exams consisted of two separate components: one on Canvas and the other on the Zoo. The Zoo section was graded using an all-or-nothing rubric (no credit if you don't pass the test cases), which was not the expectation for students in previous years. This resulted in a lot of unnecessary stress surrounding the exams.",
                "The weekly hw exercises at the beginning of the course were way to long, but they listened to student feedback and adjusted accordingly which was greatly appreciated. For a course that pretty much has a computer do the grading, grades took a really long time to get back to people which was a little disappointing",
                "strengths: this is an extremely difficult class that pushes and challenges students to develop necessary skills in programming and to learn difficult concepts. The programming exercises and assignments did that really well\r\n\r\nweaknesses: the exam prep did not reflect the exams well and the exams were extremely difficult",
                "Strength: some ULAs are super helpful. The course is organized for the most part.\r\nWeakness: lecture can be extremely hard to follow. Some psets you spend more time skimming professors code than you do writing code",
                "The course was very well structured with distinct modules. The nature of the subject lends the student to constantly improve skills learned earlier in the semester. The lectures were succinct and decently clear for such a complex topic. The fact that all notes and lectures were posted was also super useful, as the student could rewatch specific sections they did not understand.\r\n\r\nThe biggest weakness in my opinion was the availability of help\/Office hours. Right before certain assignments were due, office hours were flooded, and it was extremely hard to even ask a clarifying question, much less help with the assignment. Grades also took a while to be uploaded, so it was difficult to correct mistakes and apply changes for the next assignment.\r\n\r\nLectures were a tad boring at times, but as stated before, they were concise and easy to understand on rewatch.",
                "Online lecture is not too bad for coding classes",
                "The course course provides a ton of support for students in office hours. Once they implemented an office hours queue I think everything progressed excellently and I was able to get the help I needed.\r\n\r\nThe assignments and projects were all very instructive, albeit rather time consuming.",
                "I thoroughly enjoyed every part of this course besides the extremely limited availability of office hours. This course was very stressful before the exams and project deadlines as I felt that I could not get the help that I needed.",
                "Strengths: forces you to be organized, to think deeply and clearly about your own code, learn a lot of data structures very thoroughly. Weaknesses: no feedback on code other than your automated score, little engagement with professor, office hours are great but for the hard projects even the ULAs can struggle to give meaningful help because the problems are so nuanced, personal and specific. Massive jump in difficulty on the last project",
                "The exercises were mostly reasonable.  Unfortunately there was quite some variation on how long they took which made scheduling difficult.  I really wish more of the projects and exercises involved writing code from scratch.  We really only ended up doing that like once or twice the whole semester.  While I understand the point of giving some prewritten code, I wish there had been more problem solving involved.",
                "Burn it, fire the professor, burn everything, start over\r\n\r\nMost disorganized class ever. Worst communication imaginable. Have lecture slides and post them instead of just recording a drawing. Have the starter code and problem working before posting it. If you are unable to achieve this base level of order and give us wrong code - make an actual visible announcement that you messed up. Etc.",
                "Strengths: the class covers all the data structures that are really useful to know; the professor is very knowledgeable on the subject and pays a lot of attention to detail.\r\nWeaknesses: reading inputs and handling errors in the assignments feel tedious sometimes; the class sessions that work on the homework as a class don't feel entirely productive.",
                "The weekly assignments help tremendously in helping the students understand what they learned in the course, such as different data structures and algorithms. However, the lectures are not very informative (the core information can often be transferred much more efficiently), and reading Aspnes' 223 notes is (in my opinion) significantly more efficient and clearer than watching the lectures. In addition, the online office hours are not helpful at all, and they are actually detrimental in some ways (the ULA's often gave me incorrect advice that actually set me back on my projects).",
                "The course is a lot of work, but the course material is very useful and interesting. The projects can also be quite fun if you enjoy programming (emphasis on if). If you haven't used C before I would recommend trying to at least get somewhat familiar with it before taking the course, but also you can definitely learn it as you go in the course if you're dedicated.",
                "There is a lack overall of adequate support for computer science students at Yale in general. That is something that continues to be an issue and is increasingly worse with the current online classes. I know plenty of people who I consider smart and intelligent and who enjoy computer science but are dropping the major simply because of how they felt that they were being left behind without the adequate help to properly understand to then be able to use what they learn.",
                "I feel like this course felt too much like a gauntlet, especially with the situations surrounding everybody. I also feel like the lectures could have been more engaging.",
                "Strengths: Professor Glenn explains really well, plus the ability to rewatch lectures helped. The projects were really fun and you learn a lot (they also didn't have to be stressful if started on time). Office hours for all kinds of timezones and a very active piazza page were helpful. \r\nWeaknesses: the course format could be slightly changed to send out the weekly coding assignment on Tuesday instead of Thursday to give more time to work on it before the Sunday deadline. Assignments and projects could have been graded faster.",
                "This course was very difficult. I would like to see better office hours.",
                "I think this course gave a lot of work, which is both a strength and weakness. It allowed to keep on stop of the material and ensure that you really learned it, but got to be a lot at times.",
                "I liked the way that this course was run virtually. I think it helps to be able to have a chat window where an assistant or other students can answer questions as lecturer talks. However, I found office hours to be much less accessible online.",
                "The strengths were how much I learned: Professor Glenn was very effective at teaching what he intended to teach, and I definitely learned a lot of very detailed info in a short period of time.\r\n\r\nThe weaknesses is the structure of how the classwork was organized: it was a project-based course this semester, and it was really difficult to collaborate in any way to improve comprehension in light of a remote semester.",
                "Strengths: I enjoyed the content that we went over in the course. I thought that the graphs and explanations of new concepts that were done in class were helpful. Additionally, I liked the homework exercises we had every week -- going over most of the exercises in class on Thursdays helped me get a better grasp on the material.",
                "In my opinion, there were no weaknesses. This course delivered on exactly what it promised, which was to teach data structures in C. Lectures explained the concepts in great detail, and coding assignments allowed us to put those concepts to use ourselves so that we could be sure we were really learning them. The balance of quick coding exercises to gain extra familiarity with the concepts and more expansive programming projects to really push the boundaries of our knowledge and abilities was excellent.",
                "The strength of this course is Dr. Glenn. He is a fun lecturer, incredibly knowledgeable about the material, and tries his best to make all the assignments and in-class coding as engaging and interesting as possible. He adapted quite well to a remote setting. The assignments themselves were great to build understanding of each data structure. The course itself felt just a little bit too difficult, especially when it came to the multiple week-long problem sets. The last project seemed to be a huge jump up in intensity from the first two. Since we were remote, it was harder to work together, get help (even with virtual office hours), and meet friends in the class, so the projects were kind of torture at some points. Also, I would've appreciated a more in-depth look at 1) debugging, 2) creating your own test cases, and 3) space & time complexity as a concept (felt a little lost on that end occasionally). I only just found out how to use VSCode's built-in debugger properly halfway through the semester, and the fact that you could fail private test cases even though you passed all the public ones really freaked me out sometimes.",
                "You Learn a lot and get really good at C. But with that being said I felt like the class went SUPER fast and before I could really digest something we were already moving on to the next topic.",
                "Strengths definitely include the TAs and lecture recordings. But the biggest weakness would be the lack of interaction among students especially since the course was remote this semester. Also, there was rarely any feedback for both homework solutions and projects, so youre left wondering where you went wrong or what the most efficient solution was.",
                "The only strength of the course is the quality of the textbook. Everything else was a weakness. The lectures are incredibly boring, disorganized, and slow. The professor's teaching style was so boring that I would speed up the lectures 2x only for the lectures to still be too slow. Additionally, it felt as though the professor was trying to set us up for failure. For example, we had a final exam right before reading period started. Then, there was an insanely hard final project due on the last day of reading period. Most students spent all reading period working on the project and were unable to study for final exams in other classes the week after. The average on the final was a 51% and most exams had similarly low averages. On top of this, office hours are a mess. There are often 30 students waiting in queue for one TA. Oftentimes, less than half of the students would be helped over the entire office hours session. Additionally, most TAs took the class with a different professor and were often unable to help that much with the psets and projects for this class. Also, the head TA wouldn't even show up to his own office hours, making it almost impossible to get help. The time commitment expected from this class is absurdly high and unrealistic. We are expected to do a pset every week and a gigantic project like every 2 weeks. The weeks projects are due, we are also expected to do psets which makes it very hard to stay afloat.",
                "I thought the course was not very well organized.",
                "Could have used more walkthroughs and more ULAs! Office hours had ridiculously long lines and the amount of ULAs were sorely insufficient for the workload\/amount of help the class demanded.",
                "I feel the course's structure through it's lectures, exercises, and projects did a good job of teaching me about C programming and data structures without ever being overwhelming.",
                "it assumes you already know C. We don't really learn memory allocation; I just saw a malloc in a class and was like \"oh! that exists?\". I would suggest a C bootcamp at the beginning",
                "Strengths: Level of rigor, projects were interesting, topics covered were interesting, information was very practical, instructors were all very good\r\n\r\nWeaknesses: this is not implicit to the course itself, but CS223s high workload, while in my opinion necessary for this course, does not complement other high workload courses well. Students should be careful with their schedule.",
                "I learned a lot from this course, but I learned most of it through struggle and having lots of work",
                "The exercises were helpful every week!",
                "OH are so helpful but sometimes I get lost during lectures",
                "The projects were extremely engaging, but I wish they had been slightly shorter and less difficult.  I wish the weekly assignments had been slightly more extensive instead.  The more theoretical lectures were interesting and helpful, but the ones where we watched the professor write code were much less engaging.",
                "This class didnt just have the biweekly projects, it also had smaller weekly exercises. I think these were very helpful because they allowed us to work with more of the material that we cover in class, but that we may not have incorporated into the bigger projects. I found these exercises helpful and they also make our grade not so dependent on the projects. I found Glenn to be a good lecturer who was clear and explained well, allowing me to feel like I could keep up most of the time",
                "More guidance on the psets would be helpful (like a walk through of some sort)",
                "strengths: rigorousness and complexity of cs labs\r\n\r\nweaknessess: overemphasis on passing test cases rather than showing knowledge of learned material",
                "The lectures are relatively dry, and it would be helpful to see some practical real-world applications. The workload, particularly for projects, is really high, and it can be difficult to know where to start. More guidance on problems similar to the exam questions would be helpful.",
                "C is not a helpful language for coding interviews, which need good data structure libraries. If this class was taught in Java or C++ that would be much more helpful.\r\n\r\nThe projects were all on interesting topics and the right level of challenging, I just wish there was more feedback that just the names of test cases you failed.",
                "Add more office hours.",
                "The project assignments were challenging yet rewarding and helped me learn a lot of the material. Lectures could feel mundane sometimes, but they were quite informative and comprehensive. However, the given instructions for the projects were sometimes vague and unclear, forcing students to spend a lot of time on Piazza posts for clarification.",
                "While I think learning the data structure content was learnable over Zoom, I found the online class experience, on top of learning C syntax, on top of the data structures themselves, painfully difficult. I'm genuinely unsure why this class is taught using C; the vast majority of your time is spent wrestling with the C language, instead of actually thinking about actual class objective of understanding and manipulating data structures. The class's language, with its lacking debugger, actually manages to detract from it's value. A better, higher level language such as Python or Java would do wonders for the cohesion and utility of this course. Needless to say, taking this course online generates even more unnecessary challenge.",
                "Not sure if this was due to being online or scheduling purposes, but I feel as though we missed some important topics such as dynamic programming.",
                "I think both the strength and the weakness of the class is the independent nature of the course. We did so much of the coding work by ourselves, and our feedback and grading for those assignments were solely from how many test cases we passed. I think with a better feedback system, we would be able to improve a lot more. I also think that there was a huge difficulty jump between assignments and projects.",
                "This class definitely could have used some better organization. It was difficult to find resources at times, as they were distributed among the canvas course page, piazza, the 223 webpage, and the zoo. Also, the time frame for the final exam (which was not officially a final exam) and the last project were very unreasonable. The final was given the last week of classes, and then reading period was taken up by the 50 hour projecttime I could have used to study for the finals I had early in the following week. Also, the office hour scheduling was often inconvenient, with too few or no TAs at all on days nearing project deadlines. Finally, I would encourage the teaching staff to create new practice exams, given that the format was much different this year, and that the questions on the actual exam were much more difficult than the ones on the practice. Other than that, this class was fine throughout the semester. The first 3 projects were tough but reasonable in retrospect (but I do urge the professor to make his project instructions more clear!). The weekly assignments were more than reasonable and I would say there was good office hour support for those. The 50 free late points for the semester were very much appreciated and I would recommend that the course instructors continue this practice, especially during covid times.",
                "The projects felt to be extremely difficult, and took me and my friends ~40h+ instead of the intended ~15-25.",
                "Strengths: lectures were clear and I liked how diagrams were presented during lectures to help understand the concepts and various data structures \r\nWeakness: a lot of work"
            ]
        },
        {
            "question_id": "YC602",
            "question_text": "Among the practices in this course geared toward learning during the COVID-19 pandemic, which succeeded and which could be improved? Please comment on course practices that allowed for virtual engagement. (Your anonymous response to this question may be viewed by Yale College students, faculty, and advisers to aid in course selection and evaluating teaching.)",
            "comments": [
                "Success: recorded lectures, office hours format was pretty effective, Professor Glenn's responses on Piazza are usually timely",
                "They did a relatively solid job of making office hours available through a queue system and an office hours website.",
                "None applied.",
                "The virtual lectures were well-done. Using OneNote as a virtual whiteboard was very effective, and watching code being implemented naturally lends itself to screen-sharing. Office hours could have had more staffing - I only attended once, however, I had to wait for quite a while to be connected with a TA.",
                "The queue system for ULA office hours could be improved, perhaps by hiring more ULAs. In the days leading up to programming project due dates, there would be more than hour-long wait times to meet with ULAs to get help.",
                "As far as I know, this course was altered during the pandemic by making it even more challenging than during a normal semester. This year, the course included both weekly exercises (around 3 - 6 hours of work) and biweekly projects (ranging from 15 - 35 hours every two-ish weeks), whereas in previous years only the projects made up the bulk of the workload. As such, this made the class much more interesting.",
                "If this means virtual engagement as in students talking during lecture, that didnt really happen, but I didnt expect it to. The chat box was widely used and Rob did a good job answering questions in the chat so that was good.  \r\nScreen sharing worked well for Glenn's drawings and explanations.",
                "The virtual office hours were structured well to facilitate student learning on programming exercises and assignments. However, the online exams (in previous years, exams were on paper) were stressful and set unrealistic time expectations.",
                "The ability to rewatch recorded lectures was fantastic in both understanding the material and reviewing for tests",
                "Recorded lectures were good.",
                "succeeded: recording lecture was invaluable. I wish this could be possible during normal circumstances because I don't know what I would have done in this class without access to recordings\r\n\r\nto be improved: IMPORTANT: office hours. Office hours were inefficient and hard to come by this semester. There were times when there was only one ULA for 15 students and the ULA barely looked at my code. Sometimes I had to go to office hours multiple times with multiples ULAs just to get an answer. I know it is hard to change the way that office hours work because of our online situation, but there were times where it was really to my detriment, even when I planned in advance and joined the queue early.",
                "Live lecture worked fine. Recording lecture was a life saver",
                "Asynchronous lecture times and piazza worked very well. Changing the assignment structure to include short, weekly exercises allowed us to make sure we understood the material. However, some assignments did not bolster my understanding all that much, and I wish they were more focused. For example, I really liked the last exercise, as it made us apply a specific algorithm with pseudocode. I think a fill-in-the-blank style of coding would work as well (fill-in-the-blank like what appears on our exams). Office hours did not, as one would have to wait nearly an hour at times to receive help for ten minutes.",
                "Office hour queue was brilliant. Use of piazza and having recorded lectures\/review sessions was very helpful. Overall one of the best transitions to online learning that I have seen.",
                "This course could be improved with significantly more office hours sessions.",
                "Lectures were great, I enjoyed watching them multiple times. Piazza was very helpful, if often slightly passive aggressive and condescending. I wish Professor had office hours more than just at the very end.",
                "Being able to watch recorded lectures afterwards was amazing.  I could speed through majority of the lecture at 2x and just replay if I missed something.  However, the fact that I literally didn't say a single word to any course staff the entire semester wasn't ideal.  The office hours system seemed somewhat confusing and I certainly would have preferred them being in person.",
                "Fine",
                "Although the virtual format made it easier to share pieces of code, sometimes the class becomes dry when we're watching code being typed out. The virtual exams are very well-designed and feel a lot like a normal exam.",
                "I don't think COVID-19 affected this course at all, since it's a large lecture class without discussion sections. I imagine that in-person engagement would look almost identical to what we experienced this semester.",
                "The online lectures were set up very well with one lecture geared towards concepts and one towards application\/weekly programming exercises.",
                "Office hours were horrible and often not helpful. Students spent time waiting just to get in a room and then share there screens with horrible quality and receive little to no clarity on what is wrong or what direction to head into. The professors drawings were very helpful however. There is also no feedback in computer science classes which makes it incredibly hard to know how to progress forwards.",
                "I think that overall, the practices were all pretty successful.",
                "As an international student, I appreciated how there were 9am office hours. I also appreciated the Piazza page. However, I wish we got more time to work on the weekly programming exercises (or at least equal time across all time zones). Because of my timezone, I could access the exercise only after I finished watching the lecture on Friday morning, and I had to submit many hours before the deadline on Sunday night. This meant that I got much less time to work on exercises, and it could get stressful considering how we are juggling other courses which also have weekly deadlines.",
                "The office hours were not effective.",
                "I can't really think of too much to do to improve this course, in thinking of COVID.",
                "Asynchronous lectures were very helpful, as it meant that I could review previous instruction more successfully. However, there wasnt really any accommodation in terms of being understanding of the situation as a whole in the worldI had pretty severe mental health issues in the semester (a result of the election, living at home in an untenable situation, pandemic stress, etc) that I communicated, but all I got amounted to Oh, shucks, were sorry, and nothing else.",
                "I didn't enjoy the office hours format this year (because everything was online), since we had to enter our names into a website and wait in a queue.",
                "All of the practices succeeded, as everything functioned pretty much exactly as it would with an in-person class. In fact, in my opinion, this was an even better experience than in-person, due to the fact that students could ask questions to TAs in the Zoom chat without interrupting the main lecture.",
                "Halfway through the semester, TA Rob created a virtual office hours platform. That was one of the most effective remote learning practices -- though we couldn't see our classmates in person, we could see them on the queue or ask for broader help on the chat. We could also see our position in the queue. I appreciated having access to Aspnes's notes, recorded lectures if my internet ever cut out, and Piazza for private debugging requests. The exams, though very long and difficult in my opinion, were well adapted to a remote setting with lots of leeway and both coding and written portions. I thought this course was exceptionally adapted to virtual learning, so it's hard to point out any weaknesses on this front. I think possibly the organization of the course website could be improved a smidge.",
                "Honestly Office hours was super rough in the Pandemic format. But with that being said the TF was able to make things go much smoother with the Queue that he built.",
                "Most of my engagement involved ZOOM calls with a classmate and TAs.",
                "The only thing that was nice about the virtual experience was the lectures were probably better than they would be in person. Glenn could share his screen, which made lectures slightly better. Also, Glenn talks unreasonably slow so it was nice to be able to speed the lectures up. However, office hours were a mess. There are often 30 students waiting in queue for one TA. Oftentimes, less than half of the students would be helped over the entire office hours session. Additionally, most TAs took the class with a different professor and were often unable to offer help that much with the psets. Also, the head TA wouldn't even show up to his own office hours, making it almost impossible to get help from someone who actually created the psets.  The testing format was unreasonable too. We had 3 hour tests that were absurdly difficult. The average on these was ~60%.",
                "I think office hours was not very helpful for this course.",
                "The online queue that Rob implemented was probably the best thing to happen to the course, especially remotely. However, the lack of organized and readily readable notes from lecture was frustrating! It's extremely difficult to rely on zooming through nearly 2 hour lectures just to find one piece of information. For example, the posted notes on Canvas are just (really bad) drawings and if, say, I wanted to know  a specific piece of info on Dijkstras is I'd have to go looking for the specific lecture and guessing where that info was mentioned in passing. It doesn't help that a lot of my peers and I will watch the lectures over and over again, and zone out! There needs to be organized notes with readable diagrams!",
                "Having the lectures be recorded to be able to viewed later at any time was very helpful during the pandemic.",
                "The new csofficehours website is dope. Made attending virtual office hours much more simple, compared to having to guess the wait time (prior, had multiple experiences of waiting for over an hour without any indication of when ULAs would be available, and left without receiving any help). Impressed it was rolled out in the middle of the semester, and I think it should be used in any class with high enrollment for which the demand for pop-in office hours may be high.",
                "The live lectures were a good method, as well as the recorded lectures on canvas. They allowed students to move at their own pace in the course.",
                "The virtual lectures were fine; I'm glad they were recorded.  I never attended office hours, but it sounded like they had a good system.",
                "Zoom office hours were very helpful and convenient",
                "Office hours were always too busy and it was hard to get even 5 minutes with a ULA",
                "using the zoo succeeded, and an online whiteboard for lectures did as well. student to student collaboration could definitely be improved.",
                "Recording the lectures was helpful.",
                "Add more office hours. The homeworks very especially difficult to do alone sometimes",
                "Lectures were recorded on Zoom for students' convenience. There was virtually no engaging participation on behalf of students, but that is expected in a large lecture-size course. Exams were adopted to a virtual format with ample time to accommodate for unexpected technical incidents.",
                "The office hours queue system was useful and well structured.  However, I think going from the online Zoom class to the actual coding projects is problematically challenging. Especially in an online class environment, more emphasis on learning C, especially how to debug C, would be a useful change.",
                "I feel as though the live lectures went pretty well",
                "I think having the option to watch back lectures was a good one to have.",
                "Live lectures that are recorded and uploaded was a good format. Using piazza for student questions was a great practice, and the instructors were good at answering them quickly most of the time (though sometimes a question would be left unresolved, which was frustrating). The best thing the professor did was provide us with 50 free late points to use for assignments throughout the semester, and the 2 hour grace period at each deadline. The professor was also very kind and would try his best to help out when reaching out to him about strange zoo or compiler errors. One recommendation though would be to give students a simple practice run in the same format as the actual exam, since it was a little tricky figuring out how to copy local files onto the zoo at first. Also, it would be much appreciated if the professor took students' other classes into consideration near finals.",
                "Office hours were set up in a helpful manner following the queue tool, but it could get quite buggy at times, which could be frustrating.",
                "It was helpful having an online queue for office hours to know the approximate wait time; however, that could be improved by possibly having people decided whether or not they want to share with others what question that they are working on so that when waiting for the ULA for help people can meet with others to work on the problem together.",
                "The course itself wasn't really effected but, and this goes for all cs classes currently, office hours SUCK compared to a normal year. Expect to take a lot longer on psets and have much more unhelpful office hours. I can't emphasize how much it sucks."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.\n(Your anonymous response to this question may be viewed by Yale College students, faculty, and advisers to aid in course selection and evaluating teaching.)",
            "comments": [
                "If you're looking at this class, it's cause you have to take it so just put it in your worksheet already and find out for yourself. It's not the end of the world but it's certainly not easy either homie, good luck.",
                "If you're a CS major, you probably have to take it. Otherwise, if you like CS, sure. I mean I don't know why else you'd be considering it.",
                "For those who are not looking to major in CS (I wasn't when I signed up), this could be of interest if they want to take algorithms next (e.g. as a math elective), understand how computation works deeper down, or prepare for leetcode\/technical interview problems. I fell into the first category, and this course convinced me that I should've been a CS major all along. Experience in a C-like language (or affinity for problem solving) might be a better predictor of success in this course than 201.",
                "No. Don't take this class. Makes me want to change my major away from CS. It's unnecessarily hard and there's no point in doing this to yourself.",
                "This course is necessary if you're an intended CS major. Do not be scared if you're a first-year taking this course as your first CS course at Yalethe key to success is having worked on many CS projects in the past so that you're coming into CPSC 223 with well-developed debugging and coding skills\/speed.\r\n\r\nIt's not worth taking this course, especially with Glenn, if you're a non-CS major (unless you need the course for core reqs or prereqs). We didn't learn too much in terms of data structures, and you can develop coding skills through other classes in a lower-stakes way.",
                "If you REALLY want to do CS",
                "This class is a required course for anyone majoring in computer science or a related major. However, even if it were not, I would recommend this to any computer science major. The material covered in this class is essential, basic material that anyone engaged in software engineering should have an awareness of. I would encourage this class to anyone who wants to gain an understanding of how computers and computer science works. However, note that the class is somewhat conceptually difficult, and should be at least the second if not the third computer science course a student takes. Particularly, I would be hesitant to recommend this course to a student who has no experience programming in C.",
                "yes if you need it for the major",
                "No, unless it is required for your major. Even so, the class makes you reconsider your major. It is not very stimulating, but it does teach you the basics of data structures.",
                "Take it only if you're a CS major or in person. I'm not sure if the prof or TA's realized this but the online format made the course much more difficult to do well in.",
                "Not with the current professor, as although the course was alright and the problem sets were at times interesting, both the time constraints placed on the exams and the projects were absurd given the pandemic.",
                "Yes, definitely. In fact Im shocked that Glenn doesnt have higher reviews as a professor, because I thought all his explanations were really logical and easy to understand. Sure hes not exciting, but you have to be a godlike lecturer to make this stuff exciting. He has a decent sense of humor and his explanations are interesting and thorough. A+ drawings toohis drawings of pointers and structs really helped me visualize what the code is doing. He may well be the best STEM professor Ive had at Yale (out of the ~6 math&engineering courses Ive taken). Cant really ask for more on the teaching front. \r\n\r\nFor people deciding whether to take this after CS50thats where I came from (didnt take 201), and it was totally worth it. I almost cant believe I wavered over it. For context I thought CS50 was pretty fun (enough to make me want the programming certificate, but not major in CS) and I always felt like I understood most of the material\/psets, although there were points where I felt overwhelmed homework-wise. If thats how you felt and you have self-discipline (enough to start projects at least a week and a half early), youll be fine in CS223. The projects are fun and although an A isnt assured, an A- is definitely in reach. \r\n\r\nAdvice: start early and make sure to plan your implementation before you start. For me that sometimes meant going to OH and saying Im thinking of implementing this struct this way, but Im not sure if thatll meet the time bounds\/ have this necessary functionality, and their thoughts were almost always really helpful. Just make sure you dont get halfway through and realize your implementation doesnt actually do what the spec wants. Also, my main regret is that I didnt compare edge cases with my friendsseems like it can really help.",
                "CPSC 223 is a must-take for anyone interested in gaining a solid understanding of data structures. Professor Glenn does a great job of answering student questions and makes his programming assignments reasonable. While the course certainly lives up to its intense reputation, I came out of the semester having learned more than in any other course at Yale. Don't be afraid to give it a goeven if you're from outside the CPSC department.",
                "Absolutely! Even if you are not a CS major (then its a required course), you will greatly improve your programming skills with a variety of fun projects. Time crunch honestly wasn't bad if you just start the assignments early and go to office hours as soon as you get stuck",
                "yes",
                "yes, of course! these are basic skills that every CS student needs. For those majoring in CS, my recommendation doesn't matter. for those majoring in other things, this is THE class to make you qualified for jobs. If you want to show that you have real, practical programming experience, this is the class to do that. Also Glenn is pretty awesome. He's very understanding with extensions and regrades if necessary. He's also very funny and knows all of the airport codes. The projects were creative, and I really appreciated this adjusted version of the course with the programming exercises and programming projects.",
                "No unless you are a CS major or you have a lot of spare or you have an extensive background coding",
                "This class will really help any student improve their coding and problem-solving abilities. That being said, some assignments were very time consuming and difficult to understand, so prepare to spend many hours typing away.",
                "Absolutely! I enjoyed the challenges of the class and felt like it was the most rewarding class that I took during the semester. I spent a lot of time on the assignments and was a clown sometimes, but in the end I feel like I learned a lot and have become eager to partake in more programming related endeavors in the future.",
                "I would recommend this course if it could be taken under normal circumstances (not remotely). This is because there would be much more availability of office hours.",
                "Yes, if you want to learn about data structures for interviews\/jobs\/internships etc. Hard to recommend if you don't necessarily need it or have an interest in the material",
                "I wouldn't.  But hey, it's 223.  You have to take it and you do learn a lot.  You'll live.",
                "ABSOLUTELY NOT. If you are standing on the ledge and need a reason to jump, still don't take this class. You will either give James Glenn the satisfaction or have to live with the horrors of this experience for the rest of your life.\r\n\r\nThis class was BAD! Horribly organized. No lecture slides. HORRIBLE COMMUNICATION. absolutely atrocious. don't want to relive it anymore. I guess you have to take it for the CS major though... have fun",
                "I would recommend it if you are interested in learning more about computer science. The topics covered in the class are really important to know.",
                "It is a good \"intro\" course into CS, but I can't imagine that anyone would realistically take this course for fun or on a whim. It's a CS major requirement, so all CS majors must take it; if you're not a CS major but are trying to get a CS certificate, this class is a good fit for you.",
                "Yes, I would highly recommend this to anyone who is interested in computer science or programming in general. It's an excellent introduction to data structures.",
                "This is a required class for the major so called students should take it. I dont really recognize the benefit for any non cs students as I am not entirely sure what you would gain from the knowledge of abstract data types and algorithms. Applicable algorithms would only be interesting to math students but you get those in other classes. Overall problem solving skills are generally better developed in other classes anyways.",
                "I don't think the workload was insane; It takes about 2-3 hours a week to do weekly exercises and about 20 extra hours to do four projects, so on average you're really spending about 10-12 hours a week on average, which is pretty heavy but not impossible. Make sure you have enough time to put effort into this class though.",
                "Yes, if they were interested in computer science and pursuing the major \/ those ways of thinking.",
                "If you are doing the major, you have to do it. If you are not doing the major, make sure you have sufficient coding experience in some programming language (not something like Racket but C++, Python, or Java). Overall, the course isn't too bad, and if you have a strong desire to improve your coding skills, I don't see why you shouldn't take it even if you are not a major.",
                "It is a requirement for a CS degree. If you want to learn how to program, try taking CS50.",
                "I am not a cs major, and took this course just with the idea of learning some more CS, and because this is a prerequisite for a lot of courses I would like to take. It was tough at times to follow it knowing I was not a cs major, but I felt like I learned a lot that will be useful beyond cs as well, so I would recommend taking it.",
                "Yes, but also no. It depends on how much you want to do CS. If youre serious about it, its really helpful for a lot of different aspects of CS. But if youre unsure, its very difficultI invested a lot of time and mental energy to do my best, and in the end, I think my overall grade is low (unless this class is curved, which Im not sure it is).",
                "Yes, if you want to get an intensive introduction to coding in C and data structures, I'd recommend taking this class.",
                "Whether I recommend this course isn't really too relevant, because the course is required anyway for computer science majors, and I wouldn't recommend it to non-computer science majors; for those students, I would recommend taking CS50 or some other introductory computer science class first. For students that have taken introductory classes, or already have some familiarity with C and with programming in general, I would recommend taking this course if they want to keep learning!",
                "I would if you're a CS major! It's a lot of work, but it's kind of the rite of passage into CS at Yale in my opinion. It's the class you start to get legit, multi-week coding projects and where you have to really get your time management down. There's a lot of programming in C, which is pretty applicable to lots of other programming languages and real-world settings. Most importantly, this is the course you learn all about data structures, which, if you're trying to go into software, is key to programming interviews. It's a fun class in my opinion, but it was also super stressful this semester. A note: I think CS50 is solid preparation for this course, and without it or considerable programming experience, some people may be at a disadvantage.",
                "Yes I would. But proceed with Caution. This class can be a lot of work at times, very frustrating(cause of the Nature of C), and time consuming. I would recommend if you are going to take this class after 201 it may be helpful to do some practice problems in other actual programmings to get a grasp of problem solving through code. The syntax of C is just a whole other issue you will have to tackle while taking the course.",
                "Yes, this is a core class if youre a computer science major and will definitely be useful if you plan on working in a field and industry that involves a good understanding of data structures or programming.",
                "I would not. However, it is a required course for the cs major. I would recommend taking it with a different professor.",
                "Yes, I would because I believe it made me a better programmer.",
                "Yes, this course taught me so much. Although it was very challenging, I found myself learning a lot from the assessments.",
                "I would recommend this course to another student. I learned a lot throughout it, and while the 4 projects were a decent amount of work especially as C programming could take a bit of time to get used to, I feel the experience is well worth it if you are interested in computer science.",
                "yes. I would only recommend that you learn C before taking the class",
                "Obviously all CS majors have to take this course, so if youre an intended CS major, theres not many points to be made here. \r\n\r\nFor non-majors, although the course was very challenging, I felt like I gained so much from this course. Comparing the complexity of the first assignment from this class to the final one was quite rewarding. Especially during virtual learning, which has made me felt like I wasnt learning things in other courses as deeply, I found it impressive this class forced you to retain the information solidly.\r\n\r\nAt the same time, the amount of hours you have to pour into this class to keep up is pretty crazy. The expected time for each assignment given in the syllabus is a little misleadinga bunch of people, myself included, agreed that each assignment took far longer than advertised (if I recall correctly, the last one personally took me 60+ hours and it was due at the end of reading period). That being said, if you survive, you come out the other side with a very solid understanding of data structures in C.\r\n\r\nFor deciding whether to take this course: do not take this course if youre juggling a bunch of other high workload classesyour life will suck (as I found out firsthand). Otherwise, if youre very interested in programming and want to improve, definitely consider taking this course.",
                "I would recommend this course to another student only if they were majoring in Computer Science. Otherwise, it is a difficult course with a large workload.",
                "Absolutely. If you start on projects early, it really isnt that bad. You end up learning a ton, and the projects are always rewarding. Also, Glenn is just a fantastic professor in general.",
                "Sure but doing it just for fun may not be the best idea",
                "CS majors have to take it, but I would recommend this course to anyone else who wants to engage deeply in building efficient C code.",
                "The class was very hard, but it was also rewarding. I probably spent the most time working on this class than I have for any other in my college career so far, but it was rewarding to do (sometimes or in hindsight). I do feel like I learned a lot, but I had to work a lot.\r\n\r\nSo I would recommend this class, but be aware of how time consuming it is, and how difficult it is",
                "Only if you have to take for the major",
                "yes, if they already have an understanding of data structures.",
                "The projects take a lot of time. I was spending 20 hours+ every week on the assignments. I would not take this course unless it is required.",
                "yes. Especially useful for interviews too",
                "CS majors are required to take this course, but if you're not majoring in CS, I still recommend this course since coding skills are in demand and this course really trains you to be a better coder. This course covers most of the concepts needed to approach technical coding interviews. However, make sure you leave enough time to dedicate to this course.",
                "If learning online, avoid the course. Even normally, I think there are some basal issues which require resolution; however it's unfortunately a core CS course, so you're going to have to take it anyways.",
                "If you want to pursue any sort of computer science related career, this will be useful. This class also teaches you how to approach problems and break things down to make them more managable, which is useful across all fields. Overall, I would recommend this course if you're willing to put in the time and effort.",
                "I would recommend this course to anyone interested in the coding aspect of computer science. It's definitely not for everyone, as it is a tough course, but you can get valuable knowledge out of it even if you haven't seen much of the content before.",
                "If you are looking to become a programmer or software developer this would be an essential course. Be ready for time-consuming projects and programming assignments.",
                "No, unless you are a CS major and have to take it.",
                "I think that you learn a lot about data structures and how to be a more efficient coder but it is a lot of work. Take it if you need to."
            ]
        }
    ],
    "extras": {
        "title": " CPSC 223 01\n        DataStructres&ProgrmmngTechnqs "
    }
}