{
    "crn_code": "11096",
    "season": "202103",
    "enrollment": {
        "enrolled": 45,
        "responses": 36,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                0,
                1,
                2,
                10,
                21
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                0,
                1,
                1,
                13,
                19
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                0,
                0,
                5,
                11,
                18
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                0,
                5,
                7,
                15,
                7
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                0,
                2,
                13,
                19
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                0,
                2,
                12,
                20
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "Learned how operating systems are implemented. Like, down and dirty, had to get in there and code it yourself. This entails several things: how memory addressing is implemented, how multi-threading\/multi-process\/multi-core systems are implemented, how filesystems are implemented, and even a cool project at the end. You also become a better debugger, planner, coder, etc. After this course, you do indeed feel like you can solve any coding problem, as Prof. Shao says at the beginning.",
                "OS fundamentals and concepts including memory management, threading, synchronization, filesystem",
                "How operating systems work",
                "How to implement elements of an operating system such as a bootloader, virtual memory with a page table, exception handling, synchronization with locking and condition variables (including on multicore systems), a file system, and the backend of a shell.",
                "I learned about how operating systems are implemented.",
                "I learned a lot more about the concepts introduced in CPSC 323. I know a lot more about how a computer works under the hood, and how to implement the kernel of an operating systems.",
                "We examined in depth the various parts of the operating system kernel. Bootloading, memory management, threading, concurrency, file systems, etc. We did a lot of work with concurrency so I learned how to think about programs concurrently and over time it became more intuitive. From a programming standpoint, I became a lot better at debugging and reasoning about potential problem areas. Learned a LOT about what's happening under the hood of the OS in the kernel. We don't touch anything below that point though; nothing about the hardware-software interface or below.",
                "Various OS concepts: physical and virtual memory, multithreading and multiprocessing, process isolation, context switching, locking, caching, and file systems. The end of the course surveys various fields, including security, networking, distributed systems, and RTOS.",
                "I learned about all aspects of operating systems including concurrency, virtual memory, scheduling, and file systems. I also learned how to write code for many aspects of an OS at a low level, and this helped me understand the importance of the OS.",
                "Fantastic dive into important OS related topics like concurrency, memory management, I\/O, and security, and more.",
                "Coding and operating system",
                "This course thought us about many important concepts of operating system design and gave us direct experience of working within a real OS as well. As a result, we tackled problems such as working with multiple cores, concurrency, and implementing core functionality including a file system, virtual memory abstraction, bootloader, and various syscalls such as fork, all of which helped me to gain a richer understanding of the inner workings of the machines we use everyday.",
                "You basically build an entire operating system in this class. You learn about the kernel, memory management, threads, page faults, trap handlers... everything you really need to know about how an OS works.",
                "Knowledge of how operating systems work",
                "We learned about the components of an OS. We used mCertiKOS, but the concepts are pretty much universal across operating systems and the way mCertiKOS is designed is how you should be thinking about OS anyways. After the midterm, we also explored security, networks, distributed systems, real-time systems, consistency, etc.",
                "Learned about the challenges and intricacies that go into an OS, improved C coding ability and GDB debugging",
                "I learned about the OS kernel and how to build its components layer by layer",
                "Structure and implementation of an operating system, and how to simplify the development by dividing the system into layers",
                "Understand the parts of a computer system and how to design operating system.",
                "os development",
                "Principles of operating system designs, issues with modern operating systems (proper concurrency modelling, process security, efficient address translation), general theory (linearizability, banker's algorithm). Programming assignments gave insight into the implementation of a working operating system.",
                "Knowledge on OS. Programming skills in developing large software systems."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "Great class. There are a few really bright spots of Yale's CS dept, and this class (and Zhong Shao) are one of them. You learn a ton and you're well supported in doing so. I wish the midterm was slightly less quizzing us about the problem sets, but I suppose that's how you prevent free-loaders from getting an A.",
                "Awesome course. Love the pair programming, more courses should do this. Could use more guidance for some of the problem sets to help us avoid design pitfalls.",
                "Concepts and materials are cool and super relevant to all aspects of CS. The psets are challenging but also rewarding. Lectures can be a bit dry sometimes though and it can be a little bit difficult to focus during lecture. Feedback on psets is very slow and this is something that I really didn't like.",
                "The course was highly informative and engaging overall, though the first few lectures felt more like trivia about a particular Intel architecture than something we should remember as potential OS programmers. \r\nThe assignments were satisfying to complete and helpful for learning OS development techniques in practice. However, the system we worked on had some issues that the course staff may have missed (not that I want to blame them; those were far from obvious), and the emulator setup made it unnecessarily difficult (in my opinion) to test some projects--I recall some students who worked on audio drivers had to go through a lot of steps to add files to the default disk image, for example. \r\nThough there is far less support than in 323 (two TAs, no ULAs), the TAs are very helpful.",
                "The lectures are very nice and the problem sets help solidify understanding.",
                "I enjoyed the course, but I feel like the exam could have been more focused on topics that weren't completely covered by the psets, rather than asking us questions from the psets.",
                "There was a section of the course where I thought the organization was a little strange. Lab 2 was about memory management, but in class, we were discussing concurrency at the time. Lab 3 was about concurrency, but we were discussing memory management in class at the time. I noticed that the class topics followed the structure of the textbook, but maybe in the future the course could talk about memory management first and concurrency second so that the labs would correspond to the lecture topics. The textbook is excellent by the way, and reading it before class is super helpful for understanding the material in class.\r\n\r\nSo for the labs, much of the kernel code was already provided (from the mCERTIKOS project) and the assignments instructed us to fill in certain parts. This was both a blessing and a curse. Blessing because you don't have to worry about a lot of the incredibly specific and sometimes tedious stuff. Curse because you won't have the full picture and might not actually totally understand what's going on. Sometimes I would complete the assignment and pass all the provided test cases but still not totally understand why. The assignments often pointed you to certain files to \"skim\" through the implementation without understanding all the details, but it would have been incredibly helpful to have a walkthrough of the surrounding code conducted by either Professor Shao or one of the TAs.\r\n\r\nHowever I must say the problem sets were obviously designed in such a way that with enough time and effort (and sweat), students would learn in depth the inner workings of the kernel's most important mechanics because I really do get it now lol. The psets weren't absurdly long or difficult. If you're looking at this course you likely know what you're getting into, so just be ready to start the problem sets early. Professor Shao is a super reasonable guy and is obviously passionate about the material. His number one priority is to help you learn, not crush your spirit. He knows the material and the assignments are difficult so he does the best he can to help you get through it.",
                "Strengths: Prof Shao is an extremely engaging lecturer, being both funny and also very well-versed in every subject material covered. The course also connects many disparate topics in a way that facilitates learning.\r\n\r\nWeaknesses: very few office hours, some segments are difficult to follow due to the complexity of the subject material and speed at which they're covered.",
                "Lectures are interesting with Prof. Shao, but sometimes it was hard to be engaged because they had nothing to do with the problem sets. Regardless, he is fantastic at explaining concepts and using analogies to simplify them. I do think assignment 5 (shell) should initially have a longer deadline because the coding in each problem set is not evenly distributed. However, the problem sets were very hands-on and instructive in general, and they really reinforced the material.",
                "Incredibly useful material, entertaining lectures and analogies. Deadlines all very reasonable.\r\n\r\nI would have liked to have seen more prompt grading of our problem sets. More immediate feedback on our performance would have been useful to gauge how we could improve on each pset, rather than waiting several weeks for a grade and comments (if any).",
                "Course wasnt well taught, labs were very detailed but sometimes hard to understand what to do",
                "One strength was how the operating system we were working on was very carefully and clearly organized so that we were able to learn about its core functionality without too much difficulty in implementing various aspects of our projects and tying different parts together. A weakness was that there was a fairly sudden increase I felt in the difficulty of our projects in the latter half of the course, with the last two projects specifically taking much longer than the others and being much more open-ended about what we were to implement.",
                "Strengths - professor is the absolute best, course content builds tons of technical maturity, labs are hands on \/ great learning experiences\r\n\r\nWeaknesses - None!",
                "Great problem sets. A few more TAs next time might help.",
                "Strengths: Operating systems are notoriously complex, but this class teaches you how to think about complex systems in general--beyond just specific operating systems--through good design using concepts, such as abstraction and encapsulation. Prof. Shao has so much experience not only teaching but developing OSes through his research. Weaknesses: None",
                "Strengths: Partner programming is great because this class frequently requires you to plan out and talk about an approach with relatively few lines of code being written, interesting labs\r\nWeaknesses: A little more guidance on the final projects would have been nice",
                "The course is interesting but it is challenging because there is a lot of pre written code that you have to understand before writing the new necessary functions. Its hard to debug when there are so many files",
                "Very detailed with lots of content. Good counter examples shown for almost every design, even for the ones in current use.\r\n\r\nThe programming assignments were based off a very well designed OS which made it very easy to see the design but turned the assignments into a fairly straightforward \"implement the comment\" coding problem. This meant they were not very effective as a teaching tool since we did not have to make design decisions ourselves."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "Very doable considering all the labs are partner assignments, but for this reason I'd recommend taking the class with someone you know.",
                "Yeah, wholeheartedly. I've never learned this much from a Yale class, and Zhong Shao is great. There are a few really great CS profs at Yale; Zhong is one of them. There are only a few great CS electives at Yale; this is one of them. You'll come out with an understanding of computers that you didn't have before. It's funny - each time I take a CS class I think I understand how computers work. I thought I did after 201, and then again, after I implemented the shell in 323, I thought I got it, but now, I'm like \"Ohhhh, I really get it now.\" Grading is pretty lenient too, once you put in the (admittedly large amount of) hours. There's no brutal edge casing like in 223\/323. \r\n\r\nDisclaimer: This is a hard class, for sure. It's like 323, but a little less grindy, and a little more challenging intellectually. Make sure you get a good partner, it makes all the difference. It should be someone who's a similarly hard-working student with similar study habits, otherwise you'll end up struggling. Also should be someone you like, because the weeks you have a pset due you'll be spending more time with them than you do with your significant other.",
                "Yeah if you like low level stuff at all, this is a must take",
                "Yes. I think OS should be viewed as a rite of passage for CS majors. However, be prepared to spend 30 hours on some of the psets though, especially the fork and concurrency ones because debugging can be a true nightmare (323 debugging seems like child's play in hindsight).",
                "Yes, if the student is interested in a career involving software development\/engineering. Students of EE interested in hardware that will run code may also benefit from the low(er) level C programming experience, even if most of the OS features explored here don't apply to the systems they care about. Others probably won't justify taking a CS elective with this kind of workload, though (as you will learn in this class) OS is actually about solving problems of resource allocation that could arise in any field!",
                "Yes if interested in operating systems.",
                "Yes",
                "Yes, if you like the material in 323 and want to go more in depth, this class is for you.",
                "Obviously this class is one of the harder CS electives. If you're on the fence about taking it but you are genuinely interested in learning how the OS kernel works, then go for it but expect to work a lot (zshao said the work is high but less than 323 and I'd say that assessment is accurate). Expect to debug a lot. If you hate that you probably shouldn't take this course. Some of the bugs you will encounter will be nondeterministic when you introduce multicore processing and you will hate your life. If you aren't actually that interested in OS but you just want a survey of the main topics, then I wouldn't take this course.",
                "Yeah! I think the course teaches a very important area in computer science, and Zhong Shao is very passionate about operating systems. There arent many great CS electives out there, but I think this is definitely one of the better ones. Its a strong continuation of 323 without as heavy of a workload, and completing the problems sets is very rewarding.",
                "Absolutely would recommend to any CS major. Most CS majors are not going to pursue kernel development, but since every application is running on top of an OS, it's useful to understand how OS's work for any backend development.",
                "Yes if you are willing to put in the time and effort",
                "I would definitely recommend this course to another student. Learning more the OS and how computers work under the hood is always a useful thing to learn more about for any computer science student, and this course did so in a way that was very well organized and engaging.",
                "This course is notorious for being very difficult, and so some students are swayed against taking this course. This is actually really not true. Sure, this course is more difficult than some CS electives, but I would say it's significantly less difficult than perception. Additionally, given how much you learn in this course, I would even say that it has the highest learning to workload ratio out of any CS elective at Yale. I would highly recommend taking this course for all CS majors.",
                "Yes. I believe knowledge of operating systems is foundational to a good computer science degree",
                "This is the best opportunity that you're going to get to learn OS. Although it is not technically a core for the major, OS is so fundamental for CS that it basically is. This class teaches you how to think about building complex systems, which every software is these days. Prof. Zhao combines insights from his research, so you'll see where the CS field is going as well from a high level. In terms of the workload, it's honestly better than 323 because you have way less test cases than in 323 and essentially no edge cases to worry about.",
                "This class is a very rewarding elective because you have to understand how the OS is working on a deep level. Discussing with a partner how to implement a certain feature is super helpful for learning, and overall, the class provides a lot of info. Still, the class does provide a LOT of info and we went through periods of intense grind days followed by recovering from the last grind days.",
                "Yes! Professor Shao is amazing!",
                "Yes. This course is very well-structured and full of important content.",
                "Yes. It is helpful and fundamental to understanding how a computer operates.",
                "yes",
                "Yes - a great exposition of OS design and the state of the art."
            ]
        }
    ],
    "extras": {
        "title": "CPSC 422 01\/CPSC 522 01 - OperatingSysDesign&Implemntatn"
    }
}