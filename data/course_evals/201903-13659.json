{
 "crn_code": "13659",
 "season": "201903",
 "enrollment": {
  "enrolled": 42,
  "responses": 37,
  "declined": 2,
  "no response": 3
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    0,
    0,
    3,
    7,
    18
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    0,
    0,
    3,
    8,
    17
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    0,
    0,
    1,
    11,
    16
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    0,
    1,
    6,
    11,
    10
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge<\/u> of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    0,
    2,
    13,
    13
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the <u>workload<\/u> of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    0,
    2,
    10,
    16
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "Theory and implementation of standard OS concepts (concurrency, file systems, memory storage, etc.)",
    "Important concepts in an operating system, its design principle and how to implement one with x86 on QEMU.",
    "I learned a lot about operating systems from both a high and low level. I got to work and get intimate with a kernel which was a rewarding experience. The ideology behind designing an operating system in terms of layers has made me a better programmer.",
    "In depth knowledge of essential topics in CS. Processes\/threads, kernel abstraction, file systems, memory management, virtual\/physical memory, concurrency, cpu scheduling. Extremely important stuff for industry and programming in general.",
    "Learned about how operating systems are booted up and the different design choices that go into OS, such as synchronization, file systems, video capabilities, etc.",
    "Concurrency, memory management, switching from user space to kernel space, device management",
    "In this class you'll learn how to, an build, an operating system from the bootloader up to the user level.",
    "Greater familiarity with operating systems concepts and the inner workings of computers.",
    "Learned at a deep & thorough level how operating systems work.",
    "Operating systems are fascinating and this is a class any CS major should take. You learn about virtual memory (how do different processes share the same physical memory without crashing into each other?), context switching (how do you execute multiple processes at the same time?), file systems and a lot more. One of the assignments asked us to implement `fork()` -- and for the first time I actually understand how a lot of things in CS 323 work under the hood.",
    "Learned about the operating system, parts and components of it and assignments helped learn about implementation of the operating system.",
    "The course guides you through the process of writing your own OS. They provide a ton of very well-written skeleton code which abstracts away the nasty parts and helps to focus each assignment on understanding specific key components of an OS (bootloader, physical and virtual memory, processes and traps, concurrency, file systems, etc), so you can, as Shao will tell you, \"take OS and still have a life at Yale\". The lectures and assignments help you appreciate the importance of good abstractions and expose you to some time-tested programming idioms (e.g. how to write a lock), and even if you never write any OS code in the future, it will definitely make you a better programmer.",
    "I learned how operating systems work, as well as improved my C programming skills.",
    "You learn about how computers work from when they're turned on to when it starts running user processes. You learn about bootloaders and how they work to start up the OS, threading and interrupts, system calls, multiple CPUs, memory management, and a bunch of other cool things. The psets are basically building an OS (with lots of help from stuff already done for you of course).",
    "This course covered most fundamental operating system topics. This includes the virtual memory, scheduling, concurrency, threading, file systems. In addition, we got hands-on experience with these topics through the programming assignments, which were extremely well-structured, albeit challenging. During class, we also discussed some more advanced topics, like real-time scheduling and blockchains.",
    "The course covered core topics in operating systems including virtual memory, process and thread management, concurrency, caches, and filesystems. Almost all topics were taught with an eye toward implementation in the programming assignments. The assignments provided extensive practice in debugging kernel-level code and understanding the design of an operating system using existing code and manuals."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "Psets are really great and well designed - you really learn the material here. Lectures are good but can get kind of dry, especially after the exam.",
    "The course assignments were (for the most part) well-designed. The first assignment was probably the most daunting because you were forced to teach yourself the code, the assembly language, and the basic OS concepts all at the same time. If you get past the first assignment, though, the future assignments become slightly easier (more programming and less poking around a bunch of C files). All of the assignments, however, were a ton of work, even if they didn't seem to be too bad initially. The lectures were a bit dry, although Professor Shao does try to add a few jokes here and there. In the end, the course is graded extremely generously, so if you put in the time, you will do well.",
    "One of the top-notch CS electives. Prof Shao gives engaging lectures before the midterm, but when he talks about some advanced research topics, it becomes very hard to follow the slides. \r\n\r\nThe assignment is extremely well-detailed, which is both good and bad. The pro is you can accomplish the psets without much effort, but the con is that you don't have the opportunity until the last two assignments to think by yourself on the design.",
    "Course is very good. I wish we got to do even more hacking in the kernel from the ground up. In the latter assignments a lot of work was already done for us, which makes sense, but I wish there was a way we could somehow implement these things for ourselves.",
    "Strengths: During the class, we worked on implementing features in a real OS that Professor Shao created. It was really cool- we had a bunch of assignments that allowed us to implement things that we talked about in lecture in a real codebase. The TA was also extremely helpful when there were bugs in our code and concepts that we didn't understand. Although the HWs are really time consuming, we learned a lot from doing them. Also, the fact that there is no final in the class was extremely nice and let us focus our effort on the assignments.\r\n\r\nWeaknesses: The assignments were vague and extremely difficult to understand and especially at the beginning, I felt like there was not enough support for understanding the environment we would be working in, especially since there were a lot of moving parts in mCertikOS (the OS that we're adding features to). If there were a tutorial hosted that walked through how the overall codebase worked and navigate it, that would be super helpful. Lectures were very boring, Professor Shao just read through them without explanation. It was unclear which parts of the lectures we needed to know for the exam.",
    "Labs are very organized and good for learning more specifically about the general ideas introduced in class. Also very helpful that you get to submit your work with a partner and work with them too. Lecture is also informative, however can be draw and full of slides, which is not my cup of tea.",
    "Strengths: Very important material for all CS grads, problem sets are rigorous, lectures are rigorous\r\n\r\nWeaknesses: Some of the problem set specs were unclear and led to many hours wasted.",
    "Strengths - the best part of this class is that you can turn in assignments with a partner. You have two minds to work on the problem sets together, and someone who can understand the issues you're facing or tackling. The assignments generally teach you a lot and Prof Shao is great. \r\n\r\nWeaknesses - the exam was mostly repeating the problem sets and I felt that it didn't accurately test my understanding of the broader course material.",
    "Well designed problem sets, although the first ones were much easier than the later ones. I wish problem sets were a consistent difficulty. Lectures were very boring and I did not find the material very engaging.",
    "EXTREMELY good. Seriously. I learned so much and had a great time doing it.",
    "This is probably my favorite CS class at Yale. Assignments are not too long (as in they don't require you to write too much code) but might take a long time to debug.",
    "Instructions for assignments are very clear, it would be nice to discuss the assignments a bit more in lecture.",
    "Strengths: The course's pedagogical approach towards OS is excellent and helps students develop a solid understanding of the key components of an OS while hiding away the less-important details. There is a good amount of handholding in the first two assignments where they give you empty functions and ask you to fill in the body according to the spec, while later assignments simply ask you to e.g. \"implement ls, cd, mv\", so the student also learns to think about and design the OS on their own. Shao has a great sense of humor which shines through in his choice of analogies.\r\n\r\nWeaknesses: Parts of the assignments could be phrased more clearly to provide clearer expectations, e.g. set_pdir_entry_identity, which many people had trouble grasping.",
    "Labs are interesting! Shao is super funny and knowledgeable and lectures were decent could be more engaging. A midterm review would be extremely helpful to consolidate course content.",
    "The course did a good job of covering a broad spectrum of information, and providing a good understanding of how operating systems are designed. However, lectures were often mostly pulled from the textbook, and we often did not finish all of the lecture slides, leading to gaps in our knowledge.",
    "10\/10 and no weaknesses.",
    "The assignments were definitely a strong point of the class, although I do wish we used an OS with more real-world uses than CertiKOS. The lectures were mostly interesting, though they could have been presented better at times.",
    "The course's focus on implementation, which it accomplishes without much of the busywork that often accompanies large programming assignments, is a very big strength. While the course's discussion of techniques that aren't ultimately implemented in mCertiKOS is also useful, the close connection between lectures and programming assignments greatly helps student comprehension. The analogies between OS concepts and the real world were fun, though they often felt too stretched to be useful in understanding the course content."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "I would actually say OS is a course that is worth taking for every CS major, even if you don't intend to do systems programming in the future. The concepts are just a good things to keep in the back of your mind even when working with higher-level programming problems.",
    "Certainly, probably the best (along with networks) CS class I've taken at Yale. Awesome to see all the concepts you've learned in the core classes actually come into play in something \"real\".",
    "If you're a CS major, then you should take OS. The course is a ton of work, but you are really forced to interact with the concepts through the assignments. Note that if you didn't enjoy CPSC 323, then I would recommend avoiding this class because the programming is even lower level, and debugging will be a nightmare.",
    "Yes. \r\n\r\n1. The topic itself is valuable. You can't say you are a CS major without knowing operating systems. \r\n2. Prof Shao teaches well.\r\n3. Homework is fun but not time consuming. You learn a lot by doing the psets.",
    "Yes. I feel any cs student should understand operating systems from  both a high and low level. If you have taken OS with Avi this course will reiterate and solidify a lot of the material as well as give you experience actually building an os kernel which is a good experience and one that will definitely make you a better programmer.",
    "Yes. You learn a bunch of concepts that are invaluable if you want to be a CS major. This was probably the course that I learned the most from in my time at Yale.",
    "If you enjoyed 323 and would like a deeper understanding of computers, yes! It's good for that, not only a theoretical background for graduate school, but great for tech interviews.",
    "Yes! This class is a required class for almost every computer science major in the US, except maybe Yale and a few other schools. I've been seeing OS concepts almost everywhere in my internships, and even my job interview, and so you should take it to at least be on par with other graduating students. \r\n\r\nHowever, this class takes a lot of time, and you have to be prepared to sacrifice nights and weekends to complete the problem sets.",
    "YES! It's hard, it's time consuming, but you'll learn a lot and just may fall in love with the subject.",
    "Sure.",
    "Yes of course. If you are a CS major who enjoyed 223 or 323 (in that you like C programming and find low-level stuff fun), definitely take this course.",
    "Yes! In fact this should be a required course for the CS major.",
    "Yes, this is a great course and I learned a lot.",
    "Take this class. It's a rare gem among the CS electives we have at Yale.",
    "I would recommend this class if you are interested in better understanding just how computers work. If you enjoyed the systems programming aspect of 323, operating systems serves as a great sequel to that, as you learn a great deal about the low-level implementations of things. On the other hand, this class is probably not going to be terribly useful in terms of most peoples' jobs, as only systems programmers reguarly interface with the actual kernel of an operating system. If you don't find the low-level programming interesting, dislike programming in C, or envision yourself never touching anything related to an operating system, your time is better spent elsewhere.",
    "AMAZING CLASS!!! 11\/10. This was by far my favorite CS class at Yale. Prof. Shao is such a incredible lecturer, first of all. He's dynamic and also has the rare talent of explaining complex concepts really clearly and simply. Usually, CS explanations are either too simplistic or presuppose a familiarity and it goes way over your head, but Prof. Shao manages to explain even really detailed things with so much clarity and show how all the details fit into the big picture. The psets also are generally super clear with great explanations of what's going on in the code. You get an incredible, deep understanding of generally \"how computers work.\" If you've ever felt that, sure, you can write a mergesort, but you don't get \"how computers actually work\" or \"so what even is an operating system\" (this was me), take this class. Words cannot describe how incredible it is. The psets are to BUILD AN OPERATING SYSTEM. SO COOL. And of course, most of the code is written already so you're only doing the key chunks, so don't be daunted. My mind was blown on a regular basis because the psets were so awesome. \r\n\r\nThe most important thing in this class is to find a good partner. You're allowed to work in pairs and pair program for every pset throughout the entire class (you turn in 1 assignment for the both of you). I recommend you find someone who works at the same pace as you and wants to understand everything at the same depth that you do. I also recommend literally pair programming for much of it, so that you both know and feel as if you've written every line yourself. A lot of people struggled because they tried dividing the pieces, but then didn't really understand what the other person had done and felt like there were large chunks of it that they were missing. And since the psets are literally building an OS, and each pset builds upon the previous, it's important to understand all the pieces as you go. Furthermore, the midterm (there's no final) will include some questions where you have to replicate some functions that you wrote in the HWs, so you'll struggle if you didn't understand all the parts.",
    "I would absolutely recommend this course. It really should be a mandatory course for CS majors.",
    "In 323, you implement bash. It's extremely unsatisfying, though. All you do is write some input parsing and wrapper code around the exec and fork system calls. In 422, you write those system calls from the ground up. The last problem set is implementing bash, similar to what we did in 323. This time, you have a deep understanding of EVERYTHING that is going on behind the system calls, from the computer first booting up to memory allocation and so on. This class won't make you a better programmer, imo. The errors that you get are so vague and unconventionally debugged. You write < 100 lines per problem set, sometimes. But I think it is a rewarding intellectual challenge to understand an operating system. This definitely is not something that you will pick up from a Udemy course over the summer or after Yale.\r\n\r\nYou absolutely MUST find a good partner. These problem sets are so much easier with a decent partner. Rather than waiting in line at office hours, you have someone else who will look through your code and debug with you. I would highly recommend using a workflow with three GitHub repos. Each partner has a personal repo for development. They can make as many branches as they want and work without messing up anyone else's work. When one partner finishes a feature, they submit a pull request to a shared repo. The other partner reviews the PR and merges. When you're ready to submit the pset, you submit using a branch from the shared repo.\r\n\r\nCode review is super important. Bugs are VERY hard to find. It's often easier to read through the code meticulously looking for a bug than it is running tests to try to locate it. You should not add any code to your submission that both partners haven't read through carefully.",
    "Yes, this is a great course to learn about how computers really work and dive more deeply into the systems content from 323. The lectures were clear and well organized despite the complexity of the subject matter, covering both historical and modern perspectives. The assignments -- programming key pieces of a miniature Linux-like operating system -- provided excellent hands-on experience with a reasonable workload and very little busywork. The final project, with a broad choice of topics, was particularly interesting. The only weakness was that lectures sometimes went into very particular details or marginally related topics that felt much less applicable than the rest of the content."
   ]
  }
 ],
 "extras": {
  "title": " CPSC 522 01\/CPSC 422 01\n        OperatingSysDesign&Implemntatn "
 }
}