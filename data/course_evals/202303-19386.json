{
    "crn_code": "19386",
    "season": "202303",
    "enrollment": {
        "enrolled": 60,
        "responses": 28,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                3,
                4,
                7,
                9,
                3
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                2,
                9,
                10,
                4,
                1
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                4,
                6,
                5,
                11,
                0
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                5,
                6,
                8,
                6,
                1
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                2,
                7,
                13,
                5
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                3,
                4,
                14,
                6
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "I learned about C programming (function pointers, dynamic memory alloc, structs), C++ programming (classes, destructors, new\/delete), and some data structures (Stacks, Queues, LinkedLists, RBTrees, BSTs, AVL trees, Heaps, Graphs)",
                "I got a lot better at debugging my code, I did kinda know about all the data structures already but implementing them was kinda cool.",
                "The class is about learning data structures and programming in C\/C++. I learned appropriate use cases for data structures and how to structure C programs via the programming assignments and the lectures. Overall, I thought the course was well-taught although I think the live code demonstrations perhaps took too long and could have been more efficient.",
                "A core understanding conceptually of key data structures, along with a better grasp of C programming.",
                "This class is a good introduction to data structures, algorithms, and algorithmic complexity. However, it is far from comprehensive. Psets barely tested understanding of the data structures, and were mostly graded on edge cases and compliance to the spec.",
                "I now have a much better understanding of certain data structures but would not say that this class made me a better programmer",
                "Familiarity with C and C++. Very solid graps on the abstract concept and implementation of data structures such as linked lists, arrays, heaps, graphs, trees, and hash tables.",
                "Basic types of data structure. C and C++ syntax and fundamentals",
                "I learned more about the design and purpose of data structures rather than just implementing them.",
                "I learned how to program in C and C++ and implement data structures from scratch in these languages. I also gained a better understanding of the efficiency and runtime complexity of the wide variety of the data structures we covered in class, from hash tables to self-balancing trees.",
                "Using C and C++, data structures like hash maps, trees, and linked lists. Algorithms like DFS, Djirkistein (never learned spelling), AVL trees, and red-black trees.",
                "I became fairly familiar with C and C++ as well as basic data structures and some algorithms, as advertised in the course title. I also got a good sense of some programming customs\/practices with regard to organization and style (though these things vary from person to person, so this was just one take on the matter). The course had a good balance of conceptual and practical work, so I gained skills on both of those fronts, which was also helpful.",
                "how to study without going to class, honestly.",
                "I learned about C and some C++ which is useful. Also interesting.",
                "Got much better at programming. Wouldn't say I really internalized too much about the actual data structures themselves, but my programming skills and understanding of C and C++ programming vastly improved.",
                "I learned important data structure topics and how to be a good programmer in C.",
                "I learned how to code more advanced C and basic C+, along with the many of the ins and outs of Visual Studio Code.  In terms of material, we learned a lot about data structures (both abstractly and implementations), their efficiencies, and which ones are best to use in various situations.  I also learned how to become a better debugger through gdb, how to construct makefiles, and much more.",
                "I learned a lot about more low-level languages and how to code things from the ground up without relying on libraries and built in datastructures."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "This course was quite terrible. The psets were not written well, and often needed corrections\/clarifications. The psets were also unnecessarily long and while it did help me become better at C programming, I spent far too much time worrying whether I was conforming to their extremely unclear specifications. Also, the lectures were really boring and honestly very skippable.",
                "Lectures weren't that interesting, but the notes provided were good. I think the ordering of some structures could be improved (why are Stacks and Queues after Hash Tables?) and the grading for PSets was really, really slow.",
                "While the programming assignments can be confusing\/have mistakes sometimes, overall I think they are super helpful in learning the data structures and how to implement them in C. The assignments aren't that bad, and there is plenty of time to work on them. The exams were fair although they need to be proofread more.",
                "Strengths: covers a significant amount of material and you emerge from the class having learned a ton. Weaknesses: a crushing amount of work some weeks.",
                "Lectures were very dry and sometimes hard to follow. Psets had little to no educational value in regards to learning data structures; they seemed to evaluate attention to detail rather than understanding of the material. Psets are autograded, meaning to get any meaningful feedback, you have to go to office hours and sit for 30 minutes while the professor debugs your code.",
                "This course has been the worst class Ive taken at Yale. For many psets, there were zero public test cases, so you were just left in the dark about whether your code worked or not. Very rarely was the autograder on Gradescope actually configured on time. The turnaround for graded psets was extremely long, sometimes longer than several weeks (although for exams it was only a few days). Also, the solutions to any pset were never posted afterwards, so if you didnt understand something and werent able to implement it, then you were completely screwed over and had no chance to learn from your mistakes\/ improve. One particularly egregious case was when one pset was released, most of the class did very poorly on it, and then not only did the next pset completely depend on this one, the turnaround time for that pset was half of the previous one AND, as mentioned before, NO solution was provided, so if you already did poorly on the first one because you didnt know how to program it, well now you had to suck it up and somehow figure it out, plus implement the additional requirements of the second pset, all within less time than was given for the first one. The professors response was just to lessen the late day penalty and boost the grade of those who submitted on time. Prof. Weide was generally decent at explaining the material on a conceptual level, but less so on the implementation details, and I recall walking out of his lecture on red-black trees not understanding anything because he kept messing up the diagram on the board and had to correct it several times. The final for his section was also ridiculous, because the sample final that was provided included many Leetcode questions which, during the review session, it was revealed they were just for practice and wouldnt match the exam at all, then while taking Weides final there were MULTIPLE corrections that had to be made to the exam DURING the 1hr 15min exam period. I remember spending ~20 minutes stuck on one question when Weide announced that the questions code was wrong and, instead of asking us to skip that question, he proceeds to make SEVERAL corrections to it over the span of 10 more minutes, and does the same to a few other questions on the exam. I do think Weide cares about his students and about teaching, but this course was extremely disorganized and felt somewhat unfair. The saving Grace of this course, however, were the amazing ULAs who were very supportive and helpful.",
                "Strengths: I really enjoyed the lectures. They always introduced the abstract concept and the need for the concept before going into the deails which is often lacking in cs courses. The tests were also fair. The Edstem questions were also answered in a very timely manner. \r\n\r\nWeaknesses: The pset grading seemed really unfair at times. Starting from the beginning we were being graded on factors which were not taught or even discussed in class. These assumptions should be made explicit at the beginning of the course but they never actually were. Also, Prof Weide went on tangents mid-lecture to answer questions which were outside the scope of the class. This seemed to be a waste of time but I understand the desire to answer as many questions as possible and clear up any misunderstandings.",
                "Slides are organized and I like the demos in class",
                "The strengths are the style of the course: project focused with each PSET taking a long time but with plenty of assistance and guidance. The weaknesses were that going to lecture felt pointless. Often times the PSETs required knowledge that wasn't taught until a week after the PSET was released, and irrelevant knowledge was being taught during that time. Obviously the \"irrelevant\" knowledge was still tested material, but it for the sake of actually completing the class it was much easier to research the topics myself and find my own solutions.",
                "Strengths- breaking up the course into two groups was super helpful. I know in the past semester students complained about organization, but the course felt very well organized to me. The smaller course also made it easy to engage.\r\nWeakness- the problem sets were extremely time consuming, and the workload not quite distributed well. In particular, the week where we had the hardest problem set due the same week as the midterm- I saw someone suggested a change on eddiscussion that I really think you should go with!\r\n\r\nAlso- I did not pass the entrance examen and the profesores recommended that I do not take the course. I took the course and am expected to receive an A. I don't think the entrance exam tested what this course requires! I think that CS50 is substantially better preparation than CS201, and the prereqs for this course should be updated.",
                "Course covered exactly what it claimed to cover. Extremely slow at the beginning though, covering things like variable declaration etc that made class very uninteresting. Lectures also ran way longer than needed, making it difficult to glean important information from each lecture. Problem sets were not clearly explained and the README files felt like a maze of words and concepts. A clear overview of the project and expectations would go a long way towards making the projects more approachable. Often times, it felt like the actual coding assignment was quite doable, but only after spending hours understanding the assignment.",
                "The course was for the most part pretty well organized with regard to slides, lecture recordings, problem sets being posted, exam review, etc. One fairly big thing that could be improved was the problem sets themselves  there were fairly often errors with the autograder or the starter code or the requirements and things had to be hotfixed after the fact, and while the changes were usually made without too much of an issue, this was an area for improvement.",
                "psets are fun and engaging, but lectures are extremely boring.",
                "The psets are good. The lectures get boring sometimes. The slideshows have way to many words and the \"code breaks\" have way too many lines of code to digest in under 5 minutes.",
                "I think that the administration of the course wasn't great - took super long to get feedback on homeworks and the timing of the first midterm was pretty horrible. Alan was a good lecturer, so I don't have any complaints about the teaching of the content, but the execution of the homework (instructions, grading, feedback) wasn't great.",
                "The course notes are fine, but the assignments are very disorganised. 60% of the time is spent reading the specs line by line to make sure that there are no pedantic errors. Description of the assignments can be more succint so that students can focus on the actual implementation rather than comprehending unecessary details. Perhaps get TFs (or anyone who hasn't done the assesment before) to test out the exams and assigments beforehand to make sure that there are no hiccups\/bugs in the starter code and exams. Syntax errors on exams are a bit unacceptable  could've used an IDE to check, doesn't take more than five minutes.",
                "I felt very unprepared for the exams and I thought that extra supplemental help in addition to the one practice exam given a week before would be helpful. The PSETs were difficult to finish without going to office hours and asking TAs and felt that lecture material did not prepare us well for the PSETs. Most of the class was either self-learning and asking the TAs for help.",
                "The material itself is pretty interesting, though lecture can be dry from time to time.  Personally, the highlight of the class was definitely the problem sets.  As difficult and sometimes frustrating to debug as they were, I absolutely felt my abilities as a programmer improved through them.  I also become a more competent debugger trying to ensure my later problem sets would survive the unit tests without comprehensive test cases.  In terms of issues, I do think some of the warnings we got related to problem sets made me overextend and try to address things without fully know what I was doing, many times completely unwarranted.  Likewise, sometimes there were mistakes in problem sets or exams that left me frustrated; if I'm wasting time because of I expected the problem to be solvable, then those issues should have been fixed before material was released to us.  But besides that, I do think the content of the course was pretty good.  Feedback was a bit of a problem point for me; we would get our UNIT tests back, but it was not always clear what they were testing or what the error even was.  It just felt kind of annoying to not really understand what even went wrong with the points I lost.",
                "Poor problem set grading",
                "This course teaches important material very efficiently.\r\n\r\nThe psets were very frustrating, needlessly so. For each one, the project would start not with the coding but instead with trying to understand the instructions or the starter code. Often, the starter code would include things we are not familiar with but yet to debug we'd need to understand it, so that was needlessly painful. Also, the starter code and tester code was often full of bugs that would cost us hours of effort debugging. Office hours always had a line out the door, and while the ULAs were fantastic, they were constantly drowning in people who needed help. True story - when I first was looking for the right room for office hours, I found it by walking down the hallway and listening for the room that sobbing was coming from. This sounds like I'm making it up. But I'm not. \r\n\r\nClasses were engaging, and I went into every test and pset feeling prepared and even excited to implement what we had done in class. But then on the psets, I'd open it and be confronted with code and instructions that were totally unintelligible, not testing the concepts and datastructures we were going over, but instead testing our ability to google unfamiliar c syntax."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "It's a prerequisite for any CS+X or CS major, so I suppose so? However, if you don't need this class, don't take this class - there's probably better alternatives to learning programming (such as CS50).",
                "Yeah, if you're a CS major you have to do it anyways, but it's not as bad as everyone makes it out to be. People complain about work just to complain about work, but it seriously was not as bad as everyone makes it out to be. Yes the classes weren't the most interesting, but the material is important, and if you're doing CS or anything related, it's a good foundation to take.",
                "Yes, I would recommend this course to another student because it's probably required for you, and it's honestly not that bad. Programming assignments can be completed in 10-15 hours, and you typically have 2 weeks. The content is foundational to computer science, and there are a lot of actually interesting topics, like self-balancing trees and algorithms.",
                "If required for your major or an area of intellectual interest, definitely! Otherwise, this class will be a lot of painful problem sets.",
                "If you're not taking this course for your CS major core, do not take this class. It is highly unengaging and Psets take a long time.",
                "If theyre a cs major then its inevitable. In that case, Id suggest taking it as soon as possible just to get it out of the way and start taking interesting cs electives. If theyre not, then absolutely would not recommend this course. Every single one of my friends who wasnt taking this course for their major ended up regretting it and Credit\/Dd it.",
                "I have a love-hate relationship with this course. On one hand, you do truly learn very useful skills and gain an understanding of foundational concepts. The C is really good to understand how computers work (memory management, etc) and the data structures are actually used in software engineering (especially during internship practical interviews!). The lectures, for the most part, were useful and worth the time. However, the psets are a severe weakness to the course. They didn't seem very well thought out at times and the grading felt quite unfair. Hopefully this will get changed in future semesters.",
                "Yes. Important knowledge",
                "It doesn't matter if I recommend it, you are practically required to take it. That's the summary of how I view this course: required. I had fun with some of the PSETs, but others felt like chores. Some lectures were fun and interesting, most were boring and slow. I would not have opted to take this course, considering I taught myself most of it and took a similar course last year. For a required course, it was pretty good, but that's a fairly low bar.",
                "I would recommend this course to any student who wants to understand the fundamental concepts in computer science. This course is a great introduction to C and C++, which will aid students in 323 and higher-level CS electives.",
                "I would only if they are a CS major. The things you learn is very comparable to CS50 (I had only taken CS50 and there was essentially no new information until the second half of this course) but the problem sets are much more time consuming.",
                "Kinda have to take it as a prereq to most CS. Mid. Start psets early though, don't expect the README to accurately describe what you need to do.",
                "I mean, of course, let's not ignore the fact that it's a CS major requirement, so yes by default for those for whom this is relevant, but that's not really a \"recommendation\", is it. For those wanting to get a rigorous exposure to C or C++, this class will do that for you and you will certainly have a fair amount of aptitude in those languages and some things you can do with them after completing it; however, it does come at a price, as the class is a significant investment and not something you can just throw on a schedule without at least thinking about it.",
                "yes, if you need the credit or enjoy computer science. however, expect to self-learn most of the content!",
                "Yes. This stuff is becoming useful in almost every stem job.",
                "It's a necessity for doing CS, so I don't think there's really any way around it.",
                "only if it is a major requirement, it is a pretty poorly taught and conducted course",
                "It's required for CS majors.",
                "No, unless you are a CS major and it is required.",
                "Yes, I would.  Its definitely a challenging course, but I do genuinely think that the problem sets provide a fun level of rigor that is deeply engaging and especially satisfying to complete.  Obviously, if you're a computer science major (and most computer science related majors), you'll have to take this course, but honestly speaking I probably would not recommend it to people who want a cursory knowledge of programming.  If you want slightly more depth, though, and are interested in the course, I would say this is worth doing.  Just be prepared to spend a good while on problem sets and for the occasional dry lecture.",
                "It's necessary. Not my favorite, but necessary."
            ]
        }
    ],
    "extras": {
        "title": "CPSC 223 02 - DataStructres&ProgrmmngTechnqs"
    }
}