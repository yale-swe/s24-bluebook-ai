{
    "crn_code": "18607",
    "season": "202303",
    "enrollment": {
        "enrolled": 116,
        "responses": 68,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                1,
                4,
                14,
                23,
                20
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                7,
                8,
                17,
                18,
                12
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                4,
                3,
                16,
                20,
                19
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                7,
                10,
                14,
                21,
                10
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                0,
                3,
                26,
                33
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                0,
                6,
                28,
                28
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "basic algorithms, time complexity, NP-completeness",
                "I learned about different algorithms and how to implement them to solve various problems.",
                "Gained a better understanding of some specific algorithms and problem solving paradigms, particularly in the second half of the course.  Anyone who is worth their salt at LeetCode will know everything taught in the first half of the course.  (And will still somehow fail the midterm.)",
                "proofs",
                "\"Intensive Problem Solving,\" as this course should be known as  truly, it has been the most challenging, logical class I have taken. But in taking this class, I have grown a greater appreciation for complex problems, how to come up with efficient solutions, and proving meticulously why my proposed solution (algorithm) will work and always work, and having it adhere to a desired runtime. If you're a CS major, it's required, but in either case, I believe this course is incredibly valuable in simply developing your \"thinking.\"",
                "I learned a lot about algorithms and gained insights into problem solving techniques in computer science.",
                "How to take advantage of known algorithms to create your own algorithms. Also how to do do rigorous mathematical proofs correctly.",
                "I learned how to develop algorithms to solve problems, as well as the various different categories of algorithms.",
                "Deep understanding of algorithms (in graph searching, sorting, calculations, max-flow, and P versus NP \/ related reduction algorithms) and their associated runtimes, improvements, current research (linear programming and machine learning); very theoretical insight yet good preparation for extensive practical applications. Also extensive proof-writing.",
                "I learned some algorithms and how to prove them.",
                "Take this class if you're a CS major. It's probably not worth taking otherwise. It covers a lot of algorithms concept in a very organized way, but the proof writing is not rigorous and you will not really leave feeling like you've truly understood most of the material because so much is covered in such little time.",
                "Ways of thinking about and breaking down problems, famous algorithms for general problems, classes of problems and famous representatives.",
                "Fundamentals of algorithms: greedy, divide-and-conquer, dynamic programming, and network flow. Introduction to P\/NP\/NP completeness. The course utilized graph-based formulations frequently.",
                "I developed a lot of skills in graph theory, greedy algorithms, max flow, reductions, and complexity. It also improved my proof writing.",
                "I gained some knowledge on famous algorithms and useful ones as well, but it was all very theoretical knowledge that I'm not sure how to apply. I liked the NP part at the end of the course, but a lot of this course was too theoretical for me to truly gain a lot of insights.",
                "how to write algorithmic proofs, derivations and overviews of common CS algorithms",
                "We learned the intuition and application of different types of algorithms (greedy, divide-and-conquer, dynamic programming, network, etc.). We also learned how to classify different types of computational problems. The skills gained in this class are highly applicable to software engineering interviews.",
                "All kinds of algorithms: Greedy, Graphs, DP, D&C, P\/NP, Network Flow, Proofs",
                "Skills: Proof-writing, proving correctness of proofs, analyzing runtime of problems.\r\nTopics: Importance algorithms, dynamic programming, divide-and-conquer problems, P\/NP problems.",
                "Basic knowledge of some algorithms and the methods to analyze them",
                "Knowledge of important algorithms, runtime complexity analysis, and proof techniques",
                "I learned about complexity theory, NP\/P reductions, dynamic programming, graph theory, flow, and other algorithms. Improved my proof writing greatly.",
                "I learned how to use and apply a variety of algorithmic paradigms such as greedy, divide-and-conquer, dynamic programming, and network flow. I also learned about P vs. NP as well as NP-completeness. I further developed my skills with mathematical proofs and algorithmic runtime complexity.",
                "I learned algorithm design and proof writing. I learned high level mathematical communication skills using tools like Latex.",
                "P\/NP and reductions, greedy, dp, graph searching, etc.",
                "I developed the skill of writing long proofs efficiently. In practice, this meant that I learned how to pick and choose which elements of a proof were important to mention in the proof, and which were fine to leave out. This is because the proofs in the psets necessitates a LOT of writing, and I would've been more rigorous and verbose in my proofs if it weren't for the fact that there was so much to write. Overall, this is still good because I learned to write more efficiently.",
                "Learned about important fundamental computer science algorithms (graph algorithms, dynamic programming, max flow, and more).",
                "High level understanding of algorithms and complexity theory. Deep understanding of recursion, divide and conquer, dynamic programming, and graphs. Learned about optimization algorithms (especially for shortest paths). NP-completeness and reduction analysis. Most importantly, we learned how to problem solve and explain our proofs rigorously.",
                "Learned a lot about algorithms, basics and in depth understandings. Fun math concepts but taught horribly. They need to teach more about proof solving techniques, my knowledge from 202 was basically useless.",
                "Understanding of most significant algorithms developed by mathematicians in past 100 years.",
                "Writing proofs, applying algorithms to real-life situations",
                "How to design an algorithm to solve a precise problem, how to determine efficiency, how to prove that an algorithm is correct, how to write thorough and rigorous proofs, how to prove problems NP-hard. You really learn so much!",
                "Basic algorithms theory such as recursion, graph algorithms, dp etc. also a little bit of complexity theory.",
                "Algorithms. Coming up with creative solutions to difficult, multi-part algorithm questions. Learned about some pretty important\/core concepts in algorithms.",
                "Dynamic Programming, Divide and Conquer, P\/NP problems, other various types of algorithms",
                "The course is a fantastic introduction to a number of important graph algorithms, dynamic programming, and algorithm design more generally.",
                "This course covers a variety of crucial programming strategies (greedy, divide and conquer, dp) as well as a variety of important and practical algorithms in addition to some complexity theory. There is no programming, and the emphasis is on determining what problem solving strategies to use and how to analyze runtime and correctness rigorously.",
                "I learned about various methods\/topics in algorithmic problem solving, specifically graph algorithms (Dijkstra's, Kruskal, Prim), dynamic programming (Bellman-Ford), NP reductions, maximum flow, etc.",
                "I think algos is a very useful class for CS majors. I learned a lot in this course and the stuff that we are learning are useful. This has been the most useful CS class I've taken so far.",
                "I learned a wide variety of computer algorithmic theory, like time complexity, NP-hardness, and general algorithmic design for various problems. I also developed further proof-writing and problem-solving skills.",
                "Big O, Greedy algorithms, graph algorithms, dynamic programming, max flow\/min cut, NP-completeness. Learned how to prove correctness of algorithms.",
                "Gained an understanding of many important basic algorithms, and some less basic ones. From graph searches all the way to FFTs. Also big O notation and P and NP problems.",
                "Awareness of algorithmic solving techniques with regards to complex problem solving.",
                "Knowledge of search algorithms, dynamic programming, polynomial time reduction, NP vs P, NP-complete problems",
                "I came into this course fundamentally underprepared. As a senior, I had not taken a math class since high school (except CS202, which I did rather poorly in). After putting in a tremendous amount of work, I came out with my mathematical foundation completely changed. My ability to think mathematically and algorithmically has been transformed for the better, and I feel like I can reason more cogently and solidly. The fact that this course forces you to generate proofs that are then rigorously checked by the TAs ultimately you think and articulate yourself more clearly. It's actually really cool to repeatedly go through the process of being completely stumped by a problem, to slowly figuring out, to eventually writing something that you think is far too complicated for another person to understand, and then ultimately being validatedor not!by an external reader. I would also add that my problem-solving confidence has improved significantly: on first read, every problem set was completely opaque, but with enough time and effort I successfully got through all of them.",
                "Expect to learn many different strategies to solve problems in computer science and write rigorous proofs of their correctness. Some major types of algorithms we covered were divide-and-conquer algorithms, dynamic programming, and network flow. In addition to problem solving techniques, we learned to write proofs for correctness and running time of various algorithms, and finished with proofs of NP-completeness.",
                "I developed knowledge and skills in computer algorithms and applying computer algorithms."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "Strength: Gives me a solid foundation of algorithms.\r\nWeakness: It's perhaps too difficult at times.\r\nStrength & Weakness: Psets and exams are pretty detached from lectures and focus more on general problem solving skills. Which is both good and bad because lectures aren't that useful but you are also tested on your ability instead of remembering specific things about lectures.",
                "I think the psets were difficult enough to require a high level of engagement, but it often felt unintuitive to come up with the algorithms to problems (only could figure out the algorithm by going to office hours for many cases). One example is the subset sum -> min-partition.",
                "Strengths: the lectures are pretty clear, shame no one really goes.  The office hours are frequent and invaluable.  The content is actually pretty interesting.\r\n\r\nWeaknesses: Oh boy...\r\n\r\nThe problem sets, especially in the second half of the course, are genuinely impossible to do on your own.  However, you can expect the TAs to literally hand you the answer which teaches you nothing.  Then they grade the psets randomly and inconsistently, blatantly favoring LaTeXed psets and often not responding to regrade requests.  Even if you manage to solve the problems without the assistance of the TA, your solution will vary by a few words from all of the copy-paste office hour psets, and the graders are too lazy to read through and check that your slightly different solution is actually correct (and getting points back on regrade is a crapshoot).  This is a huge problem when 60% of the course grade is psets.  Also, staff was very selective in responding to Ed posts... and the grading delays are extreme.  We went into the end of semester Friday with 100% of the course done and 50% of the grades actually posted.  Pset 4 due nov 1 was not graded.  Embarrassing!",
                "harry jain is great, good problem sets and exams and lectures and textbook and section",
                "Lectures are great, Professor Wibisono provides in-depth slides, and the course staff are also super transparent and helpful! There are so many resources that help you get through this class. The only weakness is that grades can take a while to come out.",
                "Strengths: I feel like the course gave me a good background in algorithms now. The late days were very useful. The PSETs helped with my understanding. Weaknesses: I don't know if I could have done any of the PSETs without the ULAs\/TAs. Sometimes the lectures would go too fast.",
                "Strengths:\r\n- Professor Wibisono is very nice and actually cares about your success. he is always helpful in office hours and is accommodating when you need it.\r\n\r\nWeaknesses:\r\n- except for one or two problem sets, all of them were very difficult. there were some that were nearly impossible to do on your own. even the TAs would say that they have no idea how to do it without the solution\r\n- quality of the TAs \/ ULAs. some course staff was good but many would not even read the problems before coming to office hours and then spend the whole time trying to figure it out with us vs helping us understand it. also, we would always get conflicting information and different ULAs\/TAs would tell us to do the problems very differently\r\n- NOT ENOUGH ULAs for the amount of people coming to office hours. for such a large class and such a difficult course, the lack of ULAs made it very difficult to actually get help during office hours. this made the whole course experience much worse because I couldn't count on being able to clarify concepts in office hours. ended up having to get a private tutor because i was so lost. MUST get MORE teaching staff for this course\r\n- office hours timing: office hours would be held by one ULA 1 or 2 hours at a time meaning instead of there being many ulas constantly helping people out there would be one ula who gets stuck with someone for 45 minutes and then not 1 other person would get help the rest of the time\r\n- weaknesses were mainly related to ULAs\/TAs. whether it was not having enough of them or the quality of their help\/guidance",
                "It was a great foundational course, where I learned about how to create new algorithms to solve problems.",
                "Strength and weakness, depending on the person: HIGHLY theoretical. Could add some more practical historical examples or general applications to certain less-intuitive topics (such as those that do not involve graphs). \r\nStrengths  teacher and head teaching fellow were highly knowledgable and were very efficiently moving through the course. Weaknesses approach assumed topics that some students are not familiar with and speed was daunting.",
                "Their were three main weaknesses of this course.\r\n1) The professor. His lectures were boring, monotone, and unenthusiastic. Wibisono seemed to get lost in mathematical symbols and letters rather than trying to explain the intuition.\r\n2) There was no coding, just long and tedious mathematical proofs. After taking this course, I don't think I could implement the vast majority of the algorithms we discussed.\r\n3) Slow to grade problem sets and give feedback. It's finals week and they have yet to grade 3 out of 6 problem sets, including one that was due over 5 weeks ago.",
                "I think this course was very comprehensive in covering many different algorithms and a lot the basics in a very organized way. This comment however, is only reserved for the lectures and slides which were, for the most part, really great. The majority of the assignments and exams of this class were widely agreed to be extremely unpleasant and unreasonably difficult. Although they improved this slightly towards the end of the course, I felt like this class became an unwelcome burden that plagued my semester. Out of the all the 30+ PSET problems, I think only managed to solve maybe 3 without having to go to office hours multiple days in a row and this was a common sentiment for many people in the class, especially if this is the first algorithms class they were taking. Somehow, in spite of attending nearly every lecture, going to office hours multiple times every week, and investing a significant portion of my semester trying to get through this class, I still feel as though I've learned very little, and have only learned how to parrot answers to very specific applications of the algorithms discussed in class. The disconnect between the lectures and the problems we were expected to solve were demoralizing, and I really wished they had made the problems less abstract and more connected to the lecture material (rather than tangentially). I didn't feel like I was being challenged, but rather, beat down with another extremely long PSET that would take at least 10-20+ hours with a course staff that was mildly condescending. I also found this attitude frustrating throughout the course in things like PSET or DQ problem solutions, in some of which they rated problems as \"easy\" and a \"piece of cake\", the announcements on Ed\/Canvas, and also through my experience getting help from some of the TAs. Additionally, PSETs were graded super late, so we never really got feedback on time. For instance, none of the PSETs that covered topics on our final were graded by the time we had to take the final (i.e over a month worth of material), and the practice exam came out like 2 or 3 days before the exam. I just really feel like if you expect the students in a class to go the extra mile, I think the course staff should hold themselves to a higher, more organized standard. I never leave really long comments like this for classes, but I really just had such a bad, unpleasant time in this class that it warrants this. The only thing I really enjoyed about this class were the lectures and the slides, which were very organized and flowed well into each other; I just wish I could say the same about anything else.",
                "The PSet problems are greathard but satisfying and fun. The homework and exams towards the end of the course got way better. At first, the PSets were brutally long and difficult, but the instructor adapted the later ones to fix this for the class. Similarly, the first exam was brutal (both in terms of difficulty and timing) but the second was much better. I liked having no final and only 2 midterms and biweekly PSets! I think the structure of this course is great, and the professor was a clear explainer and nice guy. The TAs and office hours were also amazing and so helpful. We should spend less time on proofs, though, and more time on the problems\/algorithms!",
                "Strengths: detailed lecture slides; simple, clear course requirements\r\nWeaknesses: \r\n1. Problem set difficulty (especially in the first half of the semester) was entirely too high. It was nearly impossible to solve any of them without 10-15 hours of work, always including numerous visits to office hours. Some TFs said the difficulty was on par with that of Intensive Algorithms (CPSC 366) - but that's not what I signed up for! \r\n2. The exams (particularly the first one) suffered from a similar issue. They were ever-so-slightly less challenging than the problem sets, but required much more time than was allotted - no one finished.\r\n3. Grading was entirely too slow. As I type this review, only 3 of our 6 problem sets have been graded, the oldest of which was submitted over 5 weeks ago. It's hard to improve your understanding by learning from your mistakes when you don't have timely feedback.",
                "Grading took forever and we wouldn't get feedback on our exams and psets until fairly late. The abundance of office hours was incredibly helpful.",
                "This course had a lot of strong resources that it provided to students. There were power points, lecture recordings, optional discussion sections, and a very large number of office hours that made understanding the content and finishing problem sets attainable. Weaknesses: the lectures were a bit dry, and we have yet to receive grades since the 3rd pset in October.",
                "Strengths: The material itself is very fascinating. Prof. Wibisono is a solid instructor, and he's friendly and accommodating. I wish we got to spend more time with him directly. Most of the course staff are friendly and helpful and it was clear that they wanted to help more but were bogged down by the workload and logistics. Glad I stuck till the end of the class. \/ Weakness: Complete lack of female course staff was noticeable. Most of my peers dropped out of the class and it was heartbreaking to see that most of them were female or minority students because I knew they were capable of completing the class. So if you're a minority student don't be discouraged by the bro-y culture of the class. Also, it was very hard to see how well I was doing because the feedback is so so slow (it's finals week and I still haven't received any feedback from half of my psets).",
                "Strengths: Wibisono is a great instructor with awesome slides and organization.\r\nWeaknesses: This course is impossibly difficult. It was completely theoretical at times, with no applications to current computer science topics. The course needs to have linear algebra as a pre-requisite -- 202 is not enough to take this course.",
                "Strengths: really important\/applicable material, forces you to really understand everything. Lots of guidance from lectures\/discussions\/psets\r\nWeakness: none!",
                "Strengths: Extremely organized. Office hours are very abundant. The course staff actually listens to feedback & makes improvements to the class. \r\n\r\nWeaknesses: The PSETs were too difficult at first, to the point where you could not solve problems unless you went to office hours. Although the workload ended up lightening up later in the semester, all of the problem sets were mentally exhausting.",
                "The pace of the course was a bit too fast in the beginning, but overall, it provided a great sense of algorithmic background that I had never been exposed to before. This course is highly practical, and I frequently apply the knowledge gained from it now.",
                "Strengths: topics are somewhat interesting and important, teaching staff was great and receptive to feedback\r\nWeaknesses: Lectures were so boring, but you don't really need to go to them (just read the textbook); some of the psets were BRUTAL & required a lot of office hours.",
                "Very clear slides\r\n\r\nWeaknesses: Very slow grading!",
                "Important concepts, but too mathy, especially consideirng this doesn't count for a math credit (although does count for an ECON credit for some reason). Also PSET questions were impossible to do without going to the TAs for guidance and continued to be difficult after they said they would make them easier",
                "This course was very, very hard for me. psets took upwards of 20+ hours, and were often not doable without going to OH. However, the professor and teaching staff were very receptive to feedback and made the course easier as time went on. Very challenging, but imo very rewarding by the end.",
                "STRENGTHS: Lectures were quite helpful and engaging, often being sufficient enough on their own to get a strong grasp of the material. Course was generally well-organized. The staff were very understanding and accomodating with the difficulties of the course (it seems as though it was ran a bit differently this semester) and things adjusted to feedback, especially after the midterm. Staff gave cohesive, in-depth feedback on problem sets.\r\n\r\nWEAKNESSES: This course suffered from the issue of problem sets being so difficult that they were often unable to complete without help in office hours for (seemingly) the majority of students. This wasn't every problem of every problem set, but often, there would be 1 or 2 questions each (out of 4 or 5 usually) that would be particularly challenging. I feel like this undermines the learning process since it can be really discouraging to spend a lot of time on a problem by yourself only to get nowhere when you could take the much easier path of just going to office hours instead, knowing you have the correct answer, and spending less time trying to really understand the concepts. Feedback was generally too late to be super helpful. For example, the last 3 psets (out of 6 total) weren't graded as of taking the final exam, and, as of writing this, still aren't even well after the course ended.",
                "Some of the concepts, like DP, are really useful for technical interviews.  On the other hand, I wish that Prof. Wibisono did not spend so much time going over proofs in lecture that we didn't need for the homework or the exams",
                "At the beginning of the semester, office hours were disorganized and it took many hours to receive help from the ULA's. Also, the problem sets often pull heavily on mathematical reasoning skills that were out of the scope of the class. Eventually when the organization improved and student feedback was considered, the course content and structure became significantly more conducive to learning and developing as computer scientists and mathematicians.",
                "The psets (and first midterm) are not reflective of the lecture material -- made it very challenging to feel as though i was reinforcing my learning because i had to go to office hours where ULAs also didn't know how to arrive to the solutions for certain questions in the problem sets.",
                "Strengths: the content and slides were top-notch and extremely well presented. I could not have asked for a clearer presentation of the course material.\r\n\r\nWeaknesses\/how to improve: the exams tried to cram a lot of content into very little time. This resulted in people not being able to finish, and the mean\/median grades were terrible (especially the first midterm). This could be improved by having fewer questions.",
                "The biggest weakness of the course in my opinion were the PSETs. They were a bit too difficult in my opinion. They routinely took me over 15 hours to do. You have two weeks to do most of them, but still a large time commitment. I also wish the PSETs had less focus on proofs and a little more focus on actual code implementation. The PSETs were literally all just proofs. I think it would've been a little refreshing if there were questions on the PSETs moreso like Leetcode where you code up a solution to some algorithm problem (and explain it, but not necessarily at the same of depth that you would a proof).",
                "Strengths: well-organized and fast-paced. ULAs and TAs made the course strong and their help in office hours and walkthroughs made the class manageable. Lectures were also quite useful and explained the content in depth. Problem sets were difficult but incredibly interesting and clever to solve.\r\n\r\nWeaknesses: grading  the times which we received feedback were very sporadic. For example, we did not get a single grade back after Midterm 1 until the very end of the semester.",
                "Slow grading. Course notes were good and comprehensive, but was often many lectures behind class. Good job listening to student feedback after super hard first midterm and adjusting appropriately. Good at being clear about what content to expect on second midterm.",
                "Strengths are material, but this is not because of the course, it's just because learning about this is interesting.  Weaknesses are problem sets, professors, and TF (not ULA).  Lecture is absolutely dreadful. It doesn't follow cohesively, is absurdly dry and doesn't help solve the near-impossible-typo-ridden Problem sets. I feel bad for the teaching staff for this course, they had to handle almost everything as the TF and Professor were incompetent.",
                "I would recommend that lecture be mandatory; there were very few students in attendance. I also advise the instructor revise their slides--reduce the amount of content covered per lecture, as there was a good deal rushed.",
                "I love that the course focused on application rather than memorization. The cheat sheet allowed for the final and midterm demonstrated the emphasis on application, and ultimately made the course well-structured to teach algorithms rather than memorization of key terms.\r\n\r\nI wish that the course did talk a little bit more about what the explicit points to prove were in the problem sets. I feel like this could have better prepared students for the midterms. Often, the few points taken off on each pset felt a little nitpicky and didn't really improve our understanding of the material. I think this is more of a reflection of the instructions for graders than how the course is configured, though.",
                "The first half of the course was very very difficult. The problem sets were long and took hours to figure out. Even then, only with ULA help was I able to make progress. The second half of the course was much better. I felt like I was able to understand the concepts and the problems sets helped apply them.",
                "The course began extremely difficult with the first 3 psets taking more than 60 hours all together and the first exam being really hard. The professor and the course manager were very receptive to feedback and made sure that everyones concerns were heard. The last 3 psets and exam were much more manageable after that, but not too easy either! Amazing course!",
                "Strengths: important cs theory taught in a well organized and accessible fashion. The course was structured in such a way as to maximize ones likelihood of success such as by providing lots of office hours, discussion sections, class notes, and recordings. The result is that material that could be very difficult becomes quite approachable yet not so easy it is a waste of time. Overall, I found the class to be taught very effectively. The staff also responded to peoples feedback. Weakness: only problem was that homework took a very long time to be graded.",
                "The lectures are a little boring. Too much proofs of algorithms when proofs aren't even that relevant to the exams and psets. Also could have used a little more emphasis on how to sufficiently show the correctness of an algorithm.",
                "The lectures were not very engaging compared to other classes I have taken. Office hours are sometimes helpful",
                "Lectures were very engaging. The course staff also provides an incredible amount of support to students.",
                "The content of the course is very interesting and I enjoyed the PSETs. It was very helpful that lecture slides and recordings were readily available. The course manager Harry Jain is also fantastic with course organization, office hours, and review sessions. In terms of weaknesses, course pacing was inconsistent, especially in the selected topics at the end of the semester.",
                "Strengths: The slides are well organized and very logical to follow.\r\n\r\nWeaknesses: None",
                "Strengths: The professor is pretty good at explain the topics. I really like his slides and the diagrams and you can tell he puts lots of time into the slides to try and help the students understand the concepts. He is also very receptive of feedback and has changed his teaching methods\/course workload based on student's inputs\r\nWeakness: Sometimes the problem sets are way to hard and out of scope that we can't really solve them without office hours but the queue for office hours is always so long that you go to office hours but it ends before the queue gets to you",
                "It was an incredibly taught class-- I thought lecture slides were comprehensive, and the topics were very clear and the line of logic for course topics was easy to follow. In addition, the problem sets and tests were quite interesting, and did truly make me think in a critical manner. The first midterm and first half of homeworks were very hard-- to adjust, the problem sets and second midterm were made easier, but I felt they became a little too easy and lacked the cool problem-solving part that the first half had. \r\n\r\nSometimes the grading could feel a bit inconsistent, as I had to submit a few regrade requests to regain points for misgraded items (like if my algorithm was phrased in a different way, but still correct). Even then, grading\/office hours was super super helpful and far above average in terms of effort and quality compared to other courses (shoutout TF's and ULA's!). \r\n\r\nOverall, there were many many more strengths than weaknesses, and this course was one of my favorites.",
                "Strengths: there were a lot of office hours all week and for the midterm, final, and later psets they also organized walkthroughs\/review sessions. Weaknesses: the lectures were really rushed at first and were also sometimes overly focused on less important proofs instead of making the main algorithms clearer, though they got better later on. The first midterm was way too long for the 75 minutes we were given, and I think very few people were able to get through all the questions. The second midterm was a lot fairer.",
                "The teaching was good and the material was very valuable, however the lectures often had so much info packed into them that we couldn't finish all the slides. This got better around the second half, where Wibisono slowed down a bit. Another weakness was that some certain homework problems were much more difficult than others, and were basically impossible for those who didn't attend certain office hours. However, having to go through the process of understanding such difficult problems and writing our own solutions to them was very valuable, and having to be proactive and seek office hours was a good habit to get into. Midterm 1's difficulty, specifically the meagre amount of time we had for it was a bit excessive, but the staff realized that and toned it back for Midterm 2. Overall great class though and I learned a lot.",
                "This course's only strength is the willingness of the ULAs and TAs to help you get through what they understand to be a terrible class. Most people are required to take it and it shows. The materials are interesting, but the structure of the course enables missing lecture while making office hours and absolute necessity. Much of the coursework taught me some stuff about algorithmic problem solving, and a lot more about how to pace my assignments and go to office hours. If you want to learn how to tackle inaccessible projects, network with people you don't know, and structure your academic schedule around when TAs are available, this class is amazing. If you find algorithmic problem solving and don't already have an an abundance of experience and knowledge, the joy of learning will be sucked away as you do what you need to survive and get a grade that's indicative of your efforts.",
                "Didn't particularly like the way that lectures were presented, for us the professor (Prof. Wibisono) tended to go through the proofs of algorithms more. Prof. McKay seems to do more examples in his lectures and less proof on how the algorithm works\/proof of correctness of algorithm, so it just kinda depends on what your learning style is.",
                "To Professor Wibisono and the TA's credit, the class got better over time. However, compared to previous iterations of the course, Fall 2023's Algorithms was *markedly* more difficult (as testified by virtually every single TA), and the course was a brutal slog. While this is not intrinsically a weakness, I would definitely say that given this level of difficulty, the course needed many more TAs and much more support earlier on, particularly for the students like me that did not have a solid foundation on proofs.\r\n\r\nAdditionally, the TAs always took way too long to finish grading the psets, which sucked especially at the beginning because I had no way of knowing if I was thinking of the problems the right way. This problem was magnified given the difficulty of the course. However, this seems to be a pretty common problem at Yale at large\/a function of all the graders being busy students themselves.",
                "Strengths: I was looking for a course to improve my proof writing and theoretical computer science knowledge, and this class fit the bill. While some of the problem sets were long, the problems were tractable without too much help from TFs. \r\n\r\nWeaknesses: due to the number of students enrolled, grading was quite slow. By the time the semester ended, we only had our first 3 of 6 problem sets graded. While it did not bother me too much, it is worth mentioning that you do not write any code in this class. This is a theory-first course, so code implementations of data structures and algorithms are not covered.",
                "The course is well taught. The recording camera is sometimes blurry or not centered correctly."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "It's required for CS major. If you are not CS major, I wouldn't necessarily recommend it.",
                "Yes, I think it gives a good basis for a future in computer science.",
                "If and only if you have to take it for your major or want to be a software engineer (a lot of course concepts appear in interviews)",
                "yeah",
                "Only if you have to take it (speaking from someone who enjoys computer science much more than math because this felt like a math course).",
                "obviously only take this if you HAVE TO for your major. it's the hardest class i've taken so far - just pure rigorous mathematical proofs. if you're a CS major you pretty much have to take this so there's not much to recommend but I would say if you take it with professor Wibisono it will be hard and be prepared to spend a lot of time on the psets but also he gives you so many resources to succeed. the problem for me was that the TAs were not good. i think if they were actually helpful and there were MORE of them then it would have made the semester a lot better. so it will be hard but he sets you up with a lot of ways to succeed if you actually want to succeed.",
                "Yes, I learned a lot in this class.",
                "Yes the subject matter is one of the most interesting topics I've learned in school ever. However, I'd advise to take it at your own risk you need to be ready to be highly uncomfortable in many times, dedicate a lot of time understanding the background knowledge) as it is VERY theoretical.",
                "No, unless it is required. It will be easier and better to learn algorithms online through videos and leetcode.",
                "The course yes if you're interested in algorithms\/optimization. I just wished I had taken this class any other semester.",
                "Yes! It's a great course for thinking about problems and ways of solving them efficiently, in general!",
                "Only if required for your major (CPSC and CPSC joint majors). Otherwise, the level of difficulty and work required is far more than the actual gain of this course.",
                "You're probably taking this because it's required. I enjoyed the class overall, so I would recommend it; however, it is extremely time-consuming, so make sure you plan out your schedule accordingly.",
                "Not really, but perhaps. I took this class because it's a requirement but I'd still recommend it to non-cs majors because I enjoyed the conceptual parts of the class. The concepts themselves are very interesting and it's taught in a relatively engaging way. However, It was very hard to see how well I was doing because it is finals week now and I haven't received any feedback from half of my psets. I'd still recommend anyone to learn algorithms though, but there are good online courses and videos too.",
                "No, unless it's required (which even then, please take guts with this)",
                "Yes! But be prepared to put in the work! (about 30-40 hours per pset is natural)",
                "Unless it is required for your major, DO NOT take this course. It is simply way too time-consuming. Although the concepts are interesting and highly applicable to software engineering, you could easily learn them in your own time without having to perform the long and rigorous proofs that you are expected to do in this class. \r\n\r\n(P.S. I think this class should be a writing credit due to how long the proofs are)",
                "I would recommend this course only to computer science or mathematics students. It involves a lot of proof-based content and requires a strong foundation in analytical thinking.",
                "Only if you need it for your major. It's not as bad as 323, but it's a challenging course with a relatively high workload.",
                "Yes - I think it is a very important topic and is taught in a structured and progressive way. Every CS\/Math student should take it.",
                "If someone is interested in common algorithms used in CS but in a proofy, math sense, then yes.",
                "If you like math\/proofs, if you want to take algorithms, if you are a CS major",
                "Yes if you're a CS or CS-adjacent major since it is required. It will help greatly with Leetcode problems. Other than that, the difficulty of the material makes it somewhat hard to recommend more generally, especially with 2 CS prereqs.",
                "Yes, this course is fun and interesting and if you apply yourself you will learn the necessary concepts to complete the problem sets and understand the lectures.",
                "Only if you must take it!",
                "No. Although the material is clearly presented, and although I very much love the teaching style, the one thing holding me back is the workload. Even though I tried to write my proofs more efficiently, I still spent an inordinate amount of time writing them up.",
                "If you're a CS major, then you have to take this course. If you have flexibility in your schedule, I would maybe recommend taking it in the Spring with McKay, as I heard better things about his class in terms of the workload.",
                "If it is taught by Wibisono, yes! It was an interesting and intellectually stimulating course. Be warned that it is not a cakewalk and will be quite time-consuming, but if you put in the work, it is very rewarding and really opens your mind to finding clever solutions to quite tricky algorithmic problems. It also provides good preparation for interviews!",
                "No. Maybe the course taught by a different professor but not Wibisono. The concepts are interesting and fundamental to any CS major.",
                "I would recommend the course only if you have substantial background taking math and computer science courses--don't skip pre-reqs.",
                "Yes.",
                "This is an incredible course and one of the strangest in the CS department. The content is really interesting, if difficult, and will help you develop these critical skills. The course will reframe the way you think about algorithms and is done in a very rigorous manner. Professor Wibisono and the course manager, Harry, were both so kind and considerate and shared their passion for the subject. Highly recommend! Just beware, the course is a lot of work!",
                "Yes, most likely it is a requirement.",
                "No, unless it is required for the major, not many applicable Algorithms that are interesting to learn.",
                "Yes! The problem sets challenge you to solve really interesting problems and the lectures are quite engaging.",
                "I would highly recommend this class to anyone interested in problem-solving, especially if you enjoyed cs 202 or math 244. This covers a lot of incredibly interesting strategies for problem-solving and proving that these strategies work without getting bogged down in the details of code.",
                "I'd recommend this course to any student with an interest in CS, math, or logical problem solving! Algorithms is very different from any other programming or mathematics class you'll ever take, and if you really enjoy thinking through situations logically and analytically, algorithms is just right for you.",
                "Yes especially if you are a CS major. Also if you really like problem solving this class is basically like a problem solving class sign you don't need to know how to code you can just write out the algorithms in words",
                "Absolutely. Not only is it a major requirement for CS, but it teaches many fundamental thinking methods for applicable problems, and is a very cool and well-structured course overall.",
                "The first half of this course was not taught very well and had a pretty bad workload (20-30 hour psets due every two weeks), although OH were helpful. The course became a lot better organized and more manageable during the second half though and hopefully will stay similar to that in future semesters. The topics taught and the homeworks were really interesting, so (if it's not a required course) I would recommend it if you are interested in CS theory and have time for a potentially very high workload class.",
                "Yes, its fascinating stuff especially the P and NP problems, and you have to do it if you're CS, so yeah.",
                "I wish I could. I didn't take it as a requirement. I just wanted to learn. I did learn some things. I am proud I did it. Was it worth it? . . . I wish it was. What I learned was not worth the experience that was the course. Learning is de-centered in favor of making it through a syllabus that feels like it wasn't designed with the learning experience of the students in mind. If you have lots of experience or knowledge already, this class feels like it was made for you. If you don't, proceed with caution- the only consideration you get will be in the form of pity and remedial assistance from TAs and course runners who feel bad for how things are.",
                "Yes, Algorithms is useful for the basic foundations of CS so I would definitely recommend if you are planning on majoring in CS or CS-adjacent majors. Overall, it teaches you a lot about efficient search algorithms and how to divide problems to solve them efficiently, which is helpful in the grand scheme of things when planning out projects.",
                "Beyond CS majors which are required to take this class, I recommend this course to non-majors who are serious about computer science. You will learn a lot in this class, and while writing better proofs may not enhance your projects, the skills you learn for mathematical problem solving likely will.",
                "Yes, very important in current and future topics."
            ]
        }
    ],
    "extras": {
        "title": "CPSC 365 01\/ECON 365 01 - Algorithms"
    }
}