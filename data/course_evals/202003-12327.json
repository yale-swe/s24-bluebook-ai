{
    "crn_code": "12327",
    "season": "202003",
    "enrollment": {
        "enrolled": 78,
        "responses": 49,
        "declined": 4,
        "no response": 18
    },
    "ratings": [
        {
            "question_id": "YC601",
            "question_text": "Which of the following best describes your mode of learning in this course?",
            "options": [
                "recorded lecture",
                "live virtual lecture",
                "in-person lecture",
                "virtual seminar or other discussion format",
                "in-person seminar or other discussion format",
                "virtual lab",
                "in-person lab",
                "other or multiple (please describe below)"
            ],
            "data": [
                10,
                28,
                1,
                0,
                0,
                0,
                0,
                3
            ]
        },
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                0,
                3,
                17,
                20,
                3
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                1,
                5,
                13,
                18,
                6
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                2,
                4,
                9,
                20,
                7
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                0,
                9,
                17,
                13,
                3
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge<\/u> of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                10,
                25,
                7,
                0
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the <u>workload<\/u> of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                9,
                31,
                2,
                0
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC601N",
            "question_text": "Please list any other mode(s) of learning, including any combination or variation of the above options.",
            "comments": [
                "combination of recorded and live virtual lectures.",
                "recorded lecture and live virtual lectures",
                "Many students chose to watch the recorded live lectures asynchronously since they were optional.",
                "lectures were recorded",
                "There was a live virtual lecture, but the lectures were recorded and attendance was not mandatory.",
                "Lecture also recorded\r\n\r\nPiazza, Discord office hours",
                "Lecture code was a good reference for some design patterns, as well as some websites such as refactoring.guru. The textbook was a valuable reference for many concepts.",
                "Lectures were recorded for students who could not attend synchronously",
                "N\/A",
                "Virtual office hours",
                "Lectures were also recorded so that they would be re-accessed later",
                "Lecture was recorded + virtual office hours",
                "Problem sets.",
                "Piazza was a thing",
                "Piazza was super helpful! The students and instructor were all very thorough and quick in answering questions."
            ]
        },
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?\n(Your anonymous response to this question may be viewed by Yale College students, faculty, and advisers to aid in course selection and evaluating teaching.)",
            "comments": [
                "OOP concepts, designing concepts, Python",
                "I learned more about Python and object oriented design, as well as design patterns.",
                "really useful, real-world applicable knowledge of object oriented programming. This course definitely helped me improve my programming skills overall, as well. For example, this is the first CS class I've taken in my 3.5 years at Yale that actually taught students how to test their code (isn't that wild)",
                "How and when to use object oriented programming, how to implement various design patterns, testing and tools used for unit tests, concurrent programming in python, basics of C++",
                "Object-oriented class relationships, design patterns, and automated testing (assignments in Python with some lectures in C++)",
                "Good and applicable object-oriented design principles and patterns.",
                "Object-oriented concepts such as classes, inheritance, design patterns, unit testing in Python and some in C++.",
                "I gained a much more thorough picture of object-oriented programming practices and theory with some decent experience in applying them.",
                "I learned object-oriented programming concepts and how to make use of several modules in the standard Python library.",
                "I learned about how to program using object oriented principles in mostly Python and some C++. I learned how to think about representing situations as objects, which one of many object-oriented patterns would fit to that situation, and also if other principles like concurrency were relevant.",
                "Learned a lot about object-oriented programming (duh). Practically, was very useful in providing me with a different approach to writing code. Learned a lot about inheritance, polymorphism, and general good practice with writing classes and objects. Bulk of the second half is learning about different design patterns, or ways to structure objects and object relationships for specific purposes.",
                "Object-oriented programming principles and design patterns. How to get better at writing clean code.",
                "Object oriented programming, coding in Python\/C++, testing code",
                "Object oriented design patterns, planning out and testing code",
                "I gained a theoretical and practical understanding of basic design patterns used in industry, as well as testing frameworks and techniques. I learned about classes and objects and the basic relationships that can occur between them. I learned how to refactor code to make it more reusable and maintainable. I learned briefly how to use threads and other optimizations in Python. I also gained a basic understanding of C++.",
                "Learned how to program in Python, a little C++, and how to write programs with object-oriented design",
                "Object oriented principles such as class interactions, testing, OOP design patterns, and parallel programming.",
                "I gained insights into object oriented programming and related concepts.",
                "Deep understanding of object oriented programming in Python, as well as a foundational knowledge of OOP in C++",
                "This was a great introduction to object oriented programming. I learned how to better write software and the vocabulary for talking about it.",
                "You learn about common practices and principles of OOP, different frameworks for testing code, common ways to structure your code and objects\/classes you create. The class is mostly in Python with all the problem sets being in Python, but you also learn about OOP in C++.",
                "OOP principles and design patterns, and coding in Python.",
                "I learned a lot about Python and design patterns for object-oriented programming.",
                "Learned a lot about code architecture\/design, and OOP history.",
                "I learned a lot about organizing, writing, and testing code to make it reusable and easier to work with.",
                "Learned coding in python and as the object oriented principles. Near the end we also reviewed some c++ syntax.",
                "General understanding of OOP principles, best practices, and design patterns.",
                "Object-oriented design, intricacies of Python, program testing",
                "Basic object-oriented programming practices, all in Python, with a lot of emphasis on the second half (and overall) about clean design, and how to achieve it through design patterns. A little bit of concurrency and c++ programming towards the end as well."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?\n(Your anonymous response to this question may be viewed by Yale College students, faculty, and advisers to aid in course selection and evaluating teaching.)",
            "comments": [
                "Recorded lectures with a few examples, explanations of concepts. Maybe more examples, faster feedback and grading could help improve.",
                "I think better planned code examples would benefit the course greatly. Often times the teacher would deviate from what was pre-planned which often led to a lot of dead time as he worked through issues.",
                "Strength: Good to know OOP so basically the subject of the class is good \r\nWeakness: Because it was Barron's first time teaching this class and first time at Yale, I think there were a lot of rough patches along the way in terms of timing of the class material. It really ramped up in the last 4 weeks of class (around Thanksgiving) and it was really stressful. It was fine before then until this course took a sharp turn that became a headache.",
                "The professor managed time very poorly. We had assignments that can be done in less than 2 days and were given at least two weeks at the beginning of the semester. Then we had an entire month with no assignments. All of a sudden two weeks before reading period we get two rather large assignments that is not trivial to implement all also within a two week period. \r\n\r\nThe form of submission can also be improved. Gradescope is good for written submissions, however for code, I is definitely much easier to submit it over the zoo. I do not know why we still dont have a class folder in the zoo after being one full semester. Yes, we did get test cases for the later assignments, but those test cases falls into two categories. They are either so trivial that almost everyone will pass them if they tried to implement the assignment or you fail the test case and all you see is some error code. That is not helpful for debugging at all even if its public test cases. The public test cases are also released very late in respect to the assignment due date. This is because we get those test cases literally one day before or even the day of the due date of the assignment. This does not help for students trying to start on the assignment early.",
                "strengths: lecture quizzes (!!!) this was the only class I had that had a graded quiz after every lecture, and consequently was the only class I was never behind in because I actually had to watch the lectures. I definitely found the course content super useful. It actually teaches useful things you need to know as a software engineer (barely any Yale CS classes do this)\r\nweaknesses: lectures were pretty dry and not engaging. Also I thought that there was a huge jump in the difficulty of psets (specifically pset 4, which we had to work on during Thanksgiving break) that left students really frustrated",
                "Weaknesses: some of the homework assignments were offered late. Strength: the assignments were effective in getting me to practice object oriented programming.",
                "The course is built to facilitate learning well from lecture to lecture-- the problem is that the amount of material and the complexity associated with it is unevenly distributed between the first half of the course and the second. The first half of the course was mainly dedicated to basic ideas associated with OOP, relationships between objects, use cases, and then furthering our understanding of those basics in addition to some examples in python (e.g. pytest). The second half of the course then goes into the deep end, going over tens of unique design patterns and then assigning us large projects where we design and build a system using what we've learned thus far. While the projects and material in the second half of the course makes sense, it's just somewhat disorienting when an assignment takes more time than all the ones from the first half of the course combined.",
                "Strengths  Prof Barron is one of the younger professors in the cs department and his industry knowledge really distinguishes him from the other, more academia-focused ones. In this sense, he's a lot more relatable for the large subset of students wanting to work in industry instead of higher education and research. He brings a lot of interesting security knowledge and background while adhering to object oriented class content. The psets were also pretty fair and engaging, and a good reflection of the principles we learned in class. The final, which was open book, was also rather easy and fair as well. The public tests were really helpful with testing code without giving away all of the private tests. \r\n\r\nWeaknesses  Overall, the deadlines and assignments felt rather disorganized. While Prof Barron let us know which assignments were expected, assignments or files or deadlines or quizzes wouldn't be uploaded in a timely manner (as in, multiple days late), causing it to be rather difficult to keep up with the class. Communication also at times was spotty. Furthermore, synchronous lectures did get rather long with lots of pauses and tangents, and I think that condensed asynchronous lectures, like other classes have done, would have been a better solution to delivering content.",
                "Strengths: loved the practical approach to writing code, as opposed to the theory I normally get from CS courses. though content was repetitive at times, it was MUCH more approachable than other CS classes.\r\n\r\nWeaknesses: could get repetitive at times",
                "I found the live coding sessions and the live demonstrations and real-time explanations of the actual code involved in implementing design patterns to be really useful. I'm really glad Prof. Barron decided to do live demonstrations in an IDE instead of slides filled with lines of code. The psets are also a strength. They're a great opportunity to solidify learning. A weakness of the course is the crazy increase in difficulty of the psets. The first three were pretty easy but the last two were much more difficult. The spacing and workload of each of the psets felt really unbalanced, to the point where we had to work during Thanksgiving break to finish an assignment due two days before Thanksgiving because of our professor's awful timing. There were several days where we had just turned in an assignment and had no idea when the next one was going to be released or be due, which made it difficult to plan around this course if you have other serious commitments.",
                "A strength of this course is that it was able to inform students about various object-oriented techniques. One weakness was that assignment descriptions would be updated part-way through the assigned (and sometimes close to the deadline) which was tough because I would allocate time for this class early on, but have to put in additional work without being able to plan for it. The test cases were also not up for most of the time that some of the assignments were  live which made it increasingly difficult to complete assignments ahead of time. The pacing of the assignments was also very uneven as some of the earlier assignments that were short and simple would be given two to three weeks whereas we had a large assignment that was due in two weeks and it was over the duration where on-campus students had to pack up all of their belongings and move out thus it was poorly timed.",
                "Good overview of topics\r\n\r\nThe C++ stuff at the end of the course felt tacked on and not very helpful. Seeing more practical examples of OOP being used in industry would've been better imo",
                "The lectures were informative and the problem sets helped in cementing understanding in class concepts and were pretty fun! A better organization of the course would be helpful in balancing the workload of the problem sets admittedly, since the last two problem sets took twice or thrice as much time as the first three. It would be useful to see more examples of refactoring specifically, for instance, more examples where the professor refactors non-object-oriented code  would help cement concepts better as well. The grading took some time so it was hard to keep track of how I was doing in the class at times.",
                "The problem sets were well written so that they connected with the material that we learned and the code we saw in lectures. However, the problem sets would be improved if they were assigned sooner after we finished a topic.",
                "The course has good content but the difficulty curve made no sense. It was way too easy at the start and too little work was assigned, giving everyone a false sense of security. The professor probably realized everyone was doing way too well and decided to screw us over with much harder psets at the end of the course when everyone was busy with other final projects and assignments. Cheap move and it didnt reflect well at all on Barrons teaching skills.",
                "The content of the course was interesting. The class felt disorganized and not well structured.",
                "I thought that this course was very well taught. The lectures were clear and concise and well structured to facilitate learning. The problem sets were fair and engaging",
                "This course was well set up for learning. Professor Barron is a very clear lecturer. \r\nThe only weakness was the timing of homeworks\/ exams. It should be determined before the semester.",
                "The strengths are that the quizzes for each week of lectures are pretty easy but keep you on top of the material, the problem sets are generally less intensive than those for the core CS courses, and python is more forgiving than C or C++. The weaknesses are that grades in the second half of the semester were a bit delayed for awhile, and also sometimes necessary clarifications on the specs for the problem sets were decided kind of last minute on piazza and affected the code you wrote, so you would sometimes have to make some last minute changes to your code.",
                "Interesting psets, but could have had more\/greater variety, especially early on in the semester.",
                "I enjoyed the flexibility with the recorded live lectures. However, it was difficult to stay engaged with the lecture material, as most of the second semester was simply going over design patterns, and other topics like concurrency and C++ were seeming crammed at the end.",
                "I thought it was an excellent course. The concepts were a lot more industry-focused unlike other CS courses at Yale that seem more theoretical. Definitely the most practical CS course I've taken.",
                "I thought this course was great. I think the material was interesting and the professor was very good at explaining the concepts. Maybe having more smaller problem sets would have been nice, rather than a few large ones.",
                "The course was altered this semester to use Python rather than C++, which I think afforded more time to focus on principles rather than implementation details.  Unfortunately, a great deal of lecture was still spent looking through code, which I did not find particularly engaging.",
                "This course does do a good job of teaching object-oriented design, which is a useful skill to have for anyone studying CS in general. It also introduced testing (unittest and pytest), which is also cool. However, the course is far too disorganized in its current statethe Professor didnt seem to have a clear idea of what he wanted the assignments to be beforehand, and the pacing of the class was extremely mismanaged. For context, we had 3 assignments in the first 2.5 months of the class, each of which could be done in a day or two. However, we then had 2 final assignments due in the last 3 weeks of classes, which were extremely more in-depth and time-consuming (we had to build chess and checkers). Furthermore, we were never given feedback on these assignments until after both were due, which wasnt particularly helpful. Automated test scripts often also werent prepared until shortly before the assignment due dates, which made it frustrating \/ impossible to complete the assignments ahead of time.",
                "Problem sets were a lot of fun! Really enjoyed the extra-credit tournament at the end."
            ]
        },
        {
            "question_id": "YC602",
            "question_text": "Among the practices in this course geared toward learning during the COVID-19 pandemic, which succeeded and which could be improved? Please comment on course practices that allowed for virtual engagement. (Your anonymous response to this question may be viewed by Yale College students, faculty, and advisers to aid in course selection and evaluating teaching.)",
            "comments": [
                "Recorded lecture, virtual Office hours.",
                "I found it very very limiting and not conducive to learning to not have the lecture slides made available in any format other than watching lecture recordings. We should be allowed to study the slides on our own time without having to skip through the lecture. What also impeded virtual learning was that the teacher and TFs\/ULAs did not check Piazza very often. Often times questions would go 2 - 3 days without getting an instructor response, and even when the teacher did go through them, they would often leave questions either unanswered, or with only a student answer that was not endorsed. This made it hard to ask questions on Piazza because there was a slow response time, and often times you wouldn't ever get instructor feedback.",
                "Lecture quizzes were so so helpful!! Only thing that kept me on track in this class. I truly think every class should follow Professor Barron's set up and make graded lecture quizzes. I would've fallen behind on the class content if I was not forced to watch the lectures on time.",
                "Success - open book final. This took a lot of stress off of students and made the exam less of a memorized, \"gotcha\" type to a \"do you understand the principles and concepts\" type. I appreciated that. Piazza was also a nice way to post questions and engage with the other students. \r\n\r\nImprovement - asynchronous, condensed lectures would have been nice in place of the recorded synchronous ones. Also, some of the Canvas quizzes did NOT directly reflect lecture content clearly, and thus it was a hit or miss answering them sometimes. (as in, they should reflect lecture content more closely)",
                "I like that the lectures were recorded so that we didnt have to attend them live if we were otherwise busy or something came up",
                "Piazza, recorded lectures were great",
                "It would be useful to have access to the slides from lecture with any handwritten notes added during live lecture on the Canvas files instead of having to watch the prerecorded lectures every time. It would be useful to have more interaction during the code examples concerning the design patterns, perhaps mini labs where everyone is coding a small design pattern alongside the professor or a TA.",
                "The lectures were good and it was helpful that they were recorded in case I missed something in lecture, but it would have been helpful if the lecture slides were also posted on canvas.",
                "Recording lectures and class quizzes were good.",
                "The recorded lecture via zoom were super helpful",
                "I think the recorded lectures were immensely helpful. I hope this practice can continue even after Covid",
                "very nice recording and i liked the discord office hours",
                "The Canvas quizzes after each lecture to make sure you were keeping up with the lectures were helpful and a good idea.",
                "The live lectures and released code were both very helpful and engaging.",
                "The online exams and recorded lectures seemed appropriate for the pandemic situation.",
                "N\/A I thought it was super good.",
                "Lectures on the course material were well structured but I felt the in-class code examples tended to drag on.",
                "Piazza with lots of activity was super helpful. The quizzes were also nice to force us to keep up with the lectures."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.\n(Your anonymous response to this question may be viewed by Yale College students, faculty, and advisers to aid in course selection and evaluating teaching.)",
            "comments": [
                "Yes, you get to learn about OOP concepts and practice coding in Python a lot.",
                "I would recommend this course if you're looking for an easy CS credit. If you're not a CS major but have some experience programming, it also might be a good course if you're interesting in learning more CS. You learn some neat Python tricks and some useful design patterns, so most people will be able to get at least something out of it, regardless of their skill level going in.",
                "The material itself is pretty important to know for CS majors and good to know for non-CS majors. However, Barron probably will have a better timing for the class in future semesters, so I would recommend it.",
                "I think all CS majors should take this class because it is one of the only classes I've taken at Yale that gave me direct feedback on how to improve my programming skills, not just expand my knowledge of theoretical CS or CS applications. Also I think you should definitely take this class if you are planning on doing software engineering after college.",
                "Yes. If you are not used to object oriented programming, this class would be a great go to. But you should be familiar with basic python, which honestly you can pick up during the first couple of weeks.",
                "Yes, totally.  The lectures were a little slow, but the assignments were interesting, and the ideas of design patterns and automated testing is absolutely paramount for work in industry.",
                "Strengths - fun psets, you actually learn about good code design for when doing OOP \r\nWeaknesses - a tad disorganized and we did not cover everything professor Barron wanted, also the spacing of the psets was rough and rushed at the end",
                "If you want to go into tech, you should at least be aware of what OOP is and how to use it, so yes take this.",
                "Yes! Most of the CS classes at Yale are quite theoretical and hard to apply to industry. This class provided me with knowledge that directly applied to previous internship experiences. I only wish I had taken this class earlier so I could have used the concepts in those internships.",
                "Yes-- it's OOP in Python, which is a little unusual, but you definitely learn a lot about both the language and the OOP concepts as applied to other languages (with a brief unit on C++ at the end of the course). While the course ratings might be somewhat all over the place for this term, this is Professor Barron's first time teaching and organizing the course, so expect the course to become much more organized and balanced going forward.",
                "Yes, it's overall a solid CS elective, especially if you're interested in working in software development instead of academic following graduation. Prof Barron brings some interesting insights coming from industry, and does a faithful job teaching object oriented principles that you see in software development all the time. The workload isn't that bad, the lecture content is pretty smooth and well communicated. If Prof Barron could sort out the disorganization issue and maybe add some alternative learning methods like asynchronous lectures, then this could definitely shape up to be one of the better electives in the department. That being said, though, this is probably the class at Yale which is most relevant to my career.",
                "Yes!! Would recommend to anyone entering the software engineering field. Workload not too bad, in a better language, and practical skills are learned.",
                "I would recommend this course to a CS major looking for a fair, not-too-difficult elective.",
                "Yep, definitely very useful info that helped during coding interviews for summer internship recruitment. Knowing some Python prior to coming into the course would help.",
                "I would recommend this course to another student to learn how to produce code that is used in industry and big tech stacks. The course really helps to develop a mindset which can break down any programming problem into classes and objects, which makes it easier to implement systems and complex architectures. The coding assignments are not too bad and can be pretty fun at times. The midterm and exam were fair and multiple-choice. The professor is invested in the class and is always ready to answer any question.",
                "Yes, it is a good CS elective that challenges you without being too difficult. It also does a really good job of teaching you to program in Python, which is very useful.",
                "Yes if you want to learn important OOP concepts and if it is better organized and paced in the future.",
                "Yes, object oriented programming is one of the most useful skills in the computer science world.",
                "I would recommend this course to any student interesting in developing an understanding of OOP and design patterns.",
                "yes definitely- engaging and reasonably challenging, but not impossible",
                "Yes, I would recommend this course because it is all around one of the best CS electives I've taken. Not a crazy amount of work like some of the other CS courses, easier to understand, and more relevant to software engineering (which is good if that is what you are interested in).",
                "Yes, it was an interesting course with engaging content and some interesting assignments.",
                "I would recommend the course to someone looking to learn Python and OOP design patterns.",
                "Yes yes yes! Tim is a really good teacher and the skills you learn in this class are super useful.",
                "Yeah, it was really good. One of the most practically useful classes I've taken at Yale. The concepts are easy to understand and once you apply them it makes your code so much more readable, testable, and reusable.",
                "Yes! Object oriented programming is severe useful to know and also really fun to learn. I also really liked that the class was in python as it allowed me to brush up on my python coding skills.",
                "It's a good course to learn design patterns and better understand software structure.",
                "Probably not, unless the professor becomes much more organized. Throughout much of the semester, the professor was late in handing out assignments, writing test scripts, and assigning grades, which made the class extremely frustrating and much more stressful than it needed to be. The content of the course is useful though, so if you really need a CS elective, then this is a valid option, since the material can be interesting.",
                "Yes! Definitely take it, prof. Barron is also amazing!"
            ]
        }
    ],
    "extras": {
        "title": " CPSC 327 01\n        Object-Oriented Programming "
    }
}