{
    "crn_code": "10919",
    "season": "202203",
    "enrollment": {
        "enrolled": 135,
        "responses": 62,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                1,
                3,
                16,
                24,
                8
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                0,
                7,
                11,
                22,
                13
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                0,
                3,
                11,
                25,
                13
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                2,
                10,
                16,
                13,
                11
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                4,
                21,
                24,
                4
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                6,
                33,
                10,
                4
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "This was a really cool course. I'm not a fan of Glenn's lecturing style and have taken so many classes under him, but he really excels in this course because it's what he is passionate about. He really makes the algorithms interesting and applicable to lots of common games (e.g. Yahtzee, Kalah, Chess, NFL, etc.) and you get to implement a lot of cool algorithms for homework (e.g. Monte Carlo Tree Search, Q-learning, etc.).",
                "I learned algorithms and techniques to apply to various board games.",
                "This course introduces some interesting algorithms for game playing. At the same time, I have enhanced my knowledge of algorithms in general.",
                "I learned a lot about different approaches to game solving and game modeling.",
                "I learned about many different algorithms and approaches used in solving games.",
                "Some cool topics in AI game playing. Different types of search, deep learning, reinforcement learning, nim and kayles, linear programming.",
                "I learned about various ways to find good\/optimal strategies for games, including algorithms (min-max, alpha-beta, MCTS, etc.), linear programming, coarse coding, etc.",
                "Algorithmic approaches to combinatorial and small scale games, including ideas of search algos (alpha beta, minimax, transposition tables), genetic algorithms, Sprague-Grundy, and had great experiences with the programming assignments which definitely furthered my understanding of the algorithms presented in class as you had to actually implement them for real games.",
                "This course covers a lot of techniques for writing computer agents to play different games.",
                "How to develop game-playing agents, from monte-carlo tree search to q-learning.",
                "Grundy numbers, minimax, alpha-beta, MCTS, Q-Learn, basic exposure to neural nets.",
                "I learned a wide variety of algorithms to tackle different kinds of games, from searches to heuristics to machine learning. It was extremely fun to implement these algorithms to solve some cool board games in the problem sets - and given that most problems can be formulated as games, this course will likely prove extremely useful in any algorithmic problem I might encounter in the future.",
                "I learned about game theory and computational algorithms that can be used to solve games with different properties. In the first half of the semester, we covered game theory content like the game of Nim, Kayles, grundy numbers, a nash equilibirums. In the second half of the semester, we delve deeper into minimax algorithms and pruning mechanisms (e.g Alpha\/Beta and Principal Variation Search), transposition tables, regret minimization, monte carlo tree search, and reinforcement learning (normal Q and deep Q-learning).",
                "knowledge of monte carlo tree search, reinforcement learning, heuristics based learning, greedy agents, and intro ai\/ml",
                "Exploring the different techniques for creating agents to solve or \"intelligently\" play simple games. Backtracking, A*, dynamic programming, minimax, alpha-beta, scout, monte carlo search, q learning, neural networks, etc.",
                "I learned about computational intelligence for games. Throughout the semester, I learned a lot about how different games are solved using various techniques. I learned also a lot about basic machine learning algorithms and how they apply to games.",
                "cool topics in AI and ML and how they relate to games (MCTS, minimax, Q learning, etc)",
                "I learned all about different AI algorithms and the way they are implemented for different games as well as the different types of games in general.",
                "This course offered a look into a variety of methods of applying computation and algorithms to games. We learned various heuristics and algorithms for popular board games, and assignments consisted of implementing agents to perform well in these games.",
                "Learned about various methods for developing agents to play games.",
                "Knowledge of techniques for designing agents to play games effectively, and the tradeoffs between various techniques",
                "various algorithms and strategies to improve game performance",
                "I felt I learned quite a lot about how to write a program that can play a game intelligently. At the start of the semester, we designed an agent that could play the card game Cribbage better than a greedy agent, which we essentially did by translating our own human knowledge of how to play the game (\"this move is bad, so never take it,\" \"this move can be good in this situation,\" etc.) to computer code. With more complex games, however, this approach becomes difficult -- imagine trying to come up with the set of optimal if-then checks to play chess, for example. \r\n\r\nSo, for the rest of the semester, we learned about different ways to train our agent to play the game. We learned about using Markov decision processes to model games with an element of chance, and using dynamic programming to work backwards from the end of the game to figure out what the best move is probabilistically. We learned about using payoff matrices to model the different outcomes of a game depending on the strategy used by each player, and solving the matrix for an equilibrium strategy using linear programming. We learned about Monte Carlo Tree Search, where the game tree is built asymmetrically, and paths that seem better (in terms of mean reward from going down that path) tend to be favored, while still leaving room to explore paths that haven't been visited much. We also learned a bit about genetic algorithms, Q-learning, and neural networks. The semester was capped off with a final project for a game and algorithm of our own choosing.\r\n\r\nFor the assignments, we were responsible for writing the bulk of the code for the various algorithms used to figure out what the best move in a given position might be. Through these assignments, I improved my coding skills, learned about how to write a model of a game that a computer can understand, and of course also learned what exactly went into the different algorithms used, even if I didn't always know how they were devised. However, Professor Glenn did provide a lot of context about when particular algorithms are used and what problem each of them were created to solve. We also discussed a bit of the math behind solving certain classes of games, and verifying and determining equilibria for matrices.\r\n\r\nOverall, I feel that I learned a huge amount of interesting things, and am well-equipped for future learning in the subject.",
                "Monte Carlo Tree Search, Q-Learning + Reinforcement Learning, DP, Linear Programming, Implementing Heuristics, Alpha-Beta Pruning\r\n\r\nHistory of the ways games have been progressively solved",
                "Game theory, equilibrium theory, tree search, machine learning, and their application in games",
                "Game algo",
                "I gained a better understanding of game theory, different ways to solve or approach problems in games using computational intelligence, and a better overview of an interesting and very relevant field of CS.",
                "Python programming, algorithms and theory behind game-playing computer agents"
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "Unfortunately, the lecture notes are quite bad, and I'll explain why. First, they don't have any explanations and are sparse (most information is said in words during the lecture\/recordings). Second, the official notes have literally nothing under the last topic, which would have been nice for deeper understanding and for exams. As for the homework assignments, I definitely wished I had the capability of getting my Q-learning parameters to be fine-tuned. I wished there was a little introduction or some sort of walkthrough for how to use tools that could do that sort of thing. I guess it was just the FOMO of not knowing how to use TensorFlow or open ai gym.",
                "The psets and course content were all very interesting and intuitive. However, some of the psets required a lot of time spent essentially guessing and checking numbers and parameters, which was not very engaging or interesting",
                "strength: Algorithms are exceptionally well explained in class. If you go to classes, it is impossible that you don't know how to do the programming assignments. weakness: parameter tuning can be painful sometimes",
                "No weaknesses to note. Structure of course and all assignments were fair.",
                "I thought that the lectures could be a little slow at some points and attendance was truly awful because of recordings, I felt pretty bad for Glenn on this front it's nice of him to post but people really abuse it. I thought that the assignments were great. It could have been nice to also have some supplemental assignments that reinforced a more theoretical understanding of the topics, more like what is on the exams.",
                "This was a fun CS elective! Psets are only every other week and are pretty interesting (...you basically write strategies to win games), and lecture is not bad. It's clear that Glenn enjoys teaching this material",
                "Great course and amazing programming assignments that actually improved understanding of algorithms from class, very fair exams that were challenging but not impossible, overall great course.",
                "The material taught in lecture is hard to follow and the course could really use some clearer notes and a more formal textbook. If you don't get the material immediately it's almost impossible to read back the notes and book to understand what's going on. The homework definitely taught the concepts well, but note that the homework taught the concepts not tested whether you understood the concepts. When starting a homework I almost never had any idea what was going on and it would take a long time just to figure out how to start.",
                "This might be dumb, but if the lectures weren't recorded, more people would show up.",
                "Professor is very passionate about the subject, and the psets are relatively fun and very manageable. The topics are interesting, but lectures can sometimes feel a bit slow.",
                "Strengths: 1. Glenn is a fantastic professor, who delivers enjoyable lectures and crafts doable yet interesting problem sets. 2. The course material is also super interesting from an algorithmic point of view, covering some relatively new, highly influential algorithms (e.g. Monte Carlo Tree Search) that have paved the way for recent breakthroughs in CI for games. 3. Grading is pretty evenly split over psets, final project and exams. Weaknesses: Could get boring if the material isn't your thing, but fantastic class otherwise.",
                "The problem sets are fantastic for learning the concepts, and when I was always satisfied when I finished them. We created computer agents to play Cribbage, Shut the Box, Blotto, Kalah, and QFL using different algorithms. However, a weakness of the class is the lectures. They are quite disorganized and it is hard to tell what we should focus on. A lot of times, it felt like Prof. Glenn was simply just following an arbitrary train of thought and talking to himself. Furthermore, the midterms did not really match what was emphasized in class. For each exam, I had to practically learn content just for the exam since we didn't really spend time on those concepts in class.",
                "Strengths: The psets teach you a lot about algorithms. \r\n\r\nWeaknesses: Lectures aren't too interesting and have a tendency to stray off subject.",
                "The PSETs are annoying - they end up involving a lot of banging your head against a wall wondering why your code that looks fine isn't performing well. So then you look on Ed for help and see helpful responses like \"I didn't try that hard to optimize my hyperparameters\". It ends up being a lot of frustrating tuning and asking for help.",
                "This is one of my favorite classes I've taken at Yale. I think that I've learned a lot from it and it was really enjoyable. The one weakness of the class would be the arduous testing that some of the assignments take just because they take such a long time to execute.",
                "Strengths: the way the course is organized (the grading scheme) allows for it to not be as stressful as other CPSC courses.\r\nWeaknesses: the problem sets (the majority of the grade in this course) are not fulfilling and often involve hours of tuning hyperparameters rather than coding. Personally it was not my cup of tea, but the concepts were interesting nonetheless. another weakness was that the professor's notes were hard to follow, and weren't in any slide format that allowed you to take notes easily and compartmentalize the information.",
                "Strengths: lectures are recorded, psets are effective in reinforcing what we learned in class\r\nWeaknesses: felt like we didn't go in-depth on some topics",
                "I think the psets were challenging and did a good job of teaching the content. I think in general if there were more ways to unify the pset workload and the midterms that would be best. Perhaps also doing psets that build on each other could be interesting.",
                "The content of this course is very interesting. Much of the class felt very fun. I think perhaps more emphasis could be placed on comparing and contrasting computational approaches to games. Much of both exams involved comparing approaches, and each assignment only focused on optimizing a single approach.",
                "Very interesting course, well paced.",
                "Strength: content was presented in an interesting manner and problem sets were designed well with student learning in mind. Weaknesses: Class notes were pretty messy and hard to follow along at points",
                "very interesting material and psets",
                "Strengths are that you learn by doing; rather than just being explained how an algorithm works, you also have to implement it in code yourself. The starter code provided also helps with understanding how one would even begin to go about writing a model of a game in code, which is not something I knew how to do prior to taking the course. By the end of it, however, I was able to code a representation of the game of checkers, and an algorithm for an agent to play it. Another strength is that the lectures provide helpful contextual understanding, so you don't feel like you're writing code that has no meaning to you. It also helps that the subject matter is actually fun. Some days, we would spent part of class playing an interesting game, and then think about how to model it and write a good algorithm to play it. \r\n\r\nIn my mind, the course doesn't have many weaknesses. I do think it's a bit excessive to have five regular programming assignments, two midterms, and a final project, but it's not too bad if you actually enjoy what you're doing, which I did.",
                "I really liked the introductions to games - when Prof. Glenn would show us a new game and play it.",
                "The class is very interesting and well organized. The techniques are also helpful both inside and outside the domain of games. The homework assignments are fun to do and relatively not very difficult.",
                "Lecture should be more fun",
                "My main feedback would be about improving the infrastructure of the course: Professor Glenn was great, but clearly overworked and could have benefitted from more teaching staff to help himI think this would also improve the general quality of the course. Something that is probably unavoidable is how frustrating testing some of the psets was: they took a very long time to run and didn't give a lot of feedback for debugging. My main feedback on the lectures would be that, for each topic of games that we discussed, it would be really helpful to have a recap of the different strategies or approaches that we went over, just for purposes of mentally mapping out the course better.",
                "Strengths: Glenn is a great lecturer, material is fun, psets not too hard\r\n\r\nWeaknesses: Maybe this is normal for more advanced CS classes but he just put the assignments up on Canvas\/Ed and never explicitly mentioned them in class (although it was sometimes clear where in the notes we'd find the most help). They were all pretty complicated assignments so a Q&A in class at the start of each one would've been nice."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "The last problem set was quite difficult for silly reasons (fine-tuning a few numbers essentially), but the rest of the problem sets were interesting and reasonable in difficulty\/workload. Definitely recommend it, but don't expect this class to be a gut, make sure you have at least 8-12 hours to dedicate to the problem sets in the course.",
                "Yes, the content is very applicable and interesting, both from technical code implementation and strategic thinking standpoints",
                "To start with, I am a student who's trying to minimize my workload. Although this class has slightly more workload than the other courses I've taken, I'm very glad I am taking this course because I am learning interesting topics and doing interesting programming assignments. So I will definitely recommend this course!",
                "Yes, the skills learned are good skills to apply outside of the game context as well.",
                "Yes, it's an interesting, well-taught, relatively low work CS elective. Glenn cares about running good courses and you will definitely learn something in this class. I think it is one of the better AI classes in the department because it has a clear goal, rather than something like CS 470 which seems a bit purposeless.",
                "Yes! It's a fun CS elective, psets are interesting and only every other week",
                "Yes, Prof. Glenn is an enthusiastic professor who seems to really enjoy the content that he teaches, and the programming assignments are relevant and allow you to actually implement algos in application and see your performance. Chill course and interesting work.",
                "I would only recommend this course if you're a very good programmer or have background knowledge in discrete math, stats, game theory, or AI. If you've just taken 223 and have no other knowledge it's pretty hard to grasp what's going on.",
                "I would softly recommend it, if the subject matter is interesting.",
                "Yes, a good broad introduction to various AI techniques from a games perspective. Very cool topics and not that much work.",
                "If computational intelligence and AI is something you're interested in, and you're interested in learning about a few really cool and influential algorithms, then definitely. The workload is manageable with psets only every two weeks, but you do get a lot out of this course nevertheless.",
                "I think so. Although I wouldn't actively recommend this course to others, if you are already interested in the course, you should probably take it. It is probably the best course for the intersection between CS and Econ is you are a CSEC major (I also took ECON 433, and I would avoid that course). The material covered is interesting even though the lectures themselves do a poor job of making the material exciting. However, I was still able to get a broad overview of games and how computers are able to \"solve\" them.",
                "Yes, if you're a CS\/econ major.",
                "Yes I would absolutely recommend this course to another student. It was one of my favorite classes here and Professor Glenn is a really nice and interesting professor.",
                "The kind of student I would recommend this course to is someone who is looking for a CS course that is going to challenge them intellectually but won't take up too much of their time in terms of homework (psets). Someone who needs another CS elective but doesn't want another CS elective negatively affecting their headspace (as much as 323 does, for example).",
                "yea the topics are really cool and it's a manageable CS elective if your other classes are heavy on work",
                "If you are looking for a CS elective, I think this is a good choice. The content is comprehensible and the psets are stimulating. Make sure you keep up with the content so you don't have to cram for the midterms.",
                "Yes, it's a decently fun CS elective with not too much work.",
                "Yes, I would recommend this course to anyone interested in CS or games. It was a lot of fun.",
                "I'd highly recommend his course, although it was definitely harder than I expected going in.",
                "I would recommend, overall a fun class and a balanced workload",
                "Would recommend if you are interested in how AI game bots work or just want an interesting CS elective in general.",
                "Yes, learned a lot of cool things.",
                "I would, on a few conditions. Mainly, the student should actually be passionate about games. Plenty of people like playing games, but playing games casually versus actually thinking about different strategies to play the game well, and attaining a deep understanding of the game's rules, are two different things. If you don't genuinely enjoy thinking about games, then this course may be boring to you. \r\n\r\nThe student should also respect the discrete math requirement or have some degree of comfort with combinatorial mathematics, since there is some of that in the course. It's possible to do the assignments without fully understanding the math behind some of the algorithms, but it will hurt your learning a bit if any time you see math, it tends to go over your head.\r\n\r\nThe student should also be comfortable doing a lot of independent coding in Python. The TAs are very helpful, but you'll generally need to be able to recall from lecture how an algorithm worked, and then write out the algorithm yourself. \r\n\r\nAs a final note, the expected workload for this course probably varies a lot from person to person, and even for me individually, as the time I spent working on the assignments ranged from 6 hours to 25. In general, you can probably expect to need to put in around 10 hours per assignment, if things go smoothly enough and you don't spend a lot of extra time making relatively minor improvements to your code (which I sometimes did when I had time).",
                "My initial intention for taking this class was to learn more about games and use strategies specific to the game to win. However, throughout the course, what you'll learn is that the strategies are not specific to the game; instead, you learn a lot of different mathematical and computational strategies applied to a large scale of games. It was interesting to learn about - lectures can be a little slow at times - however, I can definitely say that I walked away from this course knowing the psets really well and overall Prof. Glenn is still clear and makes sure that his students succeed in this class.",
                "Yes to anyone interested in games. There are a lot of games introduced in this class and a lot of techniques to solve them. Its definitely fun to s implement the strategies and see the improvement in performance.",
                "Yes",
                "Yes, but be prepared to spend a while trying to understand the material or on psets.",
                "Yes! Really fun CS elective, especially if you're into games. Professor Glenn loves games and is really charismatic in lectures so they were a joy to go to. The reinforcement learning unit will be a bit of a rehash if you've taken machine learning (S&DS 365) before or concurrently. Assignments aren't too hard, just make sure to go to office hours if you're stuck, because there isn't any clear guidance from class on how to approach them. (Ed Discussion is also your friend - Glenn and the staff are great about answering questions there.) Beware the exams though, they were TOUGH but only accounted for 10% of the grade each (2 total) so it's certainly possible to do well in the class without acing them."
            ]
        }
    ],
    "extras": {
        "title": "CPSC 474 01\/CPSC 574 01 - Comp Intelligence for Games"
    }
}