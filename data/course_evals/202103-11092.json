{
    "crn_code": "11092",
    "season": "202103",
    "enrollment": {
        "enrolled": 125,
        "responses": 101,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                2,
                7,
                21,
                31,
                25
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                10,
                16,
                27,
                23,
                10
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                8,
                11,
                17,
                36,
                14
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                12,
                21,
                20,
                22,
                11
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                3,
                8,
                42,
                35
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                1,
                5,
                20,
                61
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "Coding in C, data structures, algorithms and their runtimes, and how to spend 30 hours on a single project",
                "Programming in C, data structures, algorithms, and exposure to what coding in a software setting might look like.",
                "I learned about different data structures and how best to employ them for different purposes based on their running times.",
                "I learned how to program in C and create data structures.",
                "VALGRIND ERRORS. HOW TO USE GDB. HOW TO SPEND 40 HOURS DEBUGGING. I also do think I learned a ton about how pointers and computer-allocated memory works. Some of the fundamentals of the data structures we examined were also interesting. Overall though, I felt like there was a lot of needless emphasis on learning to use C in very specific, annoying ways as opposed to learning data structures.",
                "I learned a lot of data structures and algorithms and enormously improved my ability to program and problem solve in C. I also learned how to analyze programs and attempt to analyze run time complexity.",
                "Dynamic Programming in C, data structures, efficient programming, memory allocation, etc",
                "Data structures, procedural programming, programming in C, navigation of the standard UNIX shell, general practice for practical programming, etc. You will learn a lot about programming.",
                "I learned about C programming and how to implement various data structures using the language.",
                "Data structures is trial by fire",
                "I developed C programming skills while also learning about the different data structures in computer science.",
                "learned about data structures and different implementation techniques through interesting problem sets",
                "I learned how to code in c, I learned algorithms, and I learned good programming practices.",
                "I actually did learn about data structures through this course, and I feel like I got better at programming, which was a goal of the course for me. I must say I was pleasantly surprised by how much I liked the structure of the course.  I appreciate the assignment of just a large programming project to implement this or that (w\/ specifications) and a test suite.  Not completely sure, but I expect that this better mimics a \"real-world\" situation, and it was great for putting a lot of pieces together, in terms of how one would apply  [different] data structures for a given implementation of some application.",
                "I learned fundamentals of programming in C as well as concepts and implementations of data structures such as binary trees, hash tables, linked lists, etc.",
                "I learned about a wide variety of data structures and the different ways they can be used to perform common computer functions (e.g. find the nearest location of a certain amenity, play computer games, spellcheck, etc.).",
                "Introduced me to Data structures and how to implement them, strengthened my C programming, and generally aided my practical skills in programming",
                "Lots of really interesting data structures! On a high level, it was all really informative, even if I don't think I'll be building them myself in the future.",
                "Data structures and algorithms as the coursename suggests. Had lots of opportunities to practice implementing these concepts and developing deeper understandings.",
                "I learned the abstract and how to code various data structures and how to debug my own programs better. I feel comfortable coding in C now.",
                "How to program in a low-level programming language like C, data structures, such as linked-lists, maps, trees, graphs, general programming techniques.",
                "We learn (as the course name suggests) many different types of data structures (hash tables, linked lists, queues, stacks, trees). A LOT",
                "Data Structures and C. how to work 30 hours on a pset.",
                "I learned how to use the language of C and debug various errors. I also learned many different data structures such as hash-tables, linked-lists, min \/ max heaps, quad trees, red black trees, and binary search trees.",
                "Data structures, C, valgrind, memory management and debugging, pointers",
                "I learned about data structures in C, and how to use these structures to execute certain functions in an efficient manner. \r\n\r\nAlso learned about debugging and valgrind-ing, and overall how to be a better coder.",
                "I learned about data structures and how to program in C.",
                "solid knowledge of data structures and programming in c",
                "I learned how to use Data Structures to create more efficient and organized code.",
                "Data structures",
                "I developed a greater level of skill with the C programming language, understanding and implementing data structures, as well as thinking in terms of asymptotic running times.",
                "C programming, data structures, memory allocation, and other related aspects of Computer Science. The major data structures we covered were arrays, linked lists, stacks, queues (and priority-queues), maps (e.g. hash tables, sets), binary search trees, balanced BSTs (e.g. AVL trees, red-black trees), quad-trees, heaps, and graphs. Exams and problem sets required attention to asymptotic notation (e.g. Big-Oh, Big-Omega) for the running time of programs.",
                "Information about different main data structures - lists, queues, hash tables, trees, graphs, etc. Gained some practice thinking about amortized and asymptotic runtime complexity.",
                "You learn data structures and how to program in C. You also pick up nitty-gritty details of how memory works and how to manage it. Honestly, if you know some python and you're just trying to learn how to program i'd recommend doing leetcode over this class.",
                "I learned about various data structures: arrays, linked lists, hash tables, graphs, etc. I have a much better grasp on C and debugging. I learned how to use valgrind and GCC.",
                "learned how to program and c and i feel like a have a solid grasp of programming and data structures in general now",
                "Coding in C, edge casing, using valgrind and CDB, pointers, pointers, and more pointers",
                "I learned about different data structured that are used in computer science across coding languages.",
                "This course taught me a lot about computer science, particularly with different structures and the memory that each structure takes.",
                "This course serves as a rigorous introduction to the coding industry where while learning the theory and content was necessary, writing solid industry-standard code was what I felt I took away most from this class.",
                "Programming in C",
                "We learned how to program in C, techniques for using the procedural language, and how to employ data structures such as lists, hashtables, and trees to create applications.",
                "C, in all its glorious antiquity. Stacks, like the seven-story dark den of sadness in Sterling. Queues, what my British friend calls lines. Trees, like the ones outside my window. Hash tables, like hash browns, except not edible, and not related at all except for the mutual word hash.",
                "I learned many programming and debugging skills, different data structures such as lists, graphs, trees, etc, as well as how to implement them.",
                "Much better understanding of C programming language, algorithm design, and problem solving skills.",
                "C coding and data structure",
                "This course did two things really well: It taught me a lot of different data structures, how to implement them in C, and how to think about them, and it taught me some C programming along the way. The data structures covered included binary trees (simple, AVL, red\/black), quadtrees, heaps, queues, stacks, hashtables, graphs, and tries. With each data structure, the course covered parts of the implementations of the various operations required to make the data structure useful, and the rest was learned through coding the problem set solution.",
                "Data structures, abstract data types, programming in C.",
                "Data structures, C programming",
                "I learned so much about C and various basic data structures (linked lists, hash tables, graphs, etc), as well as the basics of debugging and testing.",
                "The foundations of a number of data structures, including arrays, linked lists, hash tables, maps, binary search trees, pointers, heaps, queues, stacks, and others. You also develop a solid understanding of programming in C.",
                "c ++",
                "I learned how to choose\/apply data structures to solve problems."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "The test cases for our programs and feedback are always very clear. Usually, the instructions are clear and accurate. One thing I wish was different was that office hours would be more accessible and efficient. Honestly I've found myself in many situations where going to office hours seeking help would take longer than figuring things out on my own. I wish I had more of a chance to interact with the TA's and others, but for the most part this class seemed to consist almost solely of myself staring at my computer screen.",
                "The strength of this class is that each individual data structure is presented fairly enough. The weaknesses are everything else. \r\nFirst of all, like all other CS classes at this school, you are pretty much left on your own to learn all of the coding. The language (in this case C) is not really taught in class, only the theoretical data structures, and while some snippets of code do show up in lecture, there is no real guidance to help do it on your own. Secondly, There is absolutely no constructive feedback in the course. If you get something wrong, it is on you to figure out why exactly the test failed. Thirdly, the workload is massive compared to other classes. 20 hours on a single problem set is too much by any standard. Fourthly, the grading is considerably too harsh. I am pretty understanding about getting a poor grade, but if the tests for the homework have a clause that explicitly states \"you well get 0 on this section even if you get everything right as long as you did poorly enough on a different section\", that is just unreasonable. Finally, the topics of the lectures themselves are not well connected. There is no review where we can put all the data structures side by side and examine each of there merits in comparison to each other. That should be the big culmination of the class, and yet somehow it is completely omitted, left to the students to muddle through on their own.",
                "This course is extremely challenging but rewarding at the same time. The workload is very high and the tests are difficult but the skill and knowledge earned are also worth the effort.",
                "Strengths:\r\n\r\nI did feel like a learned a good amount about pointers, memory allocation, and dusted off my debugging skills. I also made a really close group of friends in the course (trauma-bonding, anyone?) which made it much more fun to do the otherwise annoyingly awful problemsets.\r\n\r\nWeaknesses: \r\n\r\nLecturing was particularly bad--I'm not exaggerating when I say more than half the class by the third week had stopped showing up to in-person lectures, or when I say that by the sixth week the lecture hall was almost entirely empty. \r\n\r\nExams felt like they didn't really teach you much, psets not only took a lot of time but seemed oftentimes frustrating for no reason but to be frustrating: for example, certain clauses in the problem spec that seemed there only to make you tear your hair out as opposed to learning the algorithm \/ data structure better (aka why do we have to do a million frees at every step of our program!).",
                "I think that the class was quite organized. I wasn't too big of a fan of the checkpoint grading system.",
                "The lectures were kinda useless.",
                "The course takes a *highly* hands-on, figure-it-out-yourself approach in everything from the homework projects to setting up your computer at the beginning of the semester. I found this was extremely, extremely, effective for learning and retention, and also taught me practical things I would not have learned otherwise by practicing things in isolation. However, you have to be motivated and resilient to grind through the homework, and be prepared to figure out a lot of C, unix, debuggers, IDEs on your own through google and stack unless you really have a LOT of experience.\r\n\r\nThe lectures, on the other hand, were usually long-winded. Professor Glenn's lectures are just a literal verbalization of his train of thought, and your train of thought has to match his exactly for everything to make sense - meaning, you have to be at 100% focus throughout a lecture to understand it. This is rather hard to do unless you were already prepared for the lecture in advance through readings (thus defeating the purpose).",
                "I enjoyed the problem sets, and the office hours were so helpful. Shout out to the 223 ULAs. I will say that the lectures themselves were a bit dull.",
                "Strengths: Challenging class with problem sets that solidify our understanding of the data structures taught in the course. Weaknesses: some of the problem sets were very challenging and getting help in office hours was not beneficial sometimes as there could be a long waiting list.",
                "strengths were definitely the problem sets that were challenging but rewarding",
                "I liked the lectures, Prof. Glenn is very thorough, but sometimes the psets would be hard to figure out without ULA or other help.",
                "I think having more in-person guided additional sessions in the beginning of the year would've lessened the learning curve, since I never used the zoo\/ needed to be refreshed in c programming.",
                "I want office hours in the middle of the night!!!!! (jk, but could you?)",
                "I think that the content of the course is very good and very informative. That being said, I think that the course was very poorly executed. Lectures were often hard to follow, which was evidenced by the fact that 80% of students chose to not attend lectures in person. Exams and homeworks also felt like they were aimed at tripping up students instead of teaching the concepts, which led to one of the homeworks having a 57% average score (this also led to what I estimate to be nearly a quarter of the class dropping the course by midterm). Office hours were useful, but only if you were able to talk to a TF, which could often take up to two hours.",
                "This course taught me a ton about the different data structures behind many of the computer programs I use daily and take for granted. It is the most applicable computer science course I have taken thus far, so I am really glad I took it. The only weakness I can think of is that it is a LOT of work. However, the ULA's are definitely a strength in this course. They were super helpful and willing to help with any problem no matter how big or small.",
                "I think the course was generally well taught and provided a good amount of challenge every week. I wish office hours were easier to get a TA at as I often felt trapped when I couldnt get help. The class also didnt feel very personalized, I understand its a lecture but when our grades are based on private tests for assignments where we just have to guess what the content will be, it makes it difficult to feel like I get better with every assignment.",
                "The exams were super hard, but it was also my first CS class at Yale.",
                "Strengths: Very interesting problem sets and everything is taught in detail.\r\nWeaknesses: It would have been better if the instructions\/requirements on problem sets were a bit more clearer and if we had the opportunity to learn from what we did wrong to fail some private tests. Only getting a list of the private tests we failed without knowing why we exactly did is not very helpful to learn from.",
                "The lectures themselves were so dry and Prof. Glenn's notes are really disorganized, so it's difficult to understand how much you are expected to know about a topic when preparing for exams especially. Running times often are half-hazardly explained, and I didn't feel like Prof. Glenn was accessible for questions. The saving grace of the class are the ULA's, who often even put in extra hours to help us.",
                "Strengths: The course was extremely organized, requirements were very explicitly spelled out, less emphasis on tests and more on projects. Weaknesses: Grading sometimes took time, workload was high at times.",
                "Strengths: the student support (s\/o to the ULAs) is PHENOMENAL. Prof. Glenn and Brunstad are also eager to help in any way possible. The resources are there; you just need to go for them. You also learn a lot, especially if you started CS at Yale and worked you way up\r\n\r\nWeaknesses: the tests aren't very representative of the projects you do, although the practice tests give you a good idea of what's on the test",
                "Strengths: Well organized course. Good TAs (usually). You learn so, so, so, so much. \r\n\r\nWeaknesses: At least with Glenn, this class is so stressful and time consuming. Especially if you're not too familiar with a language like C. Be ready to spend 30 hours on a pset and still fail a bunch of private tests (then hopefully next time you'll start edge casing).",
                "Strengths were the knowledgable ULAs who helped understand and interpret the various errors that we may encounter. However, it would be more helpful if there were more ULAs because often times the wait would be 2+ hours long so you could logistically only be seen once. Feedback for psets could also be improved. This would tell students and help them understand why they did not earn the full number of points so they could avoid making the same mistakes later.",
                "Strength: you actually learn a lot\r\nWeakness: Glenn is the most boring lecturer ever.",
                "I think the course could be hugely improved by feeling more personable and finding a better lecturer.",
                "It felt like much of the time, the lectures were catered to an audience of students that already had ample programming experience. It was sometimes difficult to follow the material with the lectures alone. Office hours often took three hours for a five-minute question, which made it even more difficult to get problem sets done on time. However, Professor Glenn is very obliging and clearly wants his students to succeed.",
                "Weaknesses:\r\nThis class made me question at multiple points through the semester whether majoring in CS was worth it, but that was because of having Glenn as a professor and how he made me feel and NOT because of the course content, which I actually found really interesting (a strength of the course). \r\nto elaborate:\r\nLecture style is downright bad, no good, very terrible, and lectures are poorly structured. \r\nGlenn goes on tangents, making a poorly organized lecture even harder to follow. A lot of the time I just wish there had been a clearer outline of what was being explained to us because it quickly got overwhelming. \r\nAssigns long and difficult problem sets to be due a few days after returning from a break\r\nGenuinely does not seem to care\/have a sense of concern about the students in his class, specifically the ones that don't just \"get\" CS like he does. It just seems like he enjoys knowing that so many students have spent literally tens of hours droning on psets only to get totally destroyed by the autograder. \r\nIs clearly aware that students do not like his class because he frequently remarks about the strictly decreasing number of students attending his lecture, but still unwilling to admit that he is the problem. Also has a cold demeanor that makes him often unapproachable. \r\n\r\nStrengths:\r\nRob is an absolute GOAT. His review sessions are always clear and super helpful, unlike lectures. Also, the ULAs are fantastic!! They are incredibly patient and helpful and saviors. Go to office hours!!",
                "Too much workload",
                "It assumes previous programming knowledge and can be a steep learning curve for people who have not worked with C or used a bash terminal before. The ULAs were amazing and always so supportive. The assignments were sometimes unnecessarily tedious.",
                "The major strength of this course is the homework assignments. There were 6 in this iteration of CS 223, and each of them was challenging (some requiring 20+ hours of work), but the challenge was rewarding in terms of intellectual growth and learning. The major weakness of this course is that the class and exams often feel entirely disconnected from the homework assignments. I spent most of my time in this class working on the homework assignments, and, taking the exams, I felt like I had learned nothing and was guessing on many questions (even though I did fine on the exams in the end). It would also be beneficial to talk about common edge cases either (1) once, at the beginning of the course or (2) for each of the homework assignments.",
                "Some weaknesses: practice problems were not very representative of what the test would look like, would have appreciated more prep material for exams, instructions for some problem sets were rather vague",
                "The lectures are very clear but terribly slow, a major strength is that they are recorded. If this course wasn't recorded I don't think I'd take it.",
                "Strengths: This course is well organized. Professor Glenn clearly puts a lot of effort into his lectures. It was easy to access assignments, the grading criteria was easy to understand, and the assignments were rigorous. Weaknesses: I felt like there was a disconnect at times between exam reviews and exams themselves. I wish there was more personalized feedback from the course.",
                "Strengths: Requires a lot of independence and commitment, teaches about pointers in great depth, abundant office hours\r\nWeaknesses: Difficulty of the course varies greatly by the professor teaching it, course website is outdated, lectures are not interesting unless relevant to the homework",
                "The concepts are foundational for a lot of future work in computer science, so the course does a good job of giving a wide overview. Unfortunately, there is a bit of a learning code because the class is taught using C, which students are expected to learn while learning the larger concepts.",
                "This course was strong in its content and the quantity of material covered, but it could be improved in the method of teaching.",
                "The strengths of the course were the organization of the course and the staff\/teaching assistants working hard to answer all questions and problems. There werent many weaknesses apart from the grading system in the class. The curve is set based on the median, meaning that 50% of the class was guaranteed to get above an A- and the other below a B+. This is a less than ideal grading system since it serves to promote unnecessary competition among students.",
                "Strengths: Lots of content, learn a lot of useful techniques\r\n\r\nWeaknesses: Lecturers are long and not particularly interesting, assignments are very tedious and graded unnecessarily harshly, and make up 70% of the grade.",
                "The course is structured well and the psets are helpful to understand the material. The notes posted are also helpful. The wait for office hour can be really long though.",
                "Strengths: problem sets were reasonable and very engaging, professor Glenn clearly knew his material, class was well organized, midterms were reasonable \r\n\r\nWeaknesses: occasionally lectures felt a little bit dry (especially proving run times of certain algorithms)",
                "Strengths: programming assignments, recorded lectures, TF\r\nWeakness: I learned more by watching YouTube videos",
                "Good!",
                "This course taught data structures and C very well, but did not, in my opinion, teach time complexity analysis as well as would have been desirable, given how heavily it featured on exams. As for the specifics: Problem sets are assigned once every two weeks, and that works out nicely, because they took me roughly 20 hrs each, so spaced out, it's a manageable 10 hrs\/week. Lectures cover large parts of the solution, and stub implementations are often provided by the instructor, also helping with the process. \r\n\r\nLectures were excellent, with the instructor making good use of the tablet\/projector setup and covering material that was very relevant to and in sync with each problem set. \r\n\r\nTime complexity analysis was not covered extensively in class, but tested heavily in midterms, meaning a lot of studying would need to be done independently to score high marks on exams.\r\n\r\nPerhaps more community-building events, in the same spirit as what CS50 put on, but without all the fanfare, would help students meet each other. I felt like I didn't meet anyone through this class, and the restrictions on collaborative work made it hard to get to know other students in the department. Something to boost the amount of interaction students have with each other regarding this course would be great.",
                "This course was fantastic - very well organized and a good level of challenging",
                "The lectures were self-contained and directly helped with solving the problem set. Ed discussions were always very active and provided a venue to freely ask any questions about the course material.",
                "quick speed but i could understand there are many materials needed to be covered",
                "Very frequent office hours; wish turn around on psets was faster"
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "Yeah if you're a CS major. It's just a lot of work",
                "Probably, the concepts taught in this class are useful.",
                "If you can avoid it at all, do. I took this class because I wanted to take an elective that required it as a prerequisite, thinking it couldn't possibly be as bad as they say. Trust me, it is. This class is a mockery of effective education, and a disappointment to the university.",
                "I would recommend this course if it is required for your major or an option for your major. I wouldn't take this course just for the sake of it, however.",
                "I would--but only if you're a CS major. Also, Glenn's class in particular is known as the one that will absolutely wreck you.",
                "Yes, I would definitely recommend this course to another student. I think that even though it is hard, it is extremely rewarding if you put in the work.",
                "No",
                "Yes, its a great class to learn about programming and data structures.",
                "Definitely only if you are committed to learning CS. If you want to learn it teaches you a lot but otherwise its a lot more than 1 credit of work. Also, I took this course first semester with very little prior programming experience (only mathematics). In retrospect there's no reason to do this so don't feel rushed to take this class if you're underprepared",
                "I ended up taking the class Credit\/D\/Fail, but even so, I would recommend it. I feel like it helps you with critical thinking and problem solving skills. But, if you do take it, definitely start the problem sets early. Like right when they come out. The office hours leading up to the due date tend to get really busy.",
                "I would recommend this to another student if they are planning to major in Computer Science. If not majoring in computer science, I would still recommend it if the student has already programming experience in C and if they want a super challenging class.",
                "I would recommend this course to another student that has some c programming background and would like to learn algorithms.",
                "It'll be a lot of debugging and hard work, but it definitely will help you with a CS career if you choose to pursue one.",
                "I mean, I'm not a CS major, and I largely took this course to get better at programming \/ for a possible job. I imagine many other reviews may say something akin to \"not if you're not a CS major\", and the course is certainly a step up from 201 in terms of workload. I spent around 30 - 50 hours in front of a screen per week for the psets, but not every second of that was spent laser focused on the pset.  I thought the course brought me closer to my goals, so I have no complaints.  I think the same goes for you: if you think the course aligns with your goals, take it (just try to get an idea of what you're getting yourself into, and plan accordingly).",
                "I think that you will learn a lot taking this course, but might not have a good time or get a good grade. I'm not sure if my experience is specific to the professor or is relevant to the course as a whole, but the grading, assignments, and exams seemed aimed at creating a strong curve by tripping up students as opposed to testing understanding. Homeworks were arduous and ended up taking me between 30 and 40 hours over two weeks (a homework was even assigned during reading period after the 'final' exam). It was also difficult to learn from mistakes since the majority of grading was done based on private test cases that could not be viewed even after everything was finished (on the subject of tripping students up, a large portion of every homework grade was based on handling bad inputs as opposed to the data structure implementation that should have been the focus). I hope that the experience is different with other professors, but I was very disappointed with the course.",
                "I would definitely recommend this course to another student, as it really opened my eyes to the different data structures used in the real world. However, they should be prepared to put in a LOT of work. It usually isn't too bad if they start the assignments early, but I definitely had some late nights and stressful days.",
                "I think its useful and fun to think about the content, but I dont know if the workload balances out the fact that I like the material. Im not a CS major so I found it difficult to justify taking this class for fun when I was tearing my hair out to finish assignments",
                "DO NOT TAKE THIS CLASS WITH GLENN!!!! I thought CS at Yale couldn't get any worse than 201 with Slade, but I was proven wrong!  The pacing of the course was miserable (eg. sometimes we would get an entire month for a single pset worth 15% of our grade, and then we would get 3 weeks for 2 psets and a final that were worth 45% of our grade together). The psets were awful -- each one took forever (talking 25 hours), and you couldn't even get a head start if you wanted to because they were not all released at the start, and because we would have to wait up to a week after the pset was assigned to cover the topics. The general consensus from those who took 223 last semester was that Glenn's version was absolutely a harder, more time-consuming class, which doesn't pay off in what you gain from the class at all. The exams were also ridiculous -- they focused on niche topics which were not covered in the psets and which Glenn skimmed over in class; many of the topics were also NOT covered in the practice exams at all (esp. the final). Absolutely the worst class I've taken at Yale, and has made me rethink CS altogether. Don't take this unless you have to! (also, none of this applies to the ULAs-- they were the one silver lining of the course)",
                "Yes, I would recommend it to anyone looking to understand data structures in detail. Would help if you have some previous experience with C.",
                "Only if you have to take it as part of the CS sequence.",
                "If you are in the CS major, then you have to take it anyways, but don't stress over it. If you have a general CS interest, this course is still extremely valuable, as it teaches really important aspects of CS. Overall, this course is difficult, but very rewarding.",
                "If you enjoy computer science (or it's required), then yes! You definitely learn a lot. However, this class is not joke. Plan to spend 15-20 hours a week on the psets, esp if you're not a coding god",
                "I mean, yes. But make sure your other courses are light. And don't give up! You can do it!",
                "I would recommend taking this class as long as they have a good sense of programming.",
                "Yes if you're into CS and\/or want to major in CS. No if you want to learn CS for fun.",
                "Great professor. Funny. You'll have to learn most of C yourself.",
                "Only if you're CS or a related major that needs it. Otherwise why subject yourself to this haha.",
                "I would recommend this course only if you are pursuing the major\/certificate, or if you plan to apply for a software engineering internship.",
                "Yes, but only because it's really foundational knowledge for anyone interested in a CS career. Just be mentally and emotionally prepared for the time that this class will require of you",
                "If they have sufficient background and are prepared to take on very large problem sets with little to no background about the implementation. This is due to the fact that office hours are often too crowded and for the second half of the class little to no example code is provided so it becomes very difficult to visualize solutions to large problem sets.",
                "If they are good at CS",
                "If you want to learn how to use C, then take this course. Otherwise, not necessary.",
                "[I am a CS major, so I took the class because it is required.] If you are a CS major, you have to take the class, and I'd recommend taking 223 in a semester where you don't have a ton of other high-workload classes (same applies, even more so, for 323). If you are not a CS major or not looking to take higher-level CS classes, there is probably a less intense and more applicable CS class to take.",
                "It is important to know data structures for CS majors and anyone else interested in continuing studying CS. This course is a pre-req for most CS electives and useful for coding interviews. In my opinion, some of the content is a little dry, especially in the beginning of the semester, but once you get to trees and graphs, things get a bit more interesting. The course seems to be harder with Glenn (and a bit disorganized, but he is a nice guy)",
                "Honestly, if you're a CS major then yes. If you aren't then I'd take this course to learn how to program better but I would not continue taking CS core courses. Instead after taking this, I would take electives that interest you.",
                "No",
                "Yes the content is important to know.",
                "Absolutely. The material covered in this course is critical to becoming a computer scientist and learning good programming techniques.",
                "Please do not take this class with Glenn unless you are really looking for a challenge and\/or don't care about your mental sanity. He is a great person and incredibly sharp in the subject, but the workload of his version of the class was incredibly and unnecessarily high. It is no lie that the programming assignments will take you 20+ hours. The two midterms were also obscenely hard and both left me feeling like my grade would never match the time I put into studying for them. I heard that the professor from last semester taught a version of the class that was a lot easier, so I recommend that you take it with him if you are able.",
                "i would recommend this to any student who wants to get better at programming (and ofc all cs majors have to take it)",
                "This class is great for gaining proficiency in a very manual language and learning how the computer stores data, but be prepared to work very very hard.",
                "I wouldnt recommend the class as it is not very interesting. Its required to major in CS, but I dont see any reason besides that to take the class.",
                "I would only recommend this course if the individual taking it has a strong interest in computer science.",
                "I would definitely recommend this course to another student but only if they are very clearly interested in computer science. It is definitely not a course a beginner should begin with although many have managed to succeed with it.",
                "Yes",
                "I would not recommend this course unless you are taking a major where this is a requirement",
                "I would. It's required for the CS major, and despite it's drawbacks, I learned a lot from taking this course, and the things I learned will be very useful in the future.",
                "If you're a CS major, you have to take it. So why are you even reading this? Go look at Coursetable ratings for your other courses.",
                "Yes, this course is required for CS related majors and improves fundamental programming skills.",
                "Absolutely. I became a MUCH better programmer through this class and (as long as you start them very early) the problem sets aren't so bad.",
                "It's really useful.",
                "Absolutely would recommend. For sure. I'm not even a CS major, but I wanted to learn this stuff, and it was really fun. I came out of this course thinking about things differently -- not just things in CS, but all parts of life. Data structures and their different applications and features, and when to use which kinds -- these things are really interesting, and I really enjoyed learning about them. And, if you're a CS major, well, you gotta take it, so yeah, I'd recommend it then, too. The workload is a lot, so don't take it if you're taking a lot of other crazy classes, but definitely try to take it. You'll learn a lot about computers, C, and data structures, and that's fun!",
                "no, much material that was arduous and useless compared to other sections taught by different professor",
                "Yes!",
                "Besides the major requirement, I think this course was extremely useful for building coding skills and a solid understanding of foundational computer science topics. Even though I felt it was one of the more difficult courses I've taken, the course teaches a lot, so I would definitely recommend it to anyone looking to build their computer science skills.",
                "yes, foundation of computer science",
                "Yes - you get a good foundation in c while learning data structures (useful for industry)"
            ]
        }
    ],
    "extras": {
        "title": "CPSC 223 01 - DataStructres&ProgrmmngTechnqs"
    }
}