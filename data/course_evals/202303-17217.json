{
    "crn_code": "17217",
    "season": "202303",
    "enrollment": {
        "enrolled": 20,
        "responses": 12,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                1,
                0,
                0,
                5,
                4
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                0,
                1,
                1,
                4,
                4
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                0,
                0,
                1,
                5,
                4
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                0,
                0,
                1,
                4,
                5
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                0,
                3,
                3,
                4
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                0,
                2,
                6,
                2
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "I developed skills and knowledge on parallel programming techniques that can be applied to code written in C. The learned how to parallelize code using frameworks developed for OpenMP, MPI, and CUDA, which are the 3 major ways that code is parallelized in modern computing.",
                "parallel programming",
                "I learned parallel programming skills that are crucial to my work",
                "I learned the foundations of parallel programming practice and how this is reflected in computer architecture. This includes data and hardware parallelism (incl. foundational computer architecture), how memory is stored\/used on a CPU, OpenMP, MPI techniques and concepts, various parallel algorithms, GPUs, and CUDA.",
                "Gained intuition into programming with respect to the hardware. Learned open mp, mpi, cuda. Had to think about memory access latency, build intuition for compiler optimizations, and learn to benchmark code. This was an excellent class",
                "On the programming side we explored Multithreading with OpenMP, Multiprocessing\/Interprocess communication with MPI, and GPU computing with CUDA. Conceptually, you also explore Pthreads, mutexes, semaphores, computer\/CPU architectures, Amdahl's Law vs. Gustafson's Law, and more.",
                "I learned how to write parallel programs in OpenMP, MPI and CUDA. I also learned how to instrument parallel programs in order to measure their performance. Finally, I learned about the core challenge in parallel programming i.e. the Amdahl's Law.",
                "parallel programming topics and gpu programming with cuda"
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "Heavy workload",
                "I thought the course was great. The strengths are the information and the professor. I think the course should not be changed in any major way - I think it met us where we were in terms of our coding experience and the assignments were challenging without being unreasonable.",
                "The homework sets were somewhat too hard, and I didn't have enough time to prepare for the midterm. Also, the course should consider opportunities for students to form discussion groups",
                "Strengths: Problem sets were very involved and really helped one become familiar with the tools and techniques taught in class. The course structure has been refined over many years of being iterated repeatedly, and hence, the flow of the course material is very natural. Nice balance between theory and building things in a \"ground up\" sense; you learn a decent amount about the hardware, the inner workings of what you implement, how this translates to what comes out in your code.\r\n\r\nWeaknesses: Problem sets tended to feature an excessive amount of computations that often required repeating the same thing over and over again (e.g., tweaking certain settings and comparing the results). Yes, this can be done readily with a for loop or sending jobs in parallel, but the time and attention to detail it took was very time-consuming to say the least, and jobs still often took a long time to run. Also, problems were often a bit vague and open-ended to the point where they became extremely involved just to figure out what was going on.",
                "Only weakness is the slow feedback cycle. A lot of grades werent released until grades were published. The material is well organized and paced considering how dense the course is.",
                "Strengths: Plenty of office hours, relatively small class size, easily accessible cluster Weaknesses: None",
                "Strengths:\r\n\r\nI learned a lot from doing assignments, the midterm exam and the final project.\r\n\r\nWeaknesses: \r\n\r\nI thought that the lectures focused too much on the logistics of Parallel Programming rather than the core algorithmic components. For example, a lot of time was spent in describing how to index a thread (in context of CUDA) which one can be expected to pick up in the assignments, rather than algorithmic components (such as scans, divide and conquer etc).  \r\n\r\nAlso, I wish there was more material in this course.",
                "lectures and assignments were very well structured\/organized"
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "No, it is a heavy course and the material was abstract.",
                "Yes, and I have personally done so. I think the information is very relevant in this course for anyone who does lots of coding analysis. I think that the professor, Andrew Sherman, is very skilled and knowledge on the class content. I think the reservation for the course on the cluster is very helpful and makes doing the assignments very easy. If any student is serious about computation and needs to run code in parallel, this is a great class to take.",
                "I would to anyone who wants to learn about an efficient alternative to traditional serial programming",
                "Most of the people who remained in this course a third the way through were clearly very proficient coders and gifted people with a CS background. The difficulty of the problem sets and the denseness of the course material reflects this. I came in with over a year of systems programming experience (Linux\/Unix shell scripting, raw data processing\/analysis, etc. for my research) and it still took me a huge amount of time to figure out how to do certain things. For me, each problem set (from the time you start writing your first programs to finishing the last touches on your write-up) took 30+ hours, but fortunately, you had over 2-3 weeks between receiving the HWs and their due dates to spread it out. Also, if you actually major in CS (unlike me), then you will probably take more like 20-25+ hours.\r\n\r\nI'd say that the problems both on homeworks and exams require a certain level of CS maturity to catch all of the details and be really careful about making sure that what you do is exactly what is asked of you. I knew people in the class who've scored very well in national coding competitions and still had struggled with some of the debugging and even just figuring out how to solve certain things, which might give you an idea. However, you will become a much more proficient coder after leaving this course; it's just very much a sink or swim thing unless you have a very solid, comprehensive foundation in lower-level programming, which you should be able to get if you major in CS at Yale and have taken all of your core courses. And DO NOT take this course if you cannot commit to the time it takes.",
                "Yes. The skills built in this class make you a much better programmer",
                "Yes. If you enjoyed the coverage of processes, threads, and computer architecture in CPSC 323, then I think this is a good follow up. Note that the class consists of both programming assignments and write ups that require you to collect performance data and explain data trends through your understanding of the computer architecture and the library being used for parallelization (i.e. a lab report). It's a very interesting course on high performance computing, though, and would definitely be useful if you plan to pursue scientific computing in the future. I would say that the problem sets themselves (computing the Mandelbrot set, matrix multiplication algorithms, and others) are not conceptually difficult to understand, however, it takes some time to get used to the different libraries and debugging is a lot more difficult in parallel computing because there are more possible errors (race conditions, deadlock, etc.) and you don't know exactly which thread or process is running into an error, so you can't just use gdb or insert print statements and expect things to make sense. You also need to think about how you're writing your code in a more abstract manner (e.g. optimizing data access patterns to ensure efficient use of cache). Professor Sherman is great and this is one of the few computer science classes where the textbook is extremely helpful and clear. If you have a good understanding of C and are prepared to learn some new C libraries, the workload of this class is manageable, and the exams only test a basic understanding of the topics covered.",
                "I would recommend this course to a student who wants an introductory exposure to parallel programming, but not to someone who knows a bit and wants to learn about the cutting edge stuff.",
                "Yes, very useful introduction to parallel programming libraries.",
                "yes"
            ]
        }
    ],
    "extras": {
        "title": "CPSC 424 01\/CPSC 524 01 - ParallelProgrammingTechniques"
    }
}