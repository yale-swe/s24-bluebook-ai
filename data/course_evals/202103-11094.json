{
    "crn_code": "11094",
    "season": "202103",
    "enrollment": {
        "enrolled": 100,
        "responses": 85,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                0,
                10,
                40,
                19,
                5
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                3,
                12,
                30,
                20,
                8
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                2,
                10,
                21,
                29,
                11
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                4,
                9,
                31,
                19,
                9
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                1,
                8,
                48,
                16,
                0
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                9,
                47,
                17,
                1
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "The first half of the course focused on key object-oriented principles with an emphasis on implementation in Python. We studied objects, classes, class relationships, UML, polymorphism, exceptions, object-relational mappers, event-driven programming, and testing for object-oriented programming. The second half of the course pivoted to object-oriented programming in C++ and design patterns. We also reviewed concurrent programming and code smells in the final week. This course imparted on me a much deeper understanding of Python, which is built entirely upon objects and their relationships. I also learned a bit of C++, which I enjoyed.",
                "I built my skills in object oriented programming and learned some key techniques, design patterns, and vocabulary. Also got some practice with Python.",
                "The type of programming you use in the real world.",
                "Industry applicable programming techniques in a useful programming language",
                "object oriented programming techniques, a bit of C++, a lot of design patterns",
                "I became much, much better at Python. I really noticed this in swe interviews this semester when I would get asked questions about the language--there are so many little tricks that I would have never learned if I hadn't taken this course. You also learn a good deal of C++, although I probably would have learned more if there was a dedicated C++ homework assignment.",
                "learned about python and OOP principles",
                "I became a much more competent python programmer. I feel much more confident about organizing and writing easy to read code.",
                "I learned a lot about OOP concepts as well as working in Python. This class is very practical and teaches a lot of useful skills for working on projects in the real world.",
                "Professor Barron did a great job of teaching Object Oriented programming fundamentals and I really felt like I learned more about the tools I was using on a daily basis and how they function under the hood.",
                "Higher level of comfort with Python",
                "I learned to code OOP designs in Python and a little bit in C++.",
                "This course gave me very practical, real-world knowledge that's important for working in the field.",
                "Object-oriented programming concepts, ideas and practices, more real world programming projects",
                "Learned about a lot of design patterns and some other general object oriented stuff.",
                "To be honest, I've completed the CS major (up to 1-2 electives) and have many years of Python experience, so this class was more about formalizing things I was already familiar with. Definitely a good reminder of the practices\/strategies available to keep code readable, and learned a few tricks in Python I wasn't familiar with.",
                "You get to learn Python and many typical programming techniques like testing, loops, and other important strategies.",
                "Object-oriented programming with Python (and some comparative exposure to Java and C), as well as practical skills like (unit) testing, logging, event-driven\/GUI programming, design patterns and refactoring code smells.",
                "Python and a little bit of C++. Design patterns and how to most efficiently create a working program.",
                "not much",
                "Definitely the basics of object oriented programming and how to think of programming in terms of various grouped data and behaviors.",
                "Python programming, design patterns, use cases of object oriented programming",
                "I know how to write program in a modular, oop way.",
                "An overview of OOP, design patterns, refactoring techniques (code smells), UML diagrams, testing, how to make a GUI, a bit about concurrency, Git",
                "I learned about a lot of fundamental OOP principles like inheritance and abstraction, testing, UML diagrams, and design patterns. This course helps teach you how to better structure your code in a class-oriented manner.",
                "A much stronger understanding of OOP concepts",
                "Object oriented programming, design patterns, testing, GUIs, SQL databases, python\/cpp",
                "Lots of object-oriented programming concepts like how to create classes, different types of relationships (like inheritance, composition, etc.), how to write exceptions and do logging, how to write unit tests, and different design patterns (template, strategy, and several others)",
                "General patterns of object oriented programming along with specifics for Python",
                "I learned a lot of practical stuff w\/r\/t Python coding practices, code smells, documentation, and testing, etc. OOP I learned to a lesser extent although the aside into C++ was interesting.",
                "Object oriented programming techniques, specifically design patterns.",
                "I obtained skills in object-oriented programming, which I think made me a better programmer.",
                "I learned a lot about object oriented programming techniques, and developed my coding skills in python.",
                "This class teaches you a lot of very practical skills and get you comfortable writing code in Python (and somewhat in C++).",
                "Ability to design object-oriented systems, common design patterns, unit testing, language comparison between Python, C++ and Java, coding in a pair.",
                "Object-oriented design concepts, design patterns, how to write and run tests and how to use testing to guide development",
                "Despite knowing Python quite well before, I feel like this class still help me develop a better understanding of the language and general guidelines to write cleaner, more maintainable code.",
                "I learned the principles of object-oriented programming, gaining experience in both Python and C++.",
                "I did end up learning a fair amount about Python, as well as OOP best coding practices.",
                "I learned about testing, design patterns, and code smells",
                "I gained many skills and much knowledge about object-oriented programming. I've been coding in Python for many years, but have never learned many of the more nuanced and complex functions of Python (and other object-oriented programming languages) that greatly increase what my code can accomplish.",
                "This is definitely one of the most useful and interesting CS courses Ive taken at Yale. It is taught in Python and covers a variety of topics that are useful in the real world. The problem sets were relatively fun, informative, and manageable. I learned the basics of object oriented programming and various perspectives\/approaches to writing better code in OOP languages.",
                "Basic knowledge of OOP principles",
                "I came into the course with a great deal of background experience in Python and object-oriented programming. The main material I learned was more about design patterns and integrating C with Python code.",
                "Basic OOP (classes, inheritance, polymorphism), design patterns, C++, concurrent programming",
                "C++ knowledge, cs design pattern, and of course oop programming.",
                "I learned how to organize my code better with object oriented principles. I learned a lot more about Python, only having a surface level familiarity with the language before the class. What I learned in this class will be very helpful for future projects.",
                "This object taught me concepts relating to object-oriented programming and was taught mainly in Python but we also did extensive work in C++."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "The first half of this course was very strong. The assignments were very thoughtful so as to help you learn the course material and understand how it could be used in software development settings. The second half, however, was very dry. I'm not sure that half a semester is well-spent looking at nearly 20 different design patterns. Also, despite C++ appearing on the final examination, there was only one C++ coding assignment (and it was quite trivial). In the future, there should be at least two of the assignments in C++ so that students can gain an adequate grasp of the language.",
                "This course feels often unorganized, and is particularly dry. It is definitely applicable to a lot of real-world work, but is taught essentially reading off of the slides. You could do well in this class by just reviewing the slides, lecture offers little additional insight. That said, it is structured well and the workload is evenly spaced out. Problem sets are relatively interesting, if contrived.",
                "I thought the psets were pretty great, and I got a lot of OOP & Python practice from them. I would say the content is generally pretty helpful in real-world applications, but I found the lectures to be extremely uninteresting and hard to follow.",
                "more pair programming!",
                "The pset test cases are super finicky and not very well explained in the spec. Since a lot of the assignments revolve around creating somewhat complicated CLI applications, you need extremely long printed output to be exactly correct to not fail. I spent 90% of the time on every homework looking through the examples and trying to figure out what was the exactly right amount of leading whitespace, or making sure I had just the right amount of dashes in my divider lines. Also, the back half of the course is on design patterns, which were all explained with really isolated examples. I found this part to be a little boring and difficult to imagine how it could actually be applied to any of my work. Most of the design patters seemed like things I would arrive at intuitively if I was ever building an application that could benefit from them. I am not sure what the use in being able to identify them is. That being said, the first part of the course is just a super in depth run through of OOP in python, which by the end will make you an expert in the language.",
                "Barron is kind of a disorganized professor. The syllabus was frequently shifted around. Strengths were that sets were pretty applicable from what was learned in lectures.",
                "The lectures were really really dry. Only about 10% of the class shows up after the first week or two. I'm not sure what can really be done about that because going to lecture doesn't really affect your ability to complete the homeworks, but it is depressing to show up to an empty lecture hall. On the positive, I thought that the assignments were really effective at hammering down important aspects of object oriented programming.",
                "The strengths are the structure of the course, content, and assignments were incredibly well done. I learned a lot. However, the only weakness is Tim Barron could maybe be a little more charismatic. I think its very easy to zone out.",
                "The strengths of this course were the depth in which each concept was covered and the willingness for Professor Baron to connect lectures to the homeworks. That being said, one weakness of this course was the objective grading of psets where students werent really rewarded for their understanding of concepts but rather their ability to conform to the desired solutions.",
                "Strengths: The material is very practical and applicable to the real world. Also, the Santorini pset was very fun. \r\nWeaknesses: Testing for psets was done through Gradescope which was sometimes very slow. A lot of time spent on assignments was dedicated to using Ed Discussion to figure out how the code was supposed to work with certain cases, when the code spec itself should've clarified it. It was sometimes difficult to pay attention in class when it became scrolling through raw code for long periods of time.",
                "Tim Barron is a great dude! Course content was overall quite dry though. But what can you really expect from object oriented programming.",
                "I think this would be a great course (since it's so practical and actually applicable to CS in the real world, unlike most CS at Yale which seems to be geared towards grad school) but it's just really boring-- i think the professor could do a better job with presenting the course material in a more engaging way.",
                "Strengths: the content itself is very helpful and the programming assignments felt very useful, quiz questions are representative of lecture material, Weaknesses: occasionally, specs would be corrected late or it would take longer for the autograder to be up. These werent really problems if you checked on Ed for updates.  I would've appreciated a mini guide about how to read Gradescope output.",
                "The problem sets are helpful in grasping the material, but I feel that it would be more appropriate to give more time for the last few problem sets. Too much time was provided for the first few and too little for the last few. I liked the daily quizzes as they keep you accountable and are not worth too much of your grade. I would also have liked more detailed lecture slides. If someone zones out for even a few moments during class, it is easy to get loss as the lecture slides are super generic.",
                "Strengths: Online lecture recordings\/ lecture notes were very useful, discussion thread run very well, and the workload felt manageable\/fair. \r\n\r\nWeaknesses: I feel like there were certain aspects of the class that just came across as a little sloppy from a student's perspective, especially for a CS student. For example, the specs weren't nearly as tight as I've seen for other CS classes, the exams put wayyyyy too much emphasis on syntactical stuff, which really should never be on an exam, and the bottlenecks on the psets were usually unrelated to the content of the class.",
                "Strengths: the content is super practical and I like the coverage. Weaknesses: I think we could have used a bit more practice on the design patterns  the final assignment felt like quite a ramp-up in order to synthesize everything.",
                "This course was well organized Id say. Professor Barron tries his hardest to provide help and support for all students.",
                "not well organized, much of the material is better explained online",
                "Strengths are definitely the recorded lectures and office hours!",
                "Strengths: this is a very important programming skill to have and Python is important to know\r\n\r\nWeaknesses: the second half of the course was sort of boring and repetitive (pretty much exclusively design patterns with some C++ mixed in)",
                "Some of the example in class is not that easy to understand, maybe its just me, but Id like more example that is more accessible.",
                "Strengths: the content is interesting and knowledge of OOP is a good skill to have. The assignments were interesting and the fact that the lectures were recorded was super helpful. The slides and examples are all very useful. I appreciated the overview of Git at the end of the course, although it probably would have been more useful at the beginning. Weaknesses: the lectures sometimes got a bit dry, as we would go through code examples in deep detail.",
                "The strengths of this course are the problem sets and the fact that the material taught is very applicable in the industry. The weaknesses were the lectures themselves, because while the content was interesting and practical, they were very difficult to follow. The quizzes try to improve this problem, but ultimately Tim's method of using code examples in an IDE for the majority of class is not very effective. The exams also sometimes test material that isn't really important and more like memorization of random concepts, which is a minus.",
                "The information is great. Which it was more engaging sometimes",
                "There was pretty slow feedback in the course and it didnt feel like there was much energy put into it. In general though, I thought the assignments were good and the tests were fair.",
                "Strengths: most practical and useful CS class I have taken at Yale. The problem sets are interesting and much easier than 223\/323 level. The exams are reasonable as well. \r\nWeaknesses: can't think of any.",
                "I really enjoyed the assignments! An only weakness would be it was really hard to follow along with the coding examples in class. They went really quickly and I always had more questions.",
                "Strengths: psets were pretty fun and facilitated learning, class was generally well organized\r\nWeaknesses: lectures were not very engaging (though I actually liked how we had lecture quizzes to force me to keep up with some material every week), exams were difficult to prepare for \/ felt like they required more memorization than necessary",
                "Strengths: information and psets on a lot of practical coding skills (e.g. testing and code coverage, documentation), quizzes after each lecture kept me up to speed (although was somewhat annoyed at the time lol), the collaborative final pset was also a good exercise in learning to plan, split tasks, and read others code\r\n\r\nWeaknesses: the extra credit was great but not letting it overflow means that doing well on the psets\/quizzes generally doesn't matter as everyone should get 100%  it's only the exams that matter; some content such as how to do the C++ adapter pset seemed under-supported; and the presentations could be updated to be more engaging",
                "Strengths - manageable problem sets that help you learn concepts well. Weaknesses - lectures can get pretty dry.",
                "Assignments are useful in learning how to code efficiently. They are usually closely related to what we're learning in the class at the time. \r\n\r\nSometimes the concepts are not explained very well.",
                "The lectures are quite dry and not always very engaging.",
                "Strengths: The assignments are well-connected with class material and serve as effective reinforcements of core concepts. Quizzes help with accountability when staying on track with the course, although some leeway with dropping a missed quiz in lieu of late days may be helpful.\r\n\r\nWeaknesses: The timing of assignments was slightly irregular, and it would have been helpful for personal scheduling for assignments to release on a pre-determined date. Grading of assignments and feedback was also a bit slow, which was important because subsequent assignments depended on the work from previous ones for the first few homeworks.",
                "Strength: Covers some useful concepts in computer science. Clearly-structured, and follows the textbook pretty well (it is really helpful to have a textbook reference that corresponds to lecture materials). I also like how we get to see code examples, which facilitate our understanding of concepts.\r\nWeakness: It is nice to walk through some code examples in class, but the code is only projected from the prof's computer and he walks through them pretty quickly. So it can be difficult to follow along, especially since we can no longer see the code after he scrolls away. It may be helpful if the prof can post the code examples before the lecture so we can a) spend more time looking at specific parts of the program at our own pace, and b) take notes directly on the code.",
                "The problem sets are nice and manageable, and the lectures are generally interesting. Sometimes, I thought the lecture contents could progress faster.",
                "This course suffers from trivia-obsession in evaluation. The tests and quizzes are riddled with tiny details rather than concepts and challenges.",
                "I think the PSETs are really solid. They tend to teach concepts a lot better than lectures, which I found to be quite boring and difficult to follow.",
                "The in class demonstrations were hard to follow and therefore felt meaningless. Because the coding demos took up most of class time, lots of students didnt feel that it was important or worthwhile to attend class.",
                "A weakness of this course is that it is pretty hard to follow along the code examples presented in class, because they are often shown either incomplete\/with errors and\/or because we go through them very quickly. I think it would be really, REALLY helpful to post the code files online before class. That way, students can write comments and follow along on their own computers.",
                "Strengths are most of the problem sets and most of the lectures. Weaknesses are the coding sections of lectures and tests, which could be hard\/boring to follow. Tim Barron seems to have a bit of a chip on his shoulder and it shows in his teaching\/interaction with students. He is not understanding or very supportive. Luckily, most of the ULAs and the TF were helpful and empathetic.",
                "I thought the PSETs were fun, but the course lectures were difficult to follow. Many times he would show some code but the way in which it was presented was difficult to follow.",
                "This class teaches interesting material and I have no major feedback. However, I did find the structure of the lecture quizzes quite frustratingoften, they would not be posted or enabled until well after the lecture completed, and it was easy to forget to check back before the window to complete them closed, causing me to lose points even though I understood the material well.",
                "The final exam barely tested the most important things we learned in the course and instead was filled with questions about random facts",
                "It is hard to follow code examples during lecture.",
                "The most practical cs course I've taken at yale. Found the grading for the final very frustrating. We were told that bullet point answers for open-ended were fine and then lost a boatload of points for not explaining enough.",
                "The professor was a great teacher in my opinion. His explanations were clear, his slides were helpful, and the code examples were a great way to put the concepts into practice and a good resource for the homeworks. Professor was always helpful at office hours, and so were the TAs. I appreciated the amount\/distribution of office hours each week as I could always find one to attend. Ed was a great resource too, especially given the encouragement to interact on there for participation points. Homeworks were always fun and interesting and I liked that they built on each other in the first weeks. The free late days for the homework were much appreciated. Finally, the weekly quizzes were good for keeping me accountable to the weekly lectures while not being too stressful. The only weakness I recall was on one of our assignments where the setup caused a lot of trouble for students and there was not much guidance for that at first.",
                "A strength was how every assignment was related to what we covered in class and how I can see that the topics we are covering would be helpful in the future for internships and jobs. Sometimes it would've been helpful to have assignments graded quicker especially ones that built upon one another"
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "I would if you're looking to practice Python and maybe go into software engineering. I found the content very enlightening and helpful for technical interviews. However, a lot of the concepts you learn in this class you can just as easily self-learn online - so if that's something you're better at, maybe don't take this course? But overall I think it's a good, fairly easy class for CS majors.",
                "yes, you learn a lot about design patterns that are helpful for any type of coding you do",
                "If you want to be a software engineer, definitely!",
                "sure",
                "Meh. It's a decent elective and if you want to get better at programming in python it's a good option. But don't expect it to be fascinating.",
                "I would totally recommend this class to another student. The content is great! The assignments teach you a lot about working with Python packages and a lot of practical things.",
                "Yes! This is a great course with a great professor. You will learn about the fundamentals of object oriented languages that will help you no matter what stage you are in your coding journey.",
                "If youre going for the programming certificate, definitely take this. It will provide you much more applicable skills compared to 323 (although as someone who took both, I enjoyed the content of 323 vastly more). If youre looking for an elective as a CS major, sure. Relatively little workload, but content is a bit dry.",
                "Yes, I think it is an important skill to learn, and good CS elective to take.",
                "Yes! This course is definitely one of the more useful ones in computer science and helps a lot when it comes to writing and structuring code in object oriented languages. Would recommend as a must-take for CS majors, given the light workload.",
                "Yes, OOP is very useful in software engineering and good to know for programming\/CS focused people in general. Compared to the core CS classes which are very theoretical, 327 was the course that felt much more relevant to my experience as a SWE intern. You do have to work hard to study and complete the projects well and on time, especially larger assignments with more complex specs",
                "Yes, if they are interested in programming. Definitely feel like this is one of the CS courses that are more helpful with coding interviews.",
                "Only as a CS elective for the major with relatively low workload.",
                "If you are trying to learn Python and want to apply more traditional CS concepts in a practical and less stressful way this class is great. You get to do psets that aren't super intense but you have to think and program smartly to solve them. The exams were quite challenging, but I definitely feel like I received a lot in terms of practical programming experience.",
                "Yes",
                "no, not a well organized course, most of the material can be found online and it is explained better there",
                "Yes!",
                "Yes, its a good class and a good skill to have. The psets are not very hard. The exams are harder but not too bad still.",
                "Yes, as long as you want to improve your practical programming skill.",
                "Yes, I think this is a good CS class. The workload shouldnt be taken lightly when coming into the course, but youll learn a lot if youve had little exposure to OOP previously.",
                "I would only recommend this course because the concepts taught are relevant to the industry. However, if you already have a lot of experience working in the industry, I think the class becomes a lot more boring and more of a CS gut.",
                "Highly recommend if planning on industry",
                "Sure, I think the content of the class is useful, but it wont be the highlight of your semester.",
                "Yes! This is the most practical CS course I have taken at Yale. It has taught me skills I will definitely use in my own projects and in industry. And overall, the course isn't too hard. I would definitely recommend it.",
                "Yes! Lots to learn, and not overly stressful. The projects are really fun and you definitely come out with new ideas about coding (esp use file for coding interviews as well)",
                "I would recommend this course in that it is one of the few courses that provide CS students with skills that improve their code and ability to conceptualize better solutions. I had some knowledge of OOP from high school so much of the OOP was more of a refresher, but tips on how to use Python according to normal coding conventions, info on code smells, and the pset on creating tests were quite useful  and things I wish I had known before my last internship. The ~2 classes and pset on C++ were also an interesting aside.\r\n\r\nI'm not sure whether Python is the best language for an OOP class, considering it doesn't really do many of the things we'd ask of it (unlike Java for instance). That said, other content in the lectures wasn't that OOP-related either but was useful as was using Python and so I wouldn't change that. The lectures were alright although for some things I thought the online resources' examples were easier to follow. All in all, I'd recommend if you want to solidify your basics in coding practices.",
                "If you are a CS major then yes since its a good skill to have for industry.",
                "It's a good CS elective that teaches you how to use popular languages like Python and C++. I'd recommend this class to any CS student looking to work in programming.",
                "Yes I'd recommend it. It's a good course and you get a lot of practice programming in Python. Relative to some of the other CS courses it is also not an insane amount of work, which is nice.",
                "Yes I would recommend it. I would recommend if you want to get practice writing code in common object oriented programming languages. The Psets are doable and generally pretty interesting. Lectures, however, are not the most engaging.",
                "I would definitely recommend this course to any student looking to pursue work in the software industry. It provides critical skills that are used in almost all workplaces, including programming best practices, unit testing, and object-oriented design. Design patterns are also an incredibly important tool for improving the quality of your code.",
                "Yes. This course covers some useful concepts, like design principles and testing. Object-oriented programming is also important for cs majors to understand.",
                "Yes, I would recommend taking OOP! It is definitely one of the best CS electives. The class is relatively easy, but you will learn knowledge and skills relevant to any software engineering job.",
                "Maybe it's how new Barron is or maybe it's the nature of this course but this course is bogged down with smaller details that make evaluation frustrating. This course is ok, but don't think it's an easy one.",
                "Yes, it's important to be aware of OOP principles, especially if you plan to be a CS major.",
                "I mean, CS majors don't have a ton of options. It's a pretty good class if you're willing to do a lot of learning on your own - the PSETs are well designed.",
                "Yes. Taking this course will force you to think differently about how to write code.",
                "I would recommend this courses to another student because object-oriented principles and techniques are very important for any programmer.",
                "Yes. I think it is a relevant and interesting elective for anyone looking to learn more about OOP and Python in general. Definitely not easy, but not crazy hard either.",
                "No I would not. I did not feel like the lectures were engaging enough.",
                "Yes, however, if you have background in the material, be careful not to become complacent and assume the assignments and exams will be easy, because they may depend on you understanding certain nuances of the way the course material is taught that may not necessarily come along with your background knowledge of Python or OOP.",
                "No",
                "Not if they are somewhat familiar with OOP Already or need a gut",
                "Yes, python is super useful and so is OOP design.",
                "No, while the material was interesting, the class was poorly managed and structured compared to other CS courses. When I lost points on assignments and exams I felt it was due more to a pedantic and lazy grading structure and less me not understanding the course material. Many assignments also felt rushed and deadlines were missed on when these assignments were meant to be released. Looking back, I would have preferred just auditing the class so I could get the material while not having to worry about the grading.",
                "Definitely! I found the course very fun and I know I will use what I learned in this class in the future. I thought the teaching staff was great and the assignments and assessments were fair. Help was easily accessible for homework. The free late days were great to have as they gave students a buffer for submission in case something happened to come up around the deadlines. There were also opportunities for extra credit which I appreciated.",
                "The course had content that I think would be helpful in a future internship or job, particularly one in Python."
            ]
        }
    ],
    "extras": {
        "title": "CPSC 327 01 - Object-Oriented Programming"
    }
}