{
    "crn_code": "11093",
    "season": "202103",
    "enrollment": {
        "enrolled": 147,
        "responses": 82,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                4,
                2,
                16,
                27,
                23
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                7,
                14,
                23,
                20,
                8
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                11,
                9,
                22,
                25,
                5
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                9,
                18,
                23,
                21,
                1
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                1,
                2,
                6,
                16,
                47
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                1,
                4,
                12,
                55
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "WOW did I learn a lot in this course. I have a real grasp of operating systems and computer architecture. I'm sure you've already heard about how hard this course is, but it's not all busy work. Almost every project taught me something entirely new or expanded on and reinforced a topic from class.",
                "Computer organization. Memory. Processes. In general I understood better now how computers work (though still confused about a lot of things). Working with a code base. How to panic less when at first the specs make zero sense.",
                "On the first day of class, Professor Piskac said that this is the CS50 for CS majors. It is the absolute introductory course to Computer Science. You will learn A LOT in this course and the material is really interesting. Essentially, this class teaches you how the basic computer functioning is coded. You learn about memory management, kernel code, process parallelization, and more. You will know how a computer works all the way from the 1s and 0s to OSes.",
                "Learned about kernel, basic OS information, intro to assembly, and bash.",
                "I learned about systems programming. It is essentially the very bottom of the abstraction hierarchy, and slowly working up to the top.",
                "Systems programming and  a close look under the hood of C and computers",
                "Learned a whole heck of a lot about lower level programming and time management",
                "A lot of assembly, organization of computers as a whole and their memory structure.",
                "I learned a lot about systems programming, operating systems, memory management, and underlying architecture for modern computers. The main skills  I developed were problem-solving and debugging, especially when debugging methods were not as easy as they typically are. I got much more efficient and savvy with using GDB and other debugging methods, and also greatly improved my ability to take on large programming tasks.",
                "A lot",
                "intro to systems knowledge",
                "Introduction to Systems, forking, backgrounding, a bunch of stuff with C.",
                "a much greater understanding of how a computer works at a low level, such as computer architecture, how different data types can be represented in memory, the different places memory is stored, how memory is accessed by applications",
                "I developed low-level programming skills with C and a basic understanding of system architecture concepts.",
                "Memory management, file hierarchy, and coding in C. Lots of coding in C.",
                "Computer architecture, low-level systems programming",
                "Learned a lot about some of core concepts that make our computers run and became more comfortable coding and recreating these topics",
                "An overview of how memory and OS works to make a computer work while working in C. Used assembly language for a unit.",
                "I feel like I learned how the computer works in very new and interesting ways. I understand how data is generally organized, accessed, and modified in the computer.",
                "Programming wise: how to build a comprehensive C program from scratch (PSET 1: TeX editor) as well as chunky C programs with an existing code base (PSET 2: DMalloc, PSET 4: Bash, FINAL: Malloc). This class had a lot of code to read, much of which was very difficult to do due to the sheer number of lines and confusion surrounding towards what it aimed to accomplish (thinking of PSET 2: obj2exec, PSET 3: Binary Bomb, and PSET 5: Virtual Memory Allocator) but an argument can be made that this is very much like what a SWE job will be like. I feel like the main two focuses of the semester were on operating systems (role of the kernel, processes, the fork-exec model) and memory (virtual vs physical memory, memory organization, memory debuggers, and malloc) with some related concepts sprinkled in such as handling of data types and assembly code.",
                "An understanding of computer architecture and systems.",
                "You do learn a LOT from this course about systems programming and general computer architecture.",
                "Lowkey... this class was a huge pain but I kinda learned a lot - what goes into/how to make bash, malloc, etc. Also kernel, reading assembly code (a HUGE pain), different number systems + floating point representation (another pain), a LOT about memory (going from virtual memory to physical memory, caches/RAM, etc) and how a computer actually works to store information.",
                "Learning about memory management and a more innate understanding of C and machine assembly language.",
                "Computer architecture, assembly, memory organization, working on projects of a much larger scope.",
                "so much memory management stuff, but hey at least now I know how RAM and cache work",
                "Developed mastery over the C language. Learned lots about how the computer is structured such as memory management and the kernel.",
                "Programming and data structures and systems",
                "Memory management, systems programming, the core course that takes the lower level dive looking at how OSes operate",
                "The lectures provided a survey of the x86-64 architecture as well as concepts such as data and program representation, assembly language, virtual memory, compiles, operating systems, and the memory hierarchy.",
                "How computers work, basically. One always hears stuff like \"kernel\", \"process\" or \"assembly\", but one doesn't reaaaaally get these concepts until getting their hands dirty. In this class you get your hands dirty.",
                "Systems programming",
                "Memory management and low level programming on the operating system level",
                "You gain a mediocre understanding of some systems programming concepts.",
                "programming in c, assembly, computer organizations/structures",
                "I became better at programming in c. This involved coding and debugging. Beyond that, i learned about the kernel, operating systems, how shells work and several other c concepts.",
                "I learned about many core computer science concepts, including memory management, assembly programming, and kernel/user control flow. Crucial concepts for any computer science major to appreciate and understand what theyre doing at a deeper level",
                "Writing in C, reading/writing some assembly, process memory isolation, mapping virtual to physical memory, implementing a tiny operating system",
                "I learned a lot about number representations, OSs, system programming, and memory management",
                "Computer architecture, assembly, operating systems, fork/exec, virtual memory, caches, memory management",
                "We learned how low-level features of Assembly (and C) are used and were created, how to work within these to manage memory, etc.",
                "The nuts and bolts of low-level C programming and debugging, some assembly programming, computer architecture (including number representation, memory, registers, caches)",
                "i gained much knowledge in operating systems, as well as the skill and confidence to tackle large, unstructured, complicated projects."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "The lecturer was completely out of touch with the assigned coursework. She did not write the exams or know what we were doing on our problem sets. There were multiple times in class that she asked, \"wow, you're all quiet today. Have you already seen this?\" We all thought to ourselves, \"why yes, we've been teaching this to ourselves for more than a week because it is central to the problem set/canvas quiz!\" VERY FRUSTRATING.\r\n\r\nIn addition, there were multiple typos on both tests and they repeatedly interrupted us. Also they have been unclear about grading policies. Also everything takes forever to get graded. Also they make revising problem sets incredibly difficult and you don't know where your logical errors were. All around poorly organized for learning. SO many improvements could be made, but you still learn a lot.",
                "Strengths: Recorded lectures. Richard (the TF). Aidan (the ULA). Abhishek's notes. Jay. Jay was great - thank you so much for that OH session before the last exam it was super super helpful.\r\n\r\nWeaknesses: Professor Piskac's lectures can be confusing, and sometimes when she said things like \"So you all now know how...\" it made me feel slightly sad because actually no I don't not really I'm confused. (It was Professor Piskac's first time teaching this course, though, so I'm sure she will also get better.) Assignment specs could be clearer in many places. I would have appreciated it very much if quizzes had linked to (or listed out) relevant lecture notes or websites or YouTube videos that explain the concepts necessary for the quiz questions.",
                "This course is very strong in that it a standardized form across all semesters. All the material is standard, the slides are standard, the exams are standard, the psets are standard. This makes it a fair and super robust course about computer architecture. I think the extensive amount of support staff makes this course exceptional. I would say that I wish the material was more synchronous with the PSETS, but it wasn't a huge deal.",
                "Strengths: rigorous introduction to basic computer systems, thought provoking problem sets and great instructors\r\nWeaknesses: sometimes unclear specs for problem sets, need to go to either office hours for clarification, quiz material was taught only after quiz due sometimes",
                "The lectures were often pretty boring. There should be a much clearer structure of (topic, details, examples) with a much more condensed format. \r\n\r\nVery little thought was put into the exams. For the first one, the instructor literally showed up ten minutes late. In the second exam, they interrupted us maybe 5-6 times to correct/clarify the exam. It was frustrating putting so much work into a course and feeling like the instructors didn't care about making things correct.\r\n\r\nThe problem sets were good. I found Richard's pset walkthroughs particularly useful. The problem set 5 walkthrough was embarrassingly under detailed. It basically just repeated the contents of the spec.\r\n\r\nIt was also very frustrating when the material necessary for the psets was given in class after the psets were already due. That should never happen. Plan the course better.",
                "The course psets and curriculum content were well-structured. Some concepts covered in lecture were either way too simple or not covered at all, considering how important they were to the psets and to the course curriculum in general",
                "Strengths: the psets are all fantastic in taking CS concepts and applying them. Exams were extremely fair. Weaknesses: most of our psets covered stuff that we would only later learn in lecture, which made the lectures feel redundant.",
                "I think since Stan passed, the course has shifted to more of computer organization/assembly (which is the new prof's (A. Bhattacharjee) specialty. However, this makes it feel more like a course in Operating systems than systems programming. I feel the course would be stronger if they returned to large systems psets that challenged coding ability and left the operating systems content for the actual os class.",
                "The quiz material was rarely covered in the lectures and only most of the time was in the pdf modules.\r\n\r\nAlso, the lectures almost exclusively covered information useful for the previous pset. In this way, you were almost punished for starting early, as the material needed to complete the pset was witheld until the last lecture or two before it was due.",
                "This course is a lot of work, and a lot of the work seems to be fairly redundant or unnecessarily difficult. The specs for the psets themselves took about as long to read and comprehend as completing entire problem sets for other classes, and seemed to contain a lot of extra information on unnecessary topics with insufficient information about what we were directly implementing. Additionally, the lecture often seemed very separated from the problem sets. It felt as if the lectures were one class, where we had to memorize, brain dump on the exam, and then forget. This contrasts with the problem sets, where the actual learning takes place, but is loosely touched upon in lecture often after the problem set is actually submitted. If these two components of the class were more closely tied together, particularly with more active coding during lecture as opposed to glossing over code screenshots, lecture would be much more effective for actual learning.",
                "Strengths: You learn a lot.\r\nWeaknesses: 24/7 stress",
                "strengths: some of the psets were fun\r\n\r\nweaknesses: some of the psets were not well designed (weensyOS) and didn't facilitate learning. the lectures weren't great this semester, I think because Ruzica was just not secure about the content. Office hours were really bad -- there was only one TA per shift and they weren't always prepared. Overall, I think the class was hyped up a bit too much and I was a bit dissapointed.",
                "Strengths: Piskac is super nice, was super generous with homework. You feel a lot more comfortable with C afterwards.\r\nWeaknesses: Homework was brutal and varied in workload drastically. Pset 4 was especially difficult. Don't see many applications to software engineering if you are looking to go there.",
                "Problem sets were very conducive to learning the material.\r\nMAIN CRITICISM WAS THAT THE LECTURES WERE NOT IN SYNC WITH ASSIGNMENTS!!! Instead of being exposed to the material in class and building on my understanding to do the homeworld, I would often have to teach myself the material in great depth to do the homework and after the assignment was complete we would cover it in class at a high level, as if it was meant as a review for the PSET",
                "While the proposed curriculum had potential to make the course unique and meaningful, the professor made this course one of the worst learning experiences at Yale. (see response to question 10 for more detail)",
                "Strength  nice slides and class materials. I also thought the grading scheme was fair.\r\nWeakness  went too slow in class and we would cover material for a PSET we needed around two to three weeks after it was due. Also not enough TAs for the help that was needed on assignments",
                "Strengths: Prof Ruzica was so nice and accommodating. Totally cared about all her students and was hilarious. \r\n\r\nWeakness: Too many to count. Scrap this class and start from the ground up. It's obvious it's meant as a weed-out class. We could have learned so much more in so much less time if it was organized different. The projects are just ridiculous and there is nowhere close to enough resources, office hours and TAs to accommodate the fact that we can't collaborate? Make them shorter and more structured and we could actually learn. As it is now it's so hard to just finish, we don't get the chance to learn along the way. Ruzica didn't even know what were on the projects or quizzes. How can a professor teach a class and not have any control over what is being taught or assigned?? It felt like there were two completely different classes at the same time. The quizzes projects and final project, and then the lectures and tests. Very little correlation. Neither prepared us for the other. The number of times I would get stuck somewhere in the code that had nothing to do with the actual concepts of the class, and then not be able to get ANY help was insane. I'm not learning or becoming a better programmer by banging my head against the wall trying to solve a bug.\r\n\r\nTLDR: Class needs a compelte revamp. Ruizca was the only good thing. We're not learning by debuging for 20 hours a week.",
                "Strengths: interesting and well-designed projects, clear and engaging lectures, helpful walk-through sessions. Weaknesses: lack of organization, Canvas quizzes",
                "Lectures were usually quite interesting the ULA office hours were always very helpful. However, sometimes the lectures lagged behind the problem sets and it was difficult to learn from our mistakes in the problem sets.",
                "The material for the psets should be covered in lecture before the pset. Usually the opposite was the case, which made lectures useless. Also, the lectures were not very helpful or informative, and they were taught very nitty-gritty, which wasn't always helpful when big-picture teaching could've been more helpful.\r\nAlso, there was a huge staffing problem in terms of ULAs, which made going to OH consistently frustrating because you'd never get seen. Or, more realistically, you'd wait 2 hours and get ~10min of help.",
                "the psets felt disconnected from the material covered in class. had to teach ourselves the material to do the 40+ hour a week psets which is frustrating because they are already so time intensive.",
                "It is taught the standard way, the same way it is taught at Harvard and many other ivy schools.\r\nOne weakness though, is that the lectures on a topic often come after the coding assignment on the topic. This makes lectures unappealing since we have already self-learned the material in order to do the assignment.",
                "Strengths: You learn a lot; the problem sets are a really good way to actually understand the material\r\nWeaknesses: It's so much time. Wow those problem sets are killer. The class structure is also not ideal because I feel like the lectures never kept up with the psets and so they felt really meaningless until we had to cram for exams.",
                "Strengths: intellectually challenging, psets were structured very well. Weaknesses: improvement in teaching",
                "Professor Piskac is incredibly nice and understanding. One of the biggest weaknesses is office hours easily gets clogged very fast, and each help session takes a long time, so even if you're 5th in the queue, you could end up waiting over 2 hours to connect with a ULA.",
                "Weaknesses: the hype about the course is definitely valid, although I personally think that the Prof. Piskac enjoyed the hype and honestly made it more difficult than it needed to be. We had biweekly psets & Canvas quizzes (with 1000 retakes so a guaranteed 100 there, thankfully) and a good 80% of the questions on the quizzes were never covered in class (like, you had to search it up and learn it yourself). It was annoying because Prof. Piskac would always be like its for you to learn yourself, but it was really just her excuse for not teaching us the appropriate content. Also, the timing of the lectures and the psets was so off  the pset specs were super long and you spent a lot of time reading them and learned new material (ex. how the shell worked), and then a week later it would be covered in class, but by then it was pretty ineffective because the pset was already due. If they shifted the psets back a week, we would actually understand what we were doing before we started working on them/struggling to read the spec. tl;dr the class was very poorly organized and we could have gained the same knowledge with less work if they had organized it a little better from the start.\r\n\r\nStrengths: I guess ultimately I did end up learning all the content because I had to figure it out myself for the two exams, and now I understand how my computer works a little more than before.",
                "It could be split up into two courses? There's just so much content. It might benefit from being solid into two courses.",
                "The course assumes a lot of background knowledge of C programming, and the instructor takes a hands-off approach in terms of teaching programming in the class. It would have been better to do some programming in class, since we did none. The problem sets are, however, very engaging and you learn a lot from doing them.",
                "This course was hard to follow. The month of September was essentially a review of previous CS classes (with the exception of learning the exact format for IEEE floating point representation), which meant that the remaining classes were out of sync with the material covered by the homework (which kept introducing new concepts). A common experience was to learn the material to do the homework, only to go to class after that homework's due-date and hear the same material you already had to teach yourself.",
                "The biggest weakness is how the class is designed to make you procrastinate. You only start covering the relevant topics in lecture pertaining to the monstrous psets like 3 days before it's due. This leaves you to self figure out many of the concepts whether it be through peers, self-study, or TAs. Then when you went to class you already knew all the topics because you had to learn them to do the pset that was already due. In general, I wish that the material was shifted to be taught 5-7 days earlier to actually aid in homework assignments which count for 60-80% of the grade. Also, if you start psets early, it's often a pain because when you go to Office Hours the TAs are not yet well versed in the pset and a lot of time is often wasted and it makes me question whether it was even worth my time to start early. Finally, some of the grad student teaching fellows don't know what's happening in the class and are tough to work with.",
                "One of the hardest courses at Yale, but definitely a fun class, and the satisfaction from finishing problem sets is great! The curve definitely helps you.",
                "Strengths: Actually a useful class to get to know what goes on in an OS. Assignments were frustrating but one specifically I found super fun. Weaknesses: The problem sets did not align with the lectures - for example: an assignment would be about assembly and we wouldnt have even talked about assembly in class until the week after it was due. Because of that, I had to self-learn a lot and lectures did not feel like my primary source of teaching/knowledge.",
                "The strengths of this course include the ULA support and the problem sets. Although the problem sets are long and challenging, they connect well to the lecture content (although we fell quite far behind in lecture) and force you to level up your programming skills. Unfortunately, Professor Piskac struggled teaching this class for the first time this semester. Although I know she will improve over time, I think there were times where she fundamentally misunderstood (or didn't completely understand) the concepts she was teaching.",
                "Yes, sometimes the project specs were a bit confusing, but overall, I believe the psets are very strong and really challenge you. You grow a lot as a programmer. Office hours are a strength -- take advantage of them. Go there, meet people, make new friends, collaborate, have fun. Even if you don't have any questions, just go there and chill.\r\n\r\nIMPROVEMENT: This became a problem only in a few instances, but it would be better if we use the online queue for in-person OH, too. Otherwise confusions arise and some people feel like they have been forgotten by the TA.",
                "logistics were a bit disorganized",
                "Good course content lectures could better align with psets",
                "The strengths were the help from TFs and TAs and the few lectures that Jay taught. There are a LOT of weaknesses... Firstly, Ruzica is a very terrible lecturer. She glances over important concepts, and has trouble explaining basic concepts. The projects were incredibly difficult and LONG. We often struggled for weeks to complete a project and had to research/learn the concepts on our own just to get by...only to cover topics relevant to the project 2 weeks after we submitted the project. Imagine doing an entire project in Assembly only to learn about assembly two weeks later... absolutely ridiculous and completely unacceptable on Ruzica's part.",
                "strengths: I definitely learned a lot! \r\nweakenesses: A lot of work and time was spent on this class. I didn't think the lectures were helpful because the material was taught 1-2 classes 2 late for it to be relevant to our current assignments.",
                "There was a lot of work. I dont know how that couod be lessened effectively though. The tests were not great though, even though we were allowed a few pages of notes, i felt as though i was docked points for not remembering specific things from class. These are things that I could've found if it was open internet. Eliminating the two tests or making them take home would likely reduce stress for the students and i think it would be better for the class since the nature of a test doesnt mesh eith the class.",
                "This course is hard and stressful. Some of this cant be avoided because the concepts and programming can be confusing or difficult, and you have to work through it to come out as a better programmer on the other side. I genuinely feel like the projects gave me a better understanding of CS principles and made me a more confident, competent programmer. I also appreciated learning and getting really good at C, because it makes learning and understanding other languages way easier. However, with 5 projects, (each taking 20+ hours to compete), 2 exams, and a final project, this class felt like a huge amount of work, and my stress often detracted from my ability to fully understand or appreciate what I was doing in the moment. One suggestion I might have is to actually split 323 into a 2-term course. People take lighter course loads during the semester they take 323 anyways, because its at least double the amount of time that other courses take in most cases. Splitting the course into 2 terms might make the time management better and actually give students more time to appreciate and enjoy what theyre learning, which Im afraid is overshadowed by stress in the current iteration of 323. Another solution may be to eliminate exams and find another (less stressful) way to test theory, like weekly canvas quizzes that are lower stakes.",
                "Strengths: OS and systems architecture are important topics, and I'm glad I have an introduction to them. The projects, hard as they were, were still highly engaging. Through working on them and thinking more deeply about the topics, my understanding of the breadth and depth of computer science has expanded. Professor Ruzica is a kind professor that cares about what how her students are doing.\r\n\r\nWeaknesses: there was not always alignment of project topics/knowledge required to do the project and the topics of lectures. There were two instances were a project was due, and then the next lecture, we finally got to talking about fundamental ideas that would have helped in understanding or completing the project. I still give Professor Ruzica and team credit for taking on the giant task of learning the curriculum and teaching 323 after the late Professor Eisenstat passed away last year. Perhaps there could have been more channels to give feedback throughout the semester.",
                "Strengths: Psets are interesting problems that helped me get a better understanding of the material. Professor Piskac was very understanding and gave extensions on psets when needed which was very helpful.\r\nWeaknesses: The lectures were not super engaging. They were also not well timed with the psets. By the time we had the lectures on a given module, we had already had to teach ourselves about those concepts to complete the psets. This made the lectures unhelpful.",
                "The projects were interesting and challenging; however, the specs could have been clearer. In addition, the lectures were not well-aligned with the projectsfor some projects, the relevant material was not covered in lecture until only a few days before the project was due, resulting in everyone having to figure out the concepts on their own.",
                "The course has a workload level that is unjustifiably high. Psets were much longer than necessary, building in extra steps and parts that did not add much to our learning but instead ate time. The course also is disjointed, where we had lectures, quizzes that felt like they were from another course, and psets that were decoupled from that. The psets additionally get worse as time went on (especially with WeensyOS), going from achievable on one's own to ones that almost require TA help. This is discouraging and hurts our ability to learn on our own terms. Additionally, the fact that it took months for us to get our grades back when an autograder is used is unacceptable.\r\n\r\nThe content is clearly important to really understanding the rest of CS...but there has to be a rethinking of how the course is structured and what work is involved.",
                "Strengths: Ruzica! Amazing professor and person\r\n\r\nWeaknesses: It's 323. You know what you're getting into. The workload of this class, combined with how it often preceded the related content, nearly broke me.",
                "A weakness of this course is that the pace of lecture did not match the projects and quizzes, thus leaving the student to self-study material that is necessary to do the homework. Honestly, I also think the amount of work assigned in this course far exceeds what is necessary for an operating systems course. This course had a sever effect on my mental health and stress this semester."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "Yes, if you don't care about your grade. You learn a ton but it is a DIFFICULT class. Some people who put in effort are nearly failing.",
                "No. \r\nQuiz questions are copied from previous terms and a lot of them dont match the materials from lecture. \r\nLectures are disorganized and the pace is very slow. Lectures dont even catch up with coding projects. \r\nCoding project spec is continually revised/updated after its posted. \r\nExams are not well prepared, lots of typos and mistakes in the exam questions and hence lots of interruptions during the exam.",
                "Yes - although the course logistics could be improved, I did feel like I learned many things from this class.\r\nIf you are a CS major and have to take this class - it's really not that bad, I think I was scared mostly because I had been told it was scary; start assignments early, or at least read the specs, because then you could think about how you would approach the assignment when you're walking to classes or something; Professor Piskac's statement near the beginning of the semester: \"You don't need to get an A to have gotten something out of this class.\" Especially if you took Glenn's 223 - the assignments for this class probably take less time than many of the projects you had to do for Glenn (though the concepts involved are obviously more challenging). Edge cases are also much less adversarial than some of Glenn's - imagine not needing to free every single thing!",
                "Well... if you need it as a major/certificate requirement and are interested in CS/Computing, then yes. Otherwise, I would spare yourself the time and effort because it is only applicable to certain fields. This class is one of the best classes I have taken at Yale. Although the course is grueling, the material is genuinely interesting. You will learn so many new things about computer and feel so accomplished by the end of this. Here I am going to write what I wish I saw reading other people's course table reviews to ease your stress a little. I came into the first day of class literally trembling and feeling uneasy due to the reputation this class has, but now that I am at the end of it, it is truly truly not that bad. While building your class schedule for the semester, take into account that this class will consume most of your time. PSETS will take about 40-50 hours to complete, but you have two weeks which is more than ample time. My best piece of advice is to start right away and GO TO THE **IN PERSON** ULA HELP SESSIONS. ULAs are some of the most amazing people on this planet and they make this class wayyyyy easier than it would be doing it on your own. My strategy with 323 PSETS was spending the entire weekend after the assignment was assigned working on the PSET and attending every ULA session available... I would always end up completing the assignment by next Monday with an entire week and a half left before the due date. Also, the Professors and TAs are beyond flexible, so talk to them!! They will address your needs and be more than reasonable with giving extensions, etc. Also, don't worry about the grade, I promise you will get the grade you want if you complete every assignment in the class and do fine on the exams. At the start of the course Professor Piskac said that only one student in the history of Yale CS completed this course and didn't major in CS. So keep that in mind. Stay on top of everything, don't let time get away from you, and you just might actually enjoy the class like I did.",
                "Absolutely, course is important to computer science overall, and it teaches you lower level concepts that many cs majors usually ignore altogether, which shouldn't be the case.",
                "Not if you don't have to take it. I learned a lot about systems, but I didn't really want to.",
                "Yes, knowing that it will take a lot of time and be painful and there's nothing you can do about it",
                "Absolutely, you learn so much about programming which will no doubt help help you no matter what branch of CS you go into, industry or otherwise. While the workload is a lot, as long as you don't start psets with less than 4 days left, it is very manageable.",
                "Obviously only recommend if you're doing CS major. Psets take at minimum 20 hours, maximum 35. Lots of operating systems and memory organization content, less emphasis on building large software projects than I would have expected (many psets were about filling in certain functions of an already built large software project and debugging them).",
                "If you're not a CS major, this class is probably not for you. It covers a lot of material, but almost all of it is not very real-world applicable unless you are very deep within computer systems and want to go substantially beyond web development/data science/software engineering (in which case you are likely already a CS major). Frankly, this class likely does not yield much practical knowledge for the majority of CS majors, and is instead taken simply because it's a requirement. The main skill development from this is just from the practice of doing a substantial amount of coding and debugging, which improves your overall problem solving abilities and coding independence, but this could also be obtained by doing similar volumes of work on projects with applications with real-world relevance which you can actually have something at the end to market to others, instead of spending over a hundred hours working on problem sets and the final project that are difficult to present to others.",
                "Only if you have to for the CS major. Otherwise it is not worth it. Be prepared to dedicate your entire life to this class just to complete the problem sets.",
                "I mean you have to take it if you're a CS major. If not, and you're interested in systems then you should probably just be a CS major...",
                "Not unless you need it for your major. Piskac is a super kind instructor, though, so I would recommend taking it under her.",
                "Would only recommend this class to students who absolutely need to take it as a requirement or if you are INCREDIBLY passionate about systems programming, otherwise it is not worth the workload",
                "Absolutely not, but unfortunately, this course is required for the CS major. If Professor Piskac is teaching the course, I would strongly recommend waiting for the next time that this course is offered.",
                "If you are a CS major. This has actually been my favorite class in the core, but if I didnt need to take it I wouldnt because of the workload.",
                "Obviously, any CS major has to take this class. To yall: I'm so sorry. Try to take it with guts, the majority of your time in the semester will be this class. Hopefully a non-student reads this and realize how useless and time consuming this class is. Change it. I could have gone down the street and paid a fraction of Yale's tuition for a much better computer architecture class that didn't ruin my semester.",
                "A reluctant yes. You will learn a lot about computer architecture and system programming by taking this class. Unfortunately, this does not imply that the class is well-organized and well-taught, merely that you will have to learn a lot about those topics to complete the projects and exams, whether through class material or not. To be fair, I thought Professor Piskac was a very engaging and knowledgeable lecturer, and always did the best she could (and beyond!) to breakdown the material for us. But I don't understand why the department picked a professor interested in higher level software development and verification to teach a class that is so heavily about hardware and low-level programming. The fact that she, like us, were trying to learn the material had its advantages, sure, but as Professor Piskac herself often admitted, she's not the most best person to ask questions about systems and hardware stuff, which is what this class is about. I want to make clear that I really, really appreciate the job Professor Piskac has done for us, but I don't understand why the CS department asked her to teach this class, given that her specialty is so different from the course material. Is the department this underfunded?\r\n\r\nAnd seriously, this class needs to be better organized. The quizzes almost always contain a good number of questions about topics we haven't gotten to in class, and the TF's don't seem to know what we are supposed to have learned. The projects don't match the lecture material -- we designed payload headers for malloc in project 2 at the beginning of the semester, and it's covered in lecture the week before finals? Professor Piskac uploads a lot of very useful material to Canvas, but someone needs to be curating and organizing the files: many files are repetitive or unnecessary. So yes, take the class to learn about systems programming, but know that it is far from perfect.",
                "Only if you want to get a CS major but it is a really interesting and important class to take if you do.",
                "For students pursuing the certificate, I highly recommend it. Doing 327 is sort of taking the easy way, because this class really puts you through the wringer and teaches you how to program.",
                "If you're a CS major, stop freaking out about the course, take a deep breath, and you will be ok! If you're not a CS major, take this class if you want to learn how computers work and are willing to put in the time to it. The class as it was taught this semester was honestly not taught super well. Ruzica is not quite a systems expert as Stan and Abishek are and it reflects in how she teaches. I felt like a lot of the lecture material was not super well explained and a lot of time was wasted, leading to certain topics being overcovered and others undercovered. By the latter half of the semester, I began to mostly read the class notes and slides instead of watching lectures. Jay is decent but he only had a few lectures to shine and wasted a good amount of time ie. I remember. a 75 minute lecture that could've been condensed down into 15 minutes. Richard has been leading the PSET portion of the class now for a while yet the spec is still often confusing as well as some of his walkthroughs (thinking of his explanation of the expansion stack for PSET 1). However, the material that is covered is indubitably integral to any Computer Science major and thus I am glad I was forced to bash my head against the wall to learn this material that I certainly wouldnt be motivated by myself to learn, mostly through the PSETS. The things I learned. Programming wise: how to build a comprehensive C program from scratch (PSET 1: TeX editor) as well as chunky C programs with an existing code base (PSET 2: DMalloc, PSET 4: Bash, FINAL: Malloc). This class had a lot of code to read, much of which was very difficult to do due to the sheer number of lines and confusion surrounding towards what it aimed to accomplish (thinking of PSET 2: obj2exec, PSET 3: Binary Bomb, and PSET 5: Virtual Memory Allocator) but an argument can be made that this is very much like what a SWE job will be like. I feel like the main two focuses of the semester were on operating systems (role of the kernel, processes, the fork-exec model) and memory (virtual vs physical memory, memory organization, memory debuggers, and malloc) with some related concepts sprinkled in such as handling of data types and assembly code.",
                "dat shid hurted.",
                "For CS majors, take this early since you need to take this anyway and so that you have an understanding of computer systems.\r\nFor non-CS majors, taking this high workload course is probably not worth it.",
                "I'm really not sure why you would take this if you aren't a CS major and don't need the requirement. I would say it's not worth the mental stress if you aren't. If you are considering being a CS major, I think this class is not as bad as people always say it is. BUT only take it with guts. Make the rest of your schedule incredibly light. Also, you will REALLY need to learn to not be so perfectionistic. I think so many Yalies still try to get As and like want their psets to be perfect, but from this class you need to learn that it's ok not to be perfect and as long as it is good enough and the psets get done to some capacity you will survive.",
                "It's required, but here are my thoughts. Richard Habeeb is a beast and he might be the most helpful person on the planet. Ruzica is super nice and wonderful. She struggled at times explaining some technical concepts, but she cares a ton and will obviously improve by the time she teaches this course again. I wish the course staff would've more actively sought feedback throughout the semester. One annoying thing about the class is that material covered on the problem sets is covered in class after the psets are due. Seems kind of backwards. Otherwise, the class is obviously time-consuming, but it's rewarding and everybody gets their butt kicked alongside you.",
                "figure out if you're majoring in CS first.",
                "Only take this class if you are a Computer Science major. Even if you are seeking the certificate, take another course. This course is essentially the last \"intro\" course in the Computer Science department, but it is made almost exclusively for students who are interested in further studies in Computer Science. This course will for sure tell you if you are going to be a Computer Science major or not.",
                "This semester was weird. Psets were okay, but the teaching was completely incoherent.",
                "Yes very useful class for understanding how a computer works, it may feel useless if you are more interested in software development but it teaches you about optimization and how programs run on a computer",
                "It's a full-time job.",
                "Yes, but only if you are a CS major (in which case you need to take it).",
                "Only only if you are a CS major and this is required. Otherwise, save yourself the grief. When you do take this course, prepare to have your life revolve around it. I would strongly recommend getting started early. I sometimes didnt and psets would take at least 20 hours to do (on the low end, often times decently more). However, once you do finish a pset its the most rewarding feeling in the world.",
                "Although this course was the source of a lot of stress and anxiety throughout the semester, I came out on the other side very thankful for the experience. The problems sets took a considerable amount of time, but if you start early, it is definitely doable. By the end of the course, you program some really interesting low-level OS features and user-space libraries (such as malloc). I would recommend taking this course with Abishek if possible.",
                "This class takes a lot of time, but it is a good use of time, and don't forget, it's only one semester of your life. It's not as bad as people tell you. Go to office hours, find friends to collaborate with, and you will be fine.",
                "Yes if youre serious about CS",
                "No, absolutely I would not. Research \"intro to systems programming\" on YouTube and just watch a couple of those. You will learn much more and learn it better than you ever would in this terrible course. Seriously though, do NOT take this course unless you absolutely have to. Even so, DO NOT take it with Ruzica.",
                "take it if you're going to be a CS major; otherwise its not worth the workload.",
                "If you need to take this class for a major or certificate, this is a good class. If you dont need to take this, seriously ask yourself why you're taking this class.",
                "You have to take it if youre a CS major. Otherwise, if youre not really interested in core CS principles then its not worth your time.",
                "Yes, the projects are pretty fun, and it forces you to write clean code, which is a super useful skill.",
                "It is important to learn about the fundamental machine architecture at a more rigorous level, and I felt I learned that/got a solid introduction for future higher level classes, direct applications, or discussions in interviews/industry. That said, the class meets the difficulty-hype and takes a lot of time. While I still learned a lot from the class, I can't help feeling I could've have learned more had this not been Ruzica's first time teaching the class. For people who must take the class: consider the factors of taking 323 with Abhishek v.s. taking 323 with your cohort and the group of CS students you've been learning/growing with.",
                "It's a required course for the CS major. Given the workload, I would only take this course if you want to study CS or REALLY want to learn about system programming/OS/number representation stuff.",
                "Required for CS majors; be prepared for the extremely high workload of the class",
                "I recommend learning the content to better understanding how a computer really works for the first time. The rest of what's involved, including problem sets and quizzes I cannot recommend in its current form. The course seems to be undergoing shifts after Eisenstat, but this is not all positive (e.g. the many interruptions we got due to mistakes on the midterm and final). Unfortunately, you probably have to take this class so my recommendation (or lack thereof) does not matter.",
                "I have no clue where to start with this. The experience roughly 150 classmates and I just had would've been a fantastic three-month intensive program where we went on leave to master the essentials of professional programming. However, as a Yale course, it was simply too much. This isn't the fault of the course staff: in fact, Ruzica is the nicest, most supportive teacher I've ever had. But no one is above this course - not the professor, not the TAs, not the ULAs, and most certainly not the students. It's hard to strive for the same success as in other classes when everyone on all levels suffers through it. The ghost of the late, great Stan Eisenstat is ever apparent in this class: having been his for decades, he uniquely knew how to make it (borderline) manageable as a course. This model worked with his brand of teaching, but it needs to be reworked substantially now that the class is taught in a more traditional way. That doesn't necessarily mean making it any easier (though on behalf of future students I hope so), but the content needs to come before the projects involving them and while I greatly appreciated how liberal they were with extensions, there should've also been more guidance during the projects because one-on-one time with ULAs was hard to come by due to the high demand. In the end, I don't plan to major in CS (even though I did very well in 201 and 223) and gave absolutely everything I had in this class, yet it found new ways to break me every single time I sat down to do work. 323 taught me there's a limit to how much I like programming and how much I can tolerate pain. To all aspiring CS or joint-CS majors preparing to take this class: godspeed, it'll be a wild ride but you'll make it out on the other side with probably a lower GPA but also new knowledge, new friends, and a whole lot of relief that it's over.",
                "No."
            ]
        }
    ],
    "extras": {
        "title": "CPSC 323 01 - SystemsProgramng&ComputerOrgzn"
    },
    "sentiment_info": {
        "YC401": {
            "sentiment_labels": [
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE"
            ],
            "sentiment_scores": [
                0.9988734126091003,
                0.9955305457115173,
                0.9988258481025696,
                0.9986710548400879,
                0.9984388947486877,
                0.9986315369606018,
                0.9986550807952881,
                0.9835516810417175,
                0.9988208413124084,
                0.9937270879745483,
                0.9971542358398438,
                0.9815658330917358,
                0.9982956051826477,
                0.9906104207038879,
                0.9984442591667175,
                0.9982413053512573,
                0.9988555908203125,
                0.9983150959014893,
                0.9988088607788086,
                0.990875244140625,
                0.9986609220504761,
                0.9986612796783447,
                0.9980702996253967,
                0.998713493347168,
                0.9971588850021362,
                0.9867146611213684,
                0.998776376247406,
                0.993766188621521,
                0.9987344145774841,
                0.998826801776886,
                0.993388295173645,
                0.9308316111564636,
                0.9982547163963318,
                0.999351441860199,
                0.9759228229522705,
                0.9987884163856506,
                0.9989020824432373,
                0.9952474236488342,
                0.9988019466400146,
                0.9877265095710754,
                0.9986653327941895,
                0.9964284300804138,
                0.9988735318183899
            ],
            "sentiment_counts": {
                "POSITIVE": 35,
                "NEGATIVE": 8
            },
            "sentiment_distribution": {
                "POSITIVE": 0.813953488372093,
                "NEGATIVE": 0.18604651162790697
            },
            "sentiment_overall": [
                "POSITIVE",
                0.813953488372093
            ]
        },
        "YC403": {
            "sentiment_labels": [
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE"
            ],
            "sentiment_scores": [
                0.9994996786117554,
                0.9987138509750366,
                0.9989145994186401,
                0.9985706806182861,
                0.9994934797286987,
                0.997778594493866,
                0.9988034963607788,
                0.9946757555007935,
                0.9992713332176208,
                0.9994586110115051,
                0.9985100626945496,
                0.9983294606208801,
                0.9982707500457764,
                0.9913130402565002,
                0.9995111227035522,
                0.9931500554084778,
                0.999496579170227,
                0.9988756775856018,
                0.996036946773529,
                0.9994944334030151,
                0.9994937181472778,
                0.9605544805526733,
                0.9971740245819092,
                0.9988222718238831,
                0.9956399202346802,
                0.9988148212432861,
                0.9869645833969116,
                0.9987441301345825,
                0.9995036125183105,
                0.998953104019165,
                0.9988839030265808,
                0.992987334728241,
                0.9986774325370789,
                0.9989290833473206,
                0.9911078214645386,
                0.991229772567749,
                0.9995102882385254,
                0.994383692741394,
                0.9989895224571228,
                0.9828212261199951,
                0.9988657236099243,
                0.9916213750839233,
                0.9984481334686279,
                0.9994701743125916,
                0.9937595725059509,
                0.9947776794433594
            ],
            "sentiment_counts": {
                "NEGATIVE": 22,
                "POSITIVE": 24
            },
            "sentiment_distribution": {
                "NEGATIVE": 0.4782608695652174,
                "POSITIVE": 0.5217391304347826
            },
            "sentiment_overall": [
                "neutral",
                0.5
            ]
        },
        "YC409": {
            "sentiment_labels": [
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "NEGATIVE",
                "POSITIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE",
                "POSITIVE",
                "NEGATIVE"
            ],
            "sentiment_scores": [
                0.9966726303100586,
                0.9995068311691284,
                0.9989283680915833,
                0.9988856911659241,
                0.9987711310386658,
                0.9961310625076294,
                0.9959755539894104,
                0.9988278746604919,
                0.9950106143951416,
                0.9994871616363525,
                0.9988658428192139,
                0.9966055154800415,
                0.9955861568450928,
                0.9976887702941895,
                0.9993451237678528,
                0.9957705140113831,
                0.9994737505912781,
                0.9965372085571289,
                0.9979470372200012,
                0.9989319443702698,
                0.9884603023529053,
                0.9941802024841309,
                0.9976004958152771,
                0.993990421295166,
                0.9988514184951782,
                0.9893471002578735,
                0.9915426969528198,
                0.9995015859603882,
                0.9989175796508789,
                0.9970537424087524,
                0.9864469766616821,
                0.9986787438392639,
                0.9988874793052673,
                0.9985607266426086,
                0.996982753276825,
                0.9994877576828003,
                0.999485969543457,
                0.99883633852005,
                0.9933971166610718,
                0.998634397983551,
                0.998837411403656,
                0.9974504113197327,
                0.9978093504905701,
                0.9946916699409485,
                0.9931725859642029,
                0.9983184337615967
            ],
            "sentiment_counts": {
                "POSITIVE": 20,
                "NEGATIVE": 26
            },
            "sentiment_distribution": {
                "POSITIVE": 0.43478260869565216,
                "NEGATIVE": 0.5652173913043478
            },
            "sentiment_overall": [
                "NEGATIVE",
                0.5652173913043478
            ]
        },
        "final_label": "POSITIVE",
        "final_count": 79,
        "final_proportion": 0.5851851851851851,
        "final_counts": {
            "POSITIVE": 79,
            "NEGATIVE": 56
        },
        "final_distribution": {
            "POSITIVE": 0.5851851851851851,
            "NEGATIVE": 0.4148148148148148
        }
    }
}