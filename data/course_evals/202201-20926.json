{
    "crn_code": "20926",
    "season": "202201",
    "enrollment": {
        "enrolled": 42,
        "responses": 38,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                0,
                1,
                1,
                14,
                18
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                0,
                0,
                4,
                13,
                17
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                0,
                1,
                7,
                8,
                18
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                1,
                3,
                8,
                15,
                7
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                1,
                2,
                5,
                26
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                0,
                4,
                3,
                27
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "Introduction to Algorithms and NP Hardness problems. How to write the most rigorous proofs you've ever seen, and how to think creatively to solve new problems.",
                "How to analyze different types of algorithms",
                "Lots! Greedy algorithms, graph algorithms, dynamic programming, divide and conquer, basic NP completeness results, and approximation \/ randomized algorithms. And how to reason about these problems.",
                "Designing and analyzing algorithms for theoretical and practical problems at the mathematical\/pseudocode level",
                "Learned some interesting algorithms like Karger's and Ford-Fulkerson, and learned how proofs in the field are done for familiar algorithms like greedy and dynamic programming.",
                "I learned how to explain algorithms and show how correct they are. The highlight of the class was learning proof techniques to show algorithms work and then apply these techniques to the very creative problems Prof. Spielman puts on the homework assignments.",
                "Greedy algorithms, scheduling problems, dijkstra, MST via prims and Kruskals, classic dynamic programming problems, divide and conquer including discrete Fourier transform, network flow, linear programming, famous NP hard problems and reductions, approximation algorithms, randomized algorithms",
                "Algorithms, algorithms, algorithms! Designing them but more importantly analyzing them. This was my second proof-based math class so I also learned how to make my arguments more rigorous especially in an applied fashion like algorithms is as opposed to pure math. We learned in order: greedy algorithms, elementary tree\/graph algorithms (minimum spanning, Dijkstra's), dynamic programming, divide and conquer, network flow, NP-complete problems, approximation algorithms, randomized algorithms, and a collection of random topics at the end (bipartite matching, SAT solvers, future classes to take).",
                "Writing proofs and analyses of algorithms. The units we had included greedy algorithms, dynamic programming, divide & conquer, flow, linear programming, NP, approximation and randomized algorithms.",
                "A strong understanding of different algorithms common in CS and their complexities. Most importantly though, I learnt how to think about and develop proofs for correctness and complexity, and have honed my problem-solving ability in the process.",
                "Throughout this course I learned a survey of different algorithmic techniques with an in depth mathemical justifaction",
                "Algorithms and how to prove things about them",
                "I learned a lot about algorithm analysis techniques, reductions, approximations, and randomization.",
                "How to solve hard problems!",
                "I was introduced to many aspects of algorithmic design and many of the introductory problems from which current algorithms research has sprouted. This class also helped me work on developing problem solving skills at a high level, particularly for problems that are almost never solvable without thorough thinking.",
                "Algorithm paradigm",
                "greedy algorithms, dynamic programming, network flow, linear programming, NP-hard problems, approximation algorithms, randomized algorithms",
                "This course was an excellent, rigorous introduction to algorithms and theoretical computer science! The main topics were greedy algorithms, dynamic programming, divide and conquer, network flow, NP, approximation algorithms and randomized algorithms.",
                "Algorithms and their proofs.",
                "Algorithm design\/analysis, advanced problem-solving practice, rigorous proof-writing, how to suffer without being able to turn to anyone",
                "Design and analysis of algorithms. Covers efficient polynomial time algorithms (greedy, divide and conquer, dynamic programming, network flow, linear programming), theory of np-hardness, approximation algorithms, and randomized algorithms.",
                "Through this course, I developed a relatively deep understanding of designing and analyzing a variety of algorithms, including greedy algorithms, tree algorithms, dynamic programming, divide and conquer, flow algorithms, linear programming, NP algorithms, and randomized algorithms. Moreover, I honed my general proof writing and problem solving abilities, as each problem set involved many hours of deep thought and investigation. Consequently, I also learned a lot about persistence when faced with tough problems, as well as self-direction due to the no collaboration policy of the course."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "Strengths: If Dan is teaching, one of the most interesting courses and teachers I've ever had. Great class covering interesting topics especially for students with a competitive mathematics background. \r\n\r\nWeaknesses: Extremely meticulous grading that could've been forewarned about at the beginning of class before first PSET was given back",
                "Strengths are the problem sets and the contents of lectures",
                "Strengths: Dan is fantastic, and he clearly takes teaching very seriously. You can tell that he's been refining the way he teaches this class for years. As far as weaknesses? The grading was really inconsistent, and oftentimes overly harsh. I thought the problem sets were doable (a couple problems that really made you think) and I know the material, but i'm not sure my grade will reflect that. Not sure how the final will go yet.",
                "This was one of my favorite classes, extremely engaging content\/difficult but interesting problem sets",
                "No collaboration policy wasn't great. Grading felt all-or-nothing, with lots of points docked for \"messiness\" (debatable).\r\n\r\nLectures were almost always super engaging, well-organized, and well-paced. Problem sets were tough but pretty consistently organized: one problem would be straightforward from class material while the other two would be either fun but hard to solve or extensions of class material. I think that structure is pretty good.",
                "The strength of this course was Prof. Spielman and the way he designed the syllabus. He loves teaching algorithms and he does a great job at it.\r\n\r\nThe only weaknesses of the course have to do with the way it is set up. I believe the homework assignments are graded quite harshly to the extent that too much time is spent worrying about perfecting details. In perfecting these details I feel I do not learn as much as when first trying to solve the problem. Furthermore, I felt that the final put too much emphasis on memorization and not enough emphasis on thinking.",
                "Very challenging course. Learned a lot of proofs to difficult and famous problems, but I feel like this course leaves it up to you to develop the intuition completely on your own when tackling the difficult problem set problems. This promotes a sink or swim approach which is not inherently an issue since this class is not for everyone, so either you have very strong mathematical problem solving abilities who can routinely draw great insights, or just have dozens upon dozens of hours to pour into this class. Arguably more time consuming or intellectually challenging than 323.",
                "Strengths: Dan's teaching is efficient and clear; the discussion of current advances in algorithms is also much appreciated. Most importantly, the problem sets are always very rewarding to complete. Weaknesses: the course has a no-collaboration policy, which is ostensibly designed to encourage insight and creativity. However, it is unlikely that this is actually being adhered to, leaving the moral, lone-workers at a disadvantage. I would like to see collaboration in groups of 2-3 to the point of discussing potential ideas to be allowed, to encourage some amount of discussion but still avoiding copying\/lack of understanding.",
                "The psets did take a long time but content was super interesting.",
                "I generally really enjoyed this class. However the grading could be arbitrary and very nitpicky. Dans lectures however were clear and great and the psets interesting. I did not enjoy the level of detail we needed for the exam.",
                "No final, the final is fairly useless",
                "I think the course content and problem sets were structured very well. Occasionally, the lectures felt a little too fast for me, but I enjoyed every lecture and learned a lot from each one.",
                "The delivering is not that intuitive",
                "Psets were extremely good. Lectures were extremely good (early on were a bit confusing, but became clear after). Textbook were extremely good. Overall very good.",
                "Strengths\r\n- Dan is awesome\r\n- lectures are rigorous yet engaging and motivated\r\n- problem sets are intellectually challenging\r\nWeaknesses and Possible improvements\r\n- collaboration policy: in principle, I agree with the no-collaboration policy as a way to practice having inspiration, as Dan put it. Indeed, in past math classes where there was unrestricted collaboration, I often found myself not learning as much. However, I am almost certain that there were many students in the class who collaborated despite this policy. Unless this no-collaboration policy is strictly enforced in future years, I find it unfair to students who actually respect it. \r\n- office hours: I am appreciative of all the ULAs\/TAs that helped me this semester. I would not have survived this class without them. However, I find that the format of office hours could be improved. 10 minutes is almost never enough to clearly present the thoughts of both me and my TA. While I understand that the no-collaboration policy motivated this format, I find that both policies can be slightly relaxed (for instance, having open office hours with controlled collaboration). I found myself struggling a lot in this class, and I often did not get the help that I needed since office hours were frequently in very short supply.\r\n- sections, or lack thereof: some lecture material gets VERY dense (for instance, the lectures on fast fourier transforms). It would be amazing if there were weekly optional sections that reviewed lecture material.\r\n- assumed math knowledge: this course assumes math knowledge beyond the prerequisites (MATH 244, which is just graphs and combinatorics), such as analysis (I am thinking of, for example, complex roots of unity). It would be nice to have a handout summarizing all the math we need to know for this course.",
                "This is the best course I've taken at Yale! Dan is a fantastic lecturerhis presentation of the material was always clear and engaging, and the lectures (and the class as a whole) were all extremely well-organized (our classroom had three blackboards, and Dan's lecture notes went so far as to include letters indicating which blackboard he would use for each part of the lecture). The problem sets, while long, contained lots of interesting problems, and I learned a ton from working through all the problems.\r\n\r\nThe only weakness I can really think of is the no-collaboration policy. While a fine concept in itself, it is simply unenforceable. I also felt that the final exam was quite difficult to complete rigorously in the given time (though it is curved).",
                "Strength: interesting material\r\nWeakness: feel like we went over lots of topics very fast.",
                "Strengths: The content is amazing. In lectures, Dan is a great teacher.\r\n\r\nWeaknesses: The class is conducted in a \"sink or swim\" model that is, simply put, not in line with how students best learn. We are trying to learn how to solve these problems, so why do they give absolutely no help in office hours? One can only make so much progress after hitting a wall. It is truly a shame that the class designed for a deeper understanding makes learning so hard. With one exception (Nhi who was awesome), the TAs would literally sit there and make you figure everything out - excuse me, we can do that on our own, thank you very much, and it wasn't working, that's why we're here! They didn't even correct us if we proceeded with something incorrect - in multiple cases, the TAs encouraged me down bad routes that took me hours to fix after the fact. With all due respect, I could do that job without having taken the class: I am capable of sitting and shrugging as someone works their way through the problem.",
                "The main strengths of this course were its strong organization and content, engaging lectures, and interesting problem set questions. Every unit of the course was presented clearly and in a logical manner, and they all combined to create a quite comprehensive view of discrete algorithms overall. Even when they were on challenging topics and thus a bit hard to follow, I found the lectures very compelling, and the ability to rewatch or look at the notes later was very helpful when working on problem sets. Speaking of the problem sets, they were generally quite interesting, with problems that felt like actual dilemmas faced in the real world as opposed to toy problems created to challenge us. Moreover, they were usually quite satisfying (if painful) to solve. This made the many hours of work required to finish them rewarding while also creating a deep understanding of the topics they covered.\r\n\r\nOn the other hand, the main weaknesses were the extreme difficulty of some problem set questions paired with the no collaboration policy and limited office hours assistance. By the nature of the course, many of the questions on the problem sets are very difficult, and thus you can spend many hours thinking about them with little progress. Because you cannot collaborate with peers, this brainstorming must be done alone, outside of short office hour slots that often involved only vague hints or assistance. As a result, there was an almost punitive feeling of struggling through a problem with little help or collaboration, when a well-given hint or aha moment would allow you to solve the problem quickly. I think having a more comprehensive help line or way to get hints would improve this, or maybe some kind of limited collaboration model (e.g. a moderated brainstorming session with a ULA and a few other students). Additionally, it was sometimes hard to get a slot on crowded days, and grading was very slow, both of which could be helped by a larger ULA staff."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "Absolutely, Dan is one of the greatest CS professors and explains complicated and interesting topics with a passion making it easy to understand.",
                "Yes if you have a background in proofs and math and are willing to put in a lot of time",
                "If you like algorithms and math, then definitely yes. While the class was difficult, you should be able to do it if you're used to reasoning about discrete math (like in 244).",
                "If you are a computer science student with time in your schedule and are interested in rigorous proof based analysis then go for it",
                "To those very well-versed with proofs and willing to put in the time\/patience occasionally needed to just sit there and problem-solve for many, many hours at a time with no idea whether or not the solution will come? Yes. Not for everyone, though.",
                "Yes. If you are a math student you should take this course to try something more applied. If you are a CS student you should take this course to become more familiar with proofs. Either way it is a great class to take.",
                "Keep in mind the philosophy of this class is that the smartest of the bunch will get the most out of this class, and if youre not among the top in terms of raw mathematical problem solving ability with insane intuition, you need to be prepared to pour dozens upon dozens of hours weekly to tackle the problem sets. Given that the official policy is no collaboration, this really suggests that you either swim or sink in this kind of course. Probably the most intellectually demanding course Ive taken at Yale and I did decide to stick it to the end despite having seen many of my friends drop to 365 in the middle, at the cost of routine bi weekly all nighters. Definitely worth taking and then you can drop to 365 later if you realize that it is not worth your time and effort, as your grades will be transferred. I did learn quite a bit of content but I dont think this is a class where you can expect to just learn this intuition of solving algorithmic problems directly from lectures, but instead have the problem sets mess with your mind for weeks on end - and hopefully enough time passes so that after many hours of sleep lost, a flash of inspiration comes to you eventually.",
                "This is the perspective of a CS & Math major with more programming experience than math experience. You should only take this class if you know what you're getting yourself into! THIS IS A MATH CLASS NOT A CS CLASS. Realize that 80 kids signed up to take this class (already a self-selecting bunch) and that half the class ended up dropping it because it was so ridiculously hard. To me, this class made CS 323 and MATH 244 felt like child's play. The kids who stuck it out are mathy to some degree whether it is because you are strong in math or are also some sort of math-adjacent major. I guess 366 might not exist in the future so this review might not be so relevant but I have lots to say about the class! This class is very difficult and time-consuming for me. PSETs often took me 15-30 hours EACH and I would have to block off several entire days to do them whenever they came out. The material is very important and very rigorous. It often makes no sense the first pass around but looking back on it, it is so elegant and important. The thing that I did not like most about the class was the no collaboration policy because the problems were so hard and borderline impossible to do without collab and most of the kids I knew collabed. I feel like collabing does not sacrifice learning so I think they should get rid of the no collab policy. We learned in order: greedy algorithms, elementary tree\/graph algorithms (minimum spanning, Dijkstra's), dynamic programming, divide and conquer, network flow, NP-complete problems, approximation algorithms, randomized algorithms, and a collection of random topics at the end (bipartite matching, SAT solvers, future classes to take).",
                "Probably only if your other classes this semester are light since the problem sets often take 10 to 20+ hours.",
                "If you're interested in understanding the conceptual basis behind algorithms, and understanding different problem-solving strategies on a deeper level, take this course. It is a lot of work, but work that is well worth your time.",
                "I would recommend this course to another student if they really enjoy to see a rigorous mathematical justifaction for different material they learn and enjoy thinking about difficult problems even if it does take a long time.",
                "Yes! I learned a lot in this course. The PSETS were very difficult at times but it was a great experience trying to solve them.",
                "I would recommend it. You learn a ton, but it is very challenging. Make sure to start early and go to office hours. That said, dont take this on if its not a priority for you  it is a lot of work.",
                "Yes if you like pain",
                "To be honest, it depends, since I think the regular algorithms class is better suited for many people. For those with an extensive background in math\/cs competitions, this class is definitely the go-to, but otherwise this class might feel too fast or too work-intensive and ultimately might be not as fruitful as 365. I'd definitely recommend anyone unsure to shop both classes if possible.",
                "Yes, if they want to learn about algorithms intensely.",
                "Yes, but be very cautious. You might have heard that this course is a lot of work, but that's only half of the story. This course is also incredibly difficult and mathematically-demanding. As someone who has taken three proof-based math classes at Yale before taking this course, I still found myself struggling and completely overwhelmed by the mathematical difficulty of the problem sets. You need to be good at having mathematical inspiration, and you definitely need to have a really mature mathematical background beyond what's listed in the prerequisites (MATH 244), analysis in particular. In short, I would recommend this course if you believe you are really good at math. Otherwise, feel free to give it a try --- but be prepared to suffer a lot (as you might be able to tell, I am speaking from personal experience).",
                "I would recommend this course without hesitation to any student who is interested in an introductory algorithms class, loves math and has experience writing rigorous mathematical proofs. This is the best course I've taken at Yale, and Dan is a fantastic professor and lecturer. Be prepared, however, to spend significant amounts of time on the psets (there is usually one pset every three lectures, and I found myself spending around 15-20 hours on each assignmentwhich includes thinking about the problems and writing out the proofs).\r\n\r\nIf you are a CS major deciding between 365 and 366, you have the option to start with 366 and drop to 365 later in the term. There are many students who do this, and if you're interested in 366 but worried about the difficulty\/workload it's definitely an option you should consider!",
                "Yes if you like math and CS.",
                "If you have lots of math, CS, and proof-writing experience, go for it. The material is awesome and you get to learn from Dan, who is the GOAT in his field. That being said, the course's mode of assessment is terrible. I have never seen a system less supportive of students and less conducive to our overall learning and success. Even for a STEM class, the course community was nonexistent, in large part owing to the no collaboration policy on assignments. I understand why the policy is in place, especially for advanced algorithms problems, but the flaws outweigh the strengths. Most notably, it makes it impossible to get help from anyone on any problems, since the office hours (10 minute appointments one-on-one) are by and large useless. (I joked during the semester that office hours are my proof that P<NP, because TA help was not P - I could not get a solution from what they told me - but it was NP, since I could verify an existing solution from what they told me.)  I want to give Dan the benefit of the doubt and say that he thought his hints were helpful, but he didn't realize that us common folk need bigger hints than he does, but I don't even want to consider the alternative. The class is conducted in a \"sink or swim\" model that is, simply put, not in line with how students best learn. We are trying to learn how to solve these problems, so why do they give absolutely no help in office hours? One can only make so much progress after hitting a wall. It is truly a shame that the class designed for a deeper understanding makes learning so hard. With one exception (Nhi who was awesome), the TAs would literally sit there and make you figure everything out - excuse me, we can do that on our own, thank you very much, and it wasn't working, that's why we're here! They didn't even correct us if we proceeded with something incorrect - in multiple cases, the TAs encouraged me down bad routes that took me hours to fix after the fact. With all due respect, I could do that job without having taken the class: I am capable of sitting and shrugging as someone works their way through the problem. The class is clearly set up so we are not expected to solve all the problems on the psets; why, then, is the A cutoff 92%? With the way problems are graded, partial credit is a rarity, so with 3 problems 10 points each (occasionally split into 5pt parts) you aren't getting a 92 average without 100s on most of the homeworks. Learning by failing is a valid educational philosophy with its merits; however, the course staff has to realize that these days, cometh the hour, failing isn't an option. Grad schools care about grades (even if they shouldn't). We should be rewarded, not penalized, for taking a challenging class in an attempt to learn the content more in-depth. And unless you're otherworldly smart, 366 instead of 365 isn't a good trade-off for that reason. But that is deeply disappointing because of how great the class content is: I have no doubt that I learned more than I would've in 365, and I'd encourage anyone up for a challenge to do 366, but just know that you might not see the rewards for doing so until long into the future.",
                "If you have a serious interest in software engineering, hardware, data science, scientific computing, etc. this course is a must.",
                "I would recommend this course to any student with a strong background in both computer science and mathematics who wants and is able to spend a lot of time solving challenging problems. I would not recommend taking this course alongside many other difficult courses, or if you are particularly uncomfortable with proofs. However, if you can make the time for it, the problem solving aspects of the course can be very rewarding, and it should prepare you well for algorithms on technical interviews and computer science in general. Still, you definitely have to be prepared for lots of hard work and frustration."
            ]
        }
    ],
    "extras": {
        "title": "CPSC 366 01\/ECON 366 01 - Intensive Algorithms"
    }
}