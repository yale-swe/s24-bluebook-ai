{
    "crn_code": "17212",
    "season": "202303",
    "enrollment": {
        "enrolled": 72,
        "responses": 42,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                0,
                1,
                7,
                7,
                23
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                3,
                4,
                6,
                10,
                15
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                3,
                3,
                7,
                9,
                16
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                4,
                3,
                7,
                15,
                9
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                0,
                1,
                8,
                30
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                0,
                0,
                2,
                37
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "computer systems and architecture at the introduction level",
                "As weird as this is to say, this is a survey class. This means the instructors will shotgun all the topics in computer systems, from circuits to building a fully functional operating system. The lectures take a bottom-up approach, where the student starts with learning how a circuit works to understand how compilation and processes work. The Psets, on the other hand, take a more top-down approach, where on the first psets, the students build a user-space application, then work in lower levels of abstraction until ultimately they build an operating system. \r\nThis class can be 100% gamed with proper preparation. For highly motivated students, I would recommend they take EENG 201 before 323 to understand the first 25% of the class. For all things Linux and C, the new CPSC 175 can help students prepare more on top of 223. Also, come into this class with a very solid understanding of GDB; it will save you at least 20 hours per pset. There exists a ton of tutorials on how to use GDB properly, and the class also has a GDB study session, so make sure you attend those. \r\nOther notes: Pay a lot of attention during the lectures on Assembly programming and virtual memory. These can be dense, but they are very useful knowledge for the class.\r\nIn case you still want to be prepared, but do not want to take extra-classes, I would still recommend you read a bit about these subjects(or watch on Youtube): digital circuits and logic, simple Linux commands, GDB, and a some good C programming language memory management best practices(for PSET 1 and 4, which are the hardest). \r\nAt the end of this, you will learn a ton and will be able to apply it to other fields. This class helped me discover my passion and I hope it helps you too who is reading this.",
                "Number representation, ALU design, computer architecture, instruction set architectures, assembly programming, optimizing compilers, memory allocators, operating systems, the process abstraction, virtual memory, inter-process communication, program locality, hardware and software caches, and address translation. Teaches how to deal with massive codebases and proper unit tests.",
                "Learned a lot about assembly code, floating point numbers, compiler optimizations, computer architecture, memory layout, virtual memory, caches, processes, and more!",
                "I learned a ton about how computers actually work on a low level. I feel like this course really pulls back the curtain on computers and operating systems so that they don't just feel like magical black boxes. I came out of this class with a much greater appreciation for and understanding of all the little things that go into each thing a computer does. However, it's not purely academic/theoretical. In fact, more so than any other computer science class I've taken at Yale thus far, I felt like this class made me a better programmer.",
                "A lot of knowledge about how computers work and how to program at a low level. I learned about computer architecture, memory, data representation, assembly language, compilers, operating systems, virtual memory, and caching. I also worked on several projects that helped my C skills and ability to work on large codebases and understand low-level concepts.",
                "Loads of experience working with large C/C++ codebases and adding / fixing partially implemented features. Topics included text processing (think: how does LaTeX compile your code into a PDF, expanding your macros, etc?), implementing some features of the shell (cd, pushd, popd, redirecting output from commands), writing and debugging assembly code, writing a whole compiler (well, the backend of one, and even some code optimizations - that was too intense), implementing malloc / a basic version of valgrind, implementing the memory allocation for an operating system, and all the various concepts and procedures associated with these things... processes, forking, physical vs virtual memory, pagetables, etc etc.",
                "Some of the \"behind-the-scenes\" of computer science - memory management, the shell, compilers & assembly language",
                "This is a survey course in how computers work. You will learn a little bit about everything and not much about anything. As always with survey courses it is a little dissatisfying because you don't get depth, but you definitely get breadth! You also will become good at debugging if you weren't already!",
                "time management for larger projects",
                "Lots of knowledge of computer systems from circuits to operating systems. I learned how to digest a huge problem specification and break it down into digestible sections I could code each in a reasonable time. I grew tremendously as a programmer in this course.",
                "As a CS/Econ major, I developed a lot of programming skills in C specifically through this course. I also learned some various more conceptual facts about computer architecture and how they are designed.",
                "In depth content about how a computer works and low level computer programming. The course also forces you to be proactive and organized, otherwise you cannot finish any projects or exams in time.",
                "I learned a lot about low-level computer structure and systems programming.",
                "Resilience",
                "I got much better at writing easily-debuggable code, as well as debugging code, even in situations that were difficult to debug, especially when working with WeensyOS, because the error messages were difficult to interpret. For example, I learned to better modularize my code and preserve abstraction.\r\n\r\nI also learned much more about assembly (such as how to read it), hardware, caches, page table, OSes, and virtual/physical memory.",
                "Perseverance, time management, computer science skills",
                "Great class honestly, my favorite CS one yet, lots of work but you really learn computer \"science\"",
                "We learned about memory management, compilers, assembly, process management, etc. -- a general intro to all things systems!",
                "This course has taught me a lot of things about computer science and, in general, has made me a better developer.",
                "In this class, I obtained a basic understanding about computer systems, including assembly code, compilers, the Linux terminal, and operating systems. In addition, I developed and improved my ability to code in C."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "This course is incredibly disorganized. I'm not sure why we're fighting to make new intro computer science courses, when this preview course does a poor job at surveying many of the areas in computer science well. This survey format only makes sense if you have an amazing, stellar professor who knows his stuff and can teach to it, and unfortunately Abhishek was not teaching this semester. Compiler unit with Jay was great, everything else was not that good.\r\n\r\nWoefully disorganized, at times felt like going to class was useless.",
                "Strength: Jay and Jim.\r\nWeakness: Some uninteresting classes on digital logic, and kernel development which I ended up teaching myself and becoming interested in when it was a bit too late(by the final).",
                "Strengths - one of the most organized course on campus (kind of has to be given the workload), and the professors taught at a fair pace for all the material covered. Weaknesses - a LOT of work",
                "Strengths: The problem sets were challenging but interesting and well designed. I felt like they were the right balance between difficult and doable, and were honestly much less work than some of the horror stories I heard going in. If you are scared of this class because of the workload but you have coding experience, just be a little skeptical of all the over exaggeration. Ed Discussion was super helpful. The professors were good, especially Jay Lim. Jay Lim is definitely the best CS professor I've had so far. The lectures were generally pretty good.\r\nWeaknesses: This class should be 1.5 credit.",
                "I learned a lot. But it was really hard.",
                "Strengths: Great and supportive staff! Jay and Jim are both awesome teachers, they really know their stuff, and I think they care about their students.\r\n\r\nWeaknesses: This course is way too hard! I don't care what they say about \"oh we need you to feel what it's like in the real world, out there in industry, real deadlines, whatever, we need to push you and stress you and strain you to the limit so you can really learn,\" man, that's just messed up. Spread it out over two semesters and maybe the students will actually be able to dig in and soak it up and learn and absorb and practice, rather than losing sleep and getting sick and cutting corners and feeling despondent and squished by the work. How, how do you make a course where each problem set is supposed to take 30 or 40 hours, and then give that course to students who are taking three or four other Yale courses? What? The basic math doesn't work. There are only 168 hours in a week.",
                "Strengths: The material is good to know as a computer science major\r\n\r\nWeaknesses: Lectures were difficult to engage with, too much time and stress placed on psets that were designed to teach implementation but didn't really help me learn and apply the actual concepts we were taught.",
                "Strengths:\r\n\r\n1) Fun psets!\r\n2) Interesting lectures!\r\n3) Reading sections are super cool!\r\n\r\nWeaknesses:\r\n\r\n1) The PSET specs could be streamlined. Oftentimes crucial details are buried within the spec and underemphasized or vaguely referred to when they should be more clearly stated. I know this is part of the challenge with the course, but I really do think the specs could be made more student friendly. \r\n\r\n2) The first PSET is unjustifiable. All it does is punish those who are less experienced with C and programming coming into the course (i.e I would imagine it harms those who are coming from less conventional CS backgrounds). It doesn't actually teach anything related to systems programming. If they want CS323 students to be able to complete that PSET, maybe they should have it as the final for CS223. That is all.",
                "This course is overall well organized and well taught. The extremely high out of class workload is expected but is not that difficult to manage with the extensive office hour support. Most of what I learned from this course had to do with managing the high workload, so in some ways the workload is a strength. Overall, this is a very good course.\r\n\r\nThe biggest problem I had with the course is the uploading of mandatory lectures outside of lecture time. While I can't pull up any academic regulation to this effect, I have always had a reasonable expectation that professors were expected to fit all lecture content within the class meeting times and this has never been violated in 3 years at Yale. I think if the course requires professors to upload multiple mandatory lectures for students to watch on their own time it needs to be pared down or the lecture time needs to be increased.",
                "The course is not designed for student success. The drop rate should not be as high as it is. The course is very difficult, but worse, it has an environment that is unsupportive and often leaves you feeling less intelligent than you started. Unfortunately, this is a combination of both students, TAs, and professors.",
                "A strength of this course is simply how much content that you in essence are forced to learn through the PSETs. You get to develop a lot of technical skills that I think I missed out on in 223. The biggest weakness was how the PSETs don't really relate to the lecture material very much, in that you kind of are just thrown into the deep end to figure out the PSETs on your own. This was pretty difficult for me as someone without a ton of programming experience.",
                "Weakness: literally no feedback about projects. apart from a few public test cases (sometimes), there is very little transparency about why you didn't pass certain tests for a project which means that it's very hard to improve as a coder/student since you don't know what you did wrong or what you could fix in the following project. \r\n\r\nSmall, (semi-)weekly discussion sections/labs with assigned TAs for each student (as is common at other schools ... could be made optional) would be a good way to provide direct feedback about project results or coding style if students would like it. Also this would probably make office hours wait times a little shorter",
                "Professors are great and caring. There are multiple OH every day. Material is very interesting.",
                "I think this course is organized and taught very well.",
                "It's so hard. good class but hard",
                "There are definitely things that can be improved about this class  like the homework quizzes that take an additional hour or two are the worst after your psets (Jay said that these quizzes are so that students can go seek online/other resources to learn concepts not talked about in class. I feel like instead of packing to the brim for this class, there can be a better system instead of putting additional work when you're already dedicating so much to this class with the 3 or 4 other classes you need to take!!). Similarly with exams in a quick turnaround after your pset deadlines. 323 and systems is just a whole lot of work, and that's okay, but a lot of these supplemental things are just additional work probably carried over from the creation of the class just feel like a rite of passage.",
                "Strengths: psets were very engaging and helped me get a very very in-depth knowledge of the concepts presented in lecture.\r\n\r\nWeaknesses: high workload. Furthermore, the quizzes were very unrelated to the lecture material, which made it feel organizationally lacking. Furthermore, the walkthroughs were often unhelpful because they only discussed the content at a high level, but discussing them at the implementation level would've been more helpful (alternatively, it would've been good to help the students understand the starter code, since it was confusing and poorly-written)\r\n\r\nIt could be improved by having starter code that is better-commented. Instead, the current starter code is replete with all sorts of confusing abbreviations and a lack of comments that only serve to obscure students' understanding of it.\r\n\r\nFurthermore, office hours were very helpful, but there were not enough, and I often felt lost once they ended. Hiring more ULAs would be a drastic improvement.",
                "Strengths: material\r\nWeaknesses: the amount of material, the difficulty of the material, the entire course",
                "The fact that this class is required for my major is a joke. Every problem set is made so much more tedious than it has to be just so that they can say the cs department has the hardest class. There is no reason that the problem set have to be as long as the are. I wouldnt even say the psets are challenging, they are just tedious. This class made me hate cs. I will never use any of the information taught in this class ever again and was not interested in the material ever (because it has nothing to do with my interests). Either make the class have less material on the psets or make it not required for the joint majors.",
                "The grading is rough. The PSET grading give me a heart attack every time. I don't think the class made it sufficiently clear that the PSETS don't necessarily reflection your grasp of concepts in the class but rather is meant to teach you about something else entirely--namely coding and managing large code bases.",
                "I think the main strength of this course is that it's very well taught and that the content is super interesting! No weaknesses really come to mind",
                "Strengths:\r\nThis course teaches a lot of important things to know about computer science.\r\n\r\nWeaknesses:\r\nIt seems like the focus of the tests and the exams is not the material but rather just an attempt to make things difficult.",
                "Strengths: The course covered a lot of material in a short amount of time. Exams were comprehensive and well communicated ahead of time, so preparing for them allowed me to better learn the material.\r\n\r\nWeaknesses: There are only 5 problem sets, but they were massive and difficult. I don't feel like they were the best way for me to learn. It felt like we learned something one week and were expected to be experts in it the next week. I would recommend the psets to be smaller, but in addition include another small assignment that enables us to practice working with a concept before applying it to something huge."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "Yes and no. It wasn't that bad, but it was still very bad.",
                "Very rewarding, very demanding.",
                "Yes, but be careful. I thought that taking 223 was going to be the absolute lowest point in my life, but gosh was I so wrong. The psets in this class will make you question everything in your life, but it will also help you grow as a person, a student, and a computer scientist. The midterm was absolutely brutal in terms of grading, and the psets took forever. However, if one starts early this class can 100% be one of the most rewarding classes one can take in their undergrad.",
                "I would recommend this course, but only if it is required for your major and you are taking less than 5 credits.",
                "Ah yes, the infamous 323 class. I can finally say that I have taken it and as a result can provide feedback on this course. If you are a CS major, then yes, of course take it, since it's required. However, expect to spend at least 40-60 hours a week on each PSET. PSETs are super long and extremely confusing, but line up well with the content of this class. If you come to lecture with a genuine interest in computer science, then you will do fine in PSETs. Also expect to live in office hours, or do work in office hours since debugging on your own will eventually drive you mad on the PSETs. That said, if you are not a CS major, then theres an important distinction to make about what this class is and what this class isn't. This class is not software engineering, web development, data structures, or any of the more \"popular courses\" at Yale. This is actual computer science, as in the theory of computer science. You discuss what makes a computer a computer, how it's insides work. As Jay put it, you become a computer scientist and logicist, not a software engineer. Specific topics include Compilers, Operating Systems, briefly Architecture, Caching, Hardware. Computer components, deeper memory information, etc! Be prepared to work hard!",
                "If you are a computer science major, you'll have to take this course so... prepare yourself for the heavy workload through good time management and taking advantage of office hours help!",
                "Yes. Take this course. Don't be afraid, you will make it through and you will learn a ton. There's a reason this course gets such high ratings despite it's workload (which is exaggerated). Jay Lim is amazing. The problem sets are well designed, interesting, and just the right. amount of challenging. There are 5 psets the whole semester. I spent about 20-25 hours on the first one, and 10-15 hours on the remaining ones, but I honestly enjoyed doing them and it didn't feel like a chore (average of about 8-10 hours per week on this class including lecture  again, don't believe all the exaggerations you here). The midterms were challenging but with a generous curve which is actually kind of nice because you don't have to aim for perfection.",
                "Yes. But start early on the psets.",
                "No. It's too much. If it were your only class, it would still probably be too much. If you're interested in this stuff, try to teach yourself, get the assignments from a friend and practice on your own time, watch YouTube videos. There are better ways to establish an understanding of the topics taught in this course.",
                "Only if you have to take it as part of the Computer Science major. It's educational, but the sheer time and energy it takes to complete psets are a lot. I knew going in that it would be a rough semester because of this class and even still it was tough to juggle with everything else going on.",
                "If you are reading this, you are probably already taking this course or thinking about taking it because you have to for the CS major. It doesn't matter whether I recommend this course to you because at some point you have to take it. I am however recommending this course to all of my enemies no matter their major.",
                "I think the content is very interesting and the course allows one to grow a lot as a computer scientist, but the workload is so high that for a non-major it is not accessible unless you schedule yourself around taking the course. That said, I do think the course is very valuable so I would strongly recommend it with the caveat that the student has a strong programming background, has the schedule space, or must take it as a CS major.",
                "If you're taking it, you likely have to.",
                "Well, it is required for all CS majors, so you don't really have a choice. But, if you DO have a choice, I would most likely not recommend it unless you simply are extremely interested in getting a solid understanding of computer systems and programming related to it. In this case, you should be prepared to have a semester where you can focus on 323.",
                "If you're interested in systems, you will love the course. Otherwise, good luck, as it will demand a lot from you.",
                "Yes, but only if you like computers.",
                "Only if it's a req.",
                "What everyone else says about being prepared and allocating time to this class is correct (unless you're cracked)! Knowing that it's a core class, I feel like the only thing to make it more enjoyable is to find value in the concepts learned in class and also take advantage of your resources like OH, making friends, and Ed Stem (in addition to making sure you have the bandwidth to dedicate to this class). I feel like overall, I still really appreciate learning the concepts and the psets, and it definitely did build my programming skills by coding in more volume. However, there are definitely things that can be improved about this class  like the homework quizzes that take an additional hour or two are the worst after your psets (Jay said that these quizzes are so that students can go seek online/other resources to learn concepts not talked about in class. I feel like instead of packing to the brim for this class, there can be a better system instead of putting additional work when you're already dedicating so much to this class with the 3 or 4 other classes you need to take!!). Similarly with exams in a quick turnaround after your pset deadlines. 323 and systems is just a whole lot of work, and that's okay, but a lot of these supplemental things are just additional work probably carried over from the creation of the class just feel like a rite of passage.",
                "Yes, but only if I believe that they are prepared to handle the tough workload. It is a difficult experience that only becomes rewarding if the student can successfully complete the psets, which necessitates a strong ability to learn from lecture and to code well.",
                "Not if you can help it. This course almost seems to be purposely organized to be as difficult as possible (except for the TAs). There is so much material and it is so difficult and time-consuming I would not recommend taking this course unless absolutely necessary, and if at all possible take it over 2-3 semesters.  (Most kids do, and it was a massive mistake not to).",
                "Never unless it is required for their major.",
                "Yes! It is a super interesting class, just take 3 others with it",
                "Yes, after 323 you will never find another class difficult. Opens you eyes about how difficult a class can be.",
                "I would highly recommend this course to anyone even vaguely interested in CS/computers more generally. This course will give you an intro to how computers work under the hood, and I think that's super fascinating!",
                "I would recommend this course only to students who want to major in CS.",
                "I would recommend this course, with the warning that it will be a ton of work."
            ]
        }
    ],
    "extras": {
        "title": "CPSC 323 01 - SystemsProgramng&ComputerOrgzn"
    },
    "sentiment_info": {
        "YC401": {
            "sentiment_labels": [
                "neutral",
                "neutral",
                "neutral",
                "positive",
                "positive",
                "neutral",
                "neutral",
                "neutral",
                "neutral",
                "neutral",
                "positive",
                "positive",
                "neutral",
                "neutral",
                "neutral",
                "positive",
                "neutral",
                "positive",
                "positive",
                "positive",
                "positive"
            ],
            "sentiment_scores": [
                0.5756044387817383,
                0.745918869972229,
                0.6284131407737732,
                0.7599695324897766,
                0.9022449254989624,
                0.6210526823997498,
                0.7128016948699951,
                0.731869101524353,
                0.5654263496398926,
                0.535456120967865,
                0.8086633682250977,
                0.7528377771377563,
                0.6193414926528931,
                0.4961875379085541,
                0.5222485065460205,
                0.6524938941001892,
                0.5034328699111938,
                0.9584724307060242,
                0.536570131778717,
                0.9567312598228455,
                0.7028315663337708
            ],
            "sentiment_counts": {
                "neutral": 12,
                "positive": 9
            },
            "sentiment_distribution": {
                "neutral": 0.5714285714285714,
                "positive": 0.42857142857142855
            },
            "sentiment_overall": [
                "neutral",
                12
            ]
        },
        "YC403": {
            "sentiment_labels": [
                "negative",
                "neutral",
                "positive",
                "positive",
                "neutral",
                "positive",
                "neutral",
                "positive",
                "positive",
                "negative",
                "neutral",
                "neutral",
                "positive",
                "positive",
                "negative",
                "neutral",
                "neutral",
                "neutral",
                "negative",
                "negative",
                "positive",
                "positive",
                "neutral"
            ],
            "sentiment_scores": [
                0.8049655556678772,
                0.7130977511405945,
                0.49726465344429016,
                0.8175147771835327,
                0.5377617478370667,
                0.6281366348266602,
                0.520647406578064,
                0.5819035768508911,
                0.5967907309532166,
                0.8561143279075623,
                0.5937074422836304,
                0.4841848909854889,
                0.8898884057998657,
                0.8080770373344421,
                0.7569352984428406,
                0.5239858627319336,
                0.591280460357666,
                0.7556953430175781,
                0.886942982673645,
                0.8517497181892395,
                0.9133490920066833,
                0.6718536019325256,
                0.49158725142478943
            ],
            "sentiment_counts": {
                "negative": 5,
                "neutral": 9,
                "positive": 9
            },
            "sentiment_distribution": {
                "negative": 0.21739130434782608,
                "neutral": 0.391304347826087,
                "positive": 0.391304347826087
            },
            "sentiment_overall": [
                "neutral",
                9
            ]
        },
        "YC409": {
            "sentiment_labels": [
                "negative",
                "neutral",
                "neutral",
                "neutral",
                "neutral",
                "neutral",
                "positive",
                "neutral",
                "negative",
                "neutral",
                "neutral",
                "positive",
                "neutral",
                "neutral",
                "positive",
                "neutral",
                "neutral",
                "positive",
                "neutral",
                "negative",
                "neutral",
                "positive",
                "neutral",
                "positive",
                "neutral",
                "neutral"
            ],
            "sentiment_scores": [
                0.8033511638641357,
                0.6528519988059998,
                0.3926011323928833,
                0.8190417885780334,
                0.5346910357475281,
                0.6337575912475586,
                0.9307329654693604,
                0.8524717688560486,
                0.6993541121482849,
                0.4849797189235687,
                0.773677408695221,
                0.7548240423202515,
                0.8316773772239685,
                0.643503725528717,
                0.7782655954360962,
                0.7863426804542542,
                0.7877466082572937,
                0.6734883785247803,
                0.5415170192718506,
                0.8515927791595459,
                0.581001341342926,
                0.9652126431465149,
                0.5736810564994812,
                0.9115093946456909,
                0.8264272809028625,
                0.5604841113090515
            ],
            "sentiment_counts": {
                "negative": 3,
                "neutral": 17,
                "positive": 6
            },
            "sentiment_distribution": {
                "negative": 0.11538461538461539,
                "neutral": 0.6538461538461539,
                "positive": 0.23076923076923078
            },
            "sentiment_overall": [
                "neutral",
                17
            ]
        },
        "final_label": "neutral",
        "final_count": 38,
        "final_proportion": 0.5428571428571428,
        "final_counts": {
            "neutral": 38,
            "positive": 24,
            "negative": 8
        },
        "final_distribution": {
            "neutral": 0.5428571428571428,
            "positive": 0.34285714285714286,
            "negative": 0.11428571428571428
        }
    }
}