{
    "crn_code": "13382",
    "season": "202203",
    "enrollment": {
        "enrolled": 119,
        "responses": 85,
        "declined": null,
        "no response": null
    },
    "ratings": [
        {
            "question_id": "YC402",
            "question_text": "Your level of engagement with the course was:",
            "options": [
                "very low",
                "low",
                "medium",
                "high",
                "very high"
            ],
            "data": [
                3,
                4,
                19,
                27,
                18
            ]
        },
        {
            "question_id": "YC404",
            "question_text": "What is your overall assessment of this course?",
            "options": [
                "poor",
                "fair",
                "good",
                "very good",
                "excellent"
            ],
            "data": [
                1,
                8,
                14,
                29,
                18
            ]
        },
        {
            "question_id": "YC405",
            "question_text": "The course was well organized to facilitate student learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                2,
                11,
                6,
                31,
                20
            ]
        },
        {
            "question_id": "YC406",
            "question_text": "I received clear feedback that improved my learning.",
            "options": [
                "strongly disagree",
                "disagree",
                "neutral",
                "agree",
                "strongly agree"
            ],
            "data": [
                5,
                11,
                12,
                24,
                18
            ]
        },
        {
            "question_id": "YC407",
            "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                2,
                12,
                37,
                16,
                3
            ]
        },
        {
            "question_id": "YC408",
            "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
            "options": [
                "much less",
                "less",
                "same",
                "greater",
                "much greater"
            ],
            "data": [
                0,
                6,
                36,
                22,
                6
            ]
        }
    ],
    "narratives": [
        {
            "question_id": "YC401",
            "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
            "comments": [
                "Learned more about Python, Flask, CSS\/HTML, SQL, JQuery and more, as well as more theoretical CS concepts.",
                "Flask, Jinja, SQL, Pyside. You can actually build an HTML\/CSS\/JS website at the end through this class.",
                "I learned about useful industry level programming languages and applied them during the psets\/ midterm\/ project",
                "I learnt how to create web applications (mainly using Python and Flask) and also work as part of a group for projects.",
                "how to make a 3 tier web application: python, javascript, html, css, sql",
                "Web Dev",
                "Ajax, Jinja, Flask, Python, JavaScript, a little CSS, PyQt",
                "Full stack web programming (not React though)",
                "This class teaches the breakdown of a networked application into three tiers: Presentation, Application, and Database; then it teaches you about each tier in detail. For homeworks, we built four iterations of an application very similar to CourseTable. The first was a command-line interface querying a SQLite database; the next was a GUI over this command-line program; the next was a locally-hosted website (html\/css\/js) querying the same database; and the fourth was a locally-hosted website that queried Yale's Courses and Subjects APIs to pull and sort data before presenting it. Lectures covered internet protocol in depth, including the development of the systems we use and take for granted today (HTTP, how routers work, how requests are made and received, some encryption details), as well as database implementations (SQLite, SQLalchemy, database design); plenty of HTML and Javascript, loads of python, some nice overlap with the material covered in CPSC 327 if you can take it concurrently. By the end you'll be able to cook up a basic website and run it on your computer. Other people will be able to access it from their devices, provided with your IP address. It's cool!",
                "learn how to make full stack applications in Flask, SQL.",
                "I learned so much in this course! Ive never worked with databases, or SQL \/ SQLite, its been years since Ive worked in Python, Im not sure Ive ever learned how client-server communications really work until now (and HTTP requests)! The list could keep going. As a front-end web designer and developer, Ive wanted to learn how to do server-side web programming for years but have had trouble learning independently from internet resources. Im so glad this course was offered when it was!",
                "git, python, a bit of GUI stuff, Flask, Jinja, JQuery, some Javascript",
                "Different technologies in each tier of a full stack application, how to create an API, how to create desktop and web apps in Python, and working in a group development project",
                "full stack in python",
                "I reviewed my pre-existing knowledge of web development, and also learned more about CSS, JavaScript and Flask, as well as some of the fundamentals of HTTP.",
                "knowledge about client and server technology",
                "Low-level tools in web programming starting from http requests up to HTML\/CSS\/JS with simple frameworks like Flask.",
                "Reviewed various concepts related to full stack web development. Discussed front end web languages: HTML\/CSS and JavaScript including jQuery and rudimentary React; as well as back end techniques from old fashioned CGI programming to modern Flask based server design.",
                "Different methods and practices regarding full stack web programming.",
                "Intro webdev.",
                "Great general fullstack knowledge",
                "Software engineering and programming techniques. Python, Javascript, Flask, SQLite, and HTML and CSS. Mostly development for internet applications.",
                "Using databases",
                "Learned how to code in Python, how to use an API, the ins and outs of web development, html\/css, and a whole lot more",
                "I improved my understanding of full stack web development and the various technologies used such as flask, django, and react.",
                "Full stack web programming",
                "Writing full stack applications.",
                "Building a website from end-to-end and learning how to adequately manage each portion in web development.",
                "I learned client and server-side programming, creating Flask apps, and some HTML\/CSS.",
                "how to build a functioning web app with a tech stack of python, html\/css, flask, bootstrap, SQL and other good programming practices (e.g. style checking)",
                "Developed a good surface level understanding of how fullstack web apps work; Im pretty confident in setting up my own apps quickly now.",
                "I learned about various techniques to develop full-stack web applications (Flask, JavaScript, HTML\/CSS).",
                "I learned a lot of Python, SQL, Flask, HTML, CSS, and Javascript. Python was by far the most important language learned during the course.\r\nI have a much stronger understanding of how web applications work and how they are created. Although we mostly used Python (and Flask, towards the end), I felt the concepts translate well into other frameworks (e.g. React).",
                "Javascript, HTML, CSS, the Flask framework for web development, and a little bit about React and security. We also touched on the history of web development.",
                "modern full stack techniques",
                "Following the curriculum of Princeton's COS 333, we learned about how to make a website from scratch. We learned about ports, Python, HTML, JavaScript, and CSS. The primary tech stack we learned in lectures and assignments was Python Flask, Jinja2, Jquery, and SQLite."
            ]
        },
        {
            "question_id": "YC403",
            "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
            "comments": [
                "The structure of the PSETs was cool because it was building on the same PSET every week with whatever new technologies\/ideas we were learning about. I think however it would be nice to not have to balance time between PSETs and the semester long projects, and maybe shorter weekly PSETs in combination with a final project for the last few weeks of the class would be better. My only complaint is that sometimes the lectures were a bit tough to stay engaged with, but I feel like that is just generally how CS classes are when you arent physically coding yourself.",
                "Strengths: In theory I love the idea of this class and it was cool that we got to actually make a project we were interested in for our final project. I also liked the way they evaluated us with the midterm in a coding assessment that was open note. I thought that was a really fair way to see if we could implement the things we had been learning and doing in our projects. \r\nWeaknesses: Lectures seemed to have no relevance to our projects or assignments?? We had a project on APIs and never really had any lectures on APIs??? Instead we spent like TOO MANY lectures going over python or library documentation. I also just think that lectures were not super engaging overall. I wish he had us follow along or code with him. I also wish the lecture hall had more than one singular outlet so we could actually do that. There were also so many coding examples provided that it was confusing which ones were the optimal examples that you should resemble your code after. \r\nAlso they should teach React.........",
                "This class was very boring and it made it extremely hard to pay attention in class",
                "The assignments in this course are supposed to be done in pairs, which is only nice if you have a partner that actually does work. If you look on the other side, you could potentially get away with doing nothing in the course and getting a good grade if your partner does all the work. Overall the course is good to get a good understanding of developing web applications and working in teams for this.",
                "I think CPSC 419 is in a good place for the first semester it was offered. As someone who came to the class with some background in full-stack web development (specifically with Flask), it often moved too slow for me, but it seemed it was moving a bit fast for some others. I think it could benefit from either (1) having an additional prerequisite like OOP or (2) focusing more on the actual web-design aspects of the class. Taking this an OOP at the same time, there was a LOT of overlap, and I would say, too much.",
                "Strength: The psets were pretty fun and I felt like I learned a new skill with each pset, which was cool. The final project was also a great experience.\r\nWeakness: Did not get enough support for the final project. Also, since the course was in its first iteration, the lecture content was a bit all over the place and really needs to be reorganized. By the end of the course it felt like they were scrambling for topics to lecture on. Also, the TA grading was not very objective and needed to be more uniform.",
                "pset autograder could be better but otherwise I LOVED THIS CLASS! Super helpful for web development!",
                "No midterm! Not very applicable to industry.",
                "Strengths: Engaging assignments and midterm. Plenty of example and template code for students to reference. Professors were very helpful with student questions. \r\n\r\nWeaknesses: Course did not allow for a lot of flexibility if the schedule changed. The end of the semester felt really rushed. The late policy was pretty strict. You dont learn modern full stack (React, SCSS, etc.)",
                "Strengths: gives a thorough review of backend and front-end programming \r\nWeaknesses: could cover more React, have better pacing (I feel like we spent too much time on easier stuff and not enough time on harder stuff), better handling of group work(more incentives for equal distribution of work)",
                "As this was the first time the course was being offered, it's normal for there to be some things to work out. I think the split of two lectors was a little confusing for students, as it wasn't very clear who would be teaching when, and what they would be covering. Early on it was stated that there would be five assignments; ultimately there were only four (not a complaint, just another way in which it was clear details were still being worked out). I think these things won't be as prevalent in future semesters. One way in which the course could be improved is through more careful guidance regarding final project topic choices. Encouraging groups to go after meaningful problems and provide new and creative solutions, rather than permitting them to simply recreate existing platforms with more limited functionality, would greatly benefit everyone involved.",
                "strengths: projects were hands-on and applicable to making full stack applications\r\nWeaknesses: The intro to python sequence at the beginning of the course wasn't very useful and wasted a lot of time. The course should have used ReactJS as a more up to date front end for the course.",
                "Really excellent instruction in this course, thoughtfully created lectures and assignments. The biggest weakness is probably workload. (Note that Im not a CS major here and I imagine the workload is high across the board for CPSC classes.) That said, the expectation of hours put in is demanding and in order to keep up, and keep learning, I had to sacrifice some time from my other courses. I wish that werent the case! Also, I wish some further emphasis had been placed on day one of what it means to pick a partner for the pair programming assignments. (Needless to say, I probably wouldve gone with someone else who wouldnt have left me doing most of the heavy lifting on the problem sets). I just didnt understand to what degree that partnership would influence my workload and performance in the course. Things became doubly confusing later in the semester when 519-only assignment specs were released; it wouldve been smoother to just have entirely 519 or entirely 419 programming groups.\r\nFinal note: I wish the prompt for the final group project couldve been provided in a more creatively inspiring way. I say this because there are so many amazing things that can happen on the internet, especially with the force of full stack programming behind a website! The presentation of successful web apps and startups as solutions to problems can be very limiting, particularly in an educational setting where students are encouraged to open their minds without the ultimate fear of failure. For instance, heres an example of a project prompt from a front-end programming class offered in the School of Art. The title of the prompt is Billboard: http:\/\/www.2022.software-for-people.net\/projects\/billboard. I understand that the technical scope of this assignment is far less than the scope of the full stack assignment, but it still dealt with working with APIs and data in some capacity while allowing for more creative meditations on what a good website that satisfies the requirements could be. Some spin on a prompt like this could be a novel way to present a project in a classroom like 419s where there is such a concentration of both talent, creative minds, and technical ability.",
                "I think organizationally there's still a lot to be ironed out, but it's only to be expected since this is the first time the class was taught. Personally, I think way too much time was spent on CGI\/Fast CGI\/WSGI, especially since Jay was like \"all of this stuff is obsolete by now,\" so those lectures didn't seem very useful. I think it would have been better to devote that time to something like React, especially since so many people ended up using React anyways in their final projects. There was also a lecture towards the end of the semester on additional Python stuff that seemed out of place, since by then we had probably figured out most of that stuff on our own. However, in terms of content covered, there was a lot of useful stuff taught in the class, so I think it's just a matter of getting the orginazational stuff ironed out.",
                "Being a new course, it had some rough edges like nonfunctional autograders for the assignments but the content was well structured. Students are thoughtfully led through uses different parts of full stack technologies. There is an undergraduate assistant assigned to each project group which I felt was not very helpful. This may vary on who you will be working with but I feel like ours personally didnt provide many resources or assistance.",
                "assignments are interesting to do",
                "I liked the guiding topics of the course, but a lot of the individual lectures felt useless. I, as well as many people I know, stopped coming to lectures since the content was useless for full stack web development. For example, the series of Python lectures was basically a slideshow of documentation. While this could be useful for some students, I think it's a complete waste of class time to go over code examples that students would very easily find in the documentation while trying to implement the psets themselves. The higher level lectures on web development concepts were great though! I would suggest the class leans more into those, especially web security. \r\n\r\nThe coursework was somewhat useful throughout the class. In some cases, it felt like I was focused more on fitting an exact specification rather than actually learning. The primary example of this was the midterm, in which I wasted more time in the limited period focusing on exact requirements than actually applying concepts learned in class. I don't think the midterm should be in the format that it is, given that all the psets test programming capability very thoroughly. \r\n\r\nOne of the psets also teaches, enforces, and requires a weird programming anti-pattern with API usage. Without going too heavily into the details, it requires that students download and caches an entire database via API calls. I don't think a web development class should encourage students to utilize APIs this way, especially not as a first introduction to them. I feel bad for any students that had this class as their first introduction to modern web development, since they'll believe it involves caching databases, utilizing weird Python syntax, and Jinja.",
                "This was the first semester this course was taught, so there were some bumps in the road, but in general the material was coherent and the assignments were relevant and challenging. The midterm exam was fair and the final project taught students to work in groups on a comprehensive project and meet milestones along the way. One thing that could be done to improve retention of the material is to make the assignments slightly larger in breadth (or perhaps have small quizzes to cover more material), as I felt that there was a substantial amount of class concepts that were taught and then never mentioned again.",
                "interesting problem sets that build on each other",
                "Fun class, offers a deeper understanding of lots of tools in web programming. However, feedback can be minimal depending on your TF and most people in the class seem to have experience with different web tools that are totally unrelated to what is taught in the class, so it is easy to feel like you are perpetually behind and grade expectations were very uncertain for the whole semester.",
                "jQuery strikes me as a strange thing to spend lots of time teaching in this day and age. Students would have been well served by increased focus on React. Also, the midterm having such a short timeframe made it difficult to accurately assess students' understanding; it may have been better as a take-home test that students could do over a range of, say, 6 hours.",
                "Strengths: VERY engaging and fun\r\nWeakness: each lectures was well-organized and the order of all lectures was not so much.",
                "Strengths: Exposure to many topics.\r\nWeaknesses: Outdated course material. Unengaging lectures.",
                "The content was great, and provides a good basis for further learning. The psets were mostly good, but making the table in the first pset felt super needless and complicated.",
                "Strengths: Assignments build on each other and allowed students to practice and build on skills. It was also nice to work in partners for assignments. Lectures covered practical programming languages and skills. Final project gave students a good range of freedom while encouraging them to stay organized with weekly advisor meetings and student-created deliverables timeline. Weaknesses: The assignment specs were sometimes confusing and unclear. Some parts of the assignments also felt unnecessarily taxing, such as table.py in pset1. It would also be helpful for students to receive clear feedback for their assignments.",
                "Weaknesses: lectures are boring and not engaging or taught in a straight forward way\r\nStrength: had the potential to be a good class, maybe with a different professor, hw was reasonable",
                "Strengths: course content, Jay and Alan!\r\n\r\nWeaknesses: the midterm did not accurately assess our coding abilities, and sometimes the content was not scheduled the best (e.g. we learned about docstrings after cryptography and accessing APIs)\r\n\r\nAlso, it was disheartening seeing some of the final projects be remakes of existing websites...I wish there was more emphasis on trying to actually build something that could be used by real people (New Haven has a bunch of grassroots organizations who would have loved to have, say, a find the nearest warming shelter app, instead of another find meals with Yalies app).",
                "The coursework is presented in a very unique way: given the same web application goal, build it in 4 different ways. This allowed us to weigh the pros and cons of each method and compare and contrast them.",
                "The course could have covered more information regarding style requirements.",
                "Very practical and applied.",
                "The main strength of this course is the semester long project. Through the project, you learn skills related to software engineering,",
                "I love that it was project-based and encouraged collaboration on the projects and problem sets. Office hours could have been more helpful.",
                "strengths: consistent schedule and consistent difficulty\/workload of psets, more project-based than exam-based, pair programming format, high quality lectures, required meetings with TAs\/profs to stay on track with the final project weaknesses: lectures towards the end felt less relevant, maybe slightly variable grading across TAs, one possible improvement could be lectures about the design process like testing",
                "Strengths: definitely covers a lot of ground when it comes to apps, both desktop and web based. Much more organized than the software engineering course which lets you learn about all three tiers instead of working on one throughout the semester. \r\n\r\nWeaknesses: The course is new so some details are still being ironed out. I personally didnt like how the midterm was structured but appreciated the opportunity to resubmit it. The Office Hours could improve in quality (in terms of ULAs not showing up sometimes and\/or not enough time)",
                "While the course structure was overall very solid, I think the timing of the assignments and project deadlines could have been improved. It was hard to balance working on the two simultaneously, and it felt like a lot of the project would always need to be worked on during a break or right after an assignment is submitted. The content on the midterm was also very fair game, however, it was definitely an exam predicated on speed, so allowing a resubmission for half of the points lost was a good idea.",
                "I thought the problem sets were incredibly helpful and were excellent tools to learn the mechanics of web interactions and building applications as a team.  I wish we had more problem sets (e.g. for creating user accounts) instead of the final project. That said, I think some of them required way too much work. Especially the first one, which focused too much on formatting console output.\r\n\r\nThe final project was interesting in theory, but in practice was not as useful as I had hoped. I think the fact that the final project is a different team, has later deadlines, and has relatively looser requirements led to it being harder to learn from. I think the course would be better served by having more problem sets. Alternatively, I would recommend having Final Project deliverables from the beginning that replace the need for the problem sets. For example, instead of having a database problem set have the final project group have a database-related deliverable.",
                "Strengths: The course content is good and well planned out. I took Software Engineering before this course, and this is a much more guided\/structured introduction to web development in comparison. I felt like I learned a lot despite having taken a similar course before. The instructors are receptive to feedback, and the homework builds on itself well. Weaknesses: there's kind of a lot of things to juggle at times, especially with the project and homeworks sometimes having close deadlines. I feel like the progress on the project was slow at the beginning, and forming groups was challenging and slow. I think the way Software Engineering creates groups at the beginning works better, having dedicated time set aside to talk with people and form groups.",
                "Strengths: as someone who had gone through most Yale's CS curriculum but still hadn't had a chance to learn how to make a website, I was happy to have gained a general overview of what needs to be done, minimally, to get a website running. This was a pretty collaborative class: I'm glad we were allowed to work with pset partners, and I had fun working on the final project with my final project group. Weaknesses: we did not learn the most popular or modern frameworks, but I'm not sure asking research professors to learn and teach super-specific frameworks that might not last long is the best use of resources either."
            ]
        },
        {
            "question_id": "YC409",
            "question_text": "Would you recommend this course to another student? Please explain.",
            "comments": [
                "If you want to learn full stack web development and actually build something, this a good class for you as the class actually involves building something. I would almost describe this as a more advanced CS50 vibe, but definitely not as much of a grind which is good. If you took CS50, a lot of the technologies will be familiar to you (Python, Flask, CSS\/HTML, SQL).",
                "If the professors make serious organizational improvements I would recommend it. I also really do think the projects were engaging and the homeworks did a good job to push our learning and I feel like pair programming is a fantastic way to teach. It made it not super stressful because if I had a busy week my partner would take on more and vice versa.",
                "I would recommend this course for students who want to web developers or want a semi-easy cs class",
                "Yes I would because it was pretty fun and not too much work which is also a bonus. Definitely take it if you are interested in learning about web application development.",
                "I'd recommend this class if you're interested in web development and have no previous experience.",
                "Full-Stack is a fun class. If you have a friend or a group of friends who want to take it with you, then it will be even more fun, but it would probably be fun on your own too. No complaints.",
                "There is a lot of interesting and useful content in this course, specifically Server\/Client Network Programming, HTTP requests and Flask\/Jinja, so I am glad I took it. However, this class was frustrating because it made lots of changes from the syllabus and description, skipping the last two weeks of content and presenting the rest in a disorganized way. We learned about CSS and OOP near the end of the class after we'd already had 2 or 3 assignments requiring them, and we never learned about JSON\/XML programming despite it being the main topic of 1 of our 4 biweekly assignments. The grading system is extremely poor. It is uneven among ULAs, you get virtually no feedback during the entire class, and their attendance quiz policy does not accomplish its goal at all. Jay and Alan teach at wildly different speeds and from the topics they covered, it seemed like they did not communicate much with each other.",
                "Absolutely. You learn so many important skills and do a great project that you can put on your resume and talk about in interviews.",
                "YES! Alan and Jay are really nice and you learn so much!",
                "Yes!",
                "Yes, if youre into full stack programming. I think a lot of the bumps this semester came from the fact that it was the first time the course was taught. Alan seems to care a lot about the material, and I hope the Yale CS department keeps introducing classes like this that touch on more modern CS concepts.",
                "Could be a fun class to take with friends if you have an interest in web programming",
                "Absolutely - great lectors and very interesting and relevant topics. The programming is all done in Python, the homeworks feel relevant and applicable and transferable, and you'll learn a lot about how websites work and how to set one up yourself. Very real-world and practical, not too theoretical, but plenty of interesting tidbits if you're into the nitty-gritty Python details or history of the internet, those sorts of things.",
                "yes, it's a good projects based class to make full stack apps.",
                "Yes! but only if you don't know the material already. I knew a couple people in the class that already knew everything and were bored the entire time. For me, it was super useful and fun to learn about web development. The class is engaging and covers a wide range of topics (although not in great depth, so take that as you will). Also Jay is a great lecturer imo. That said, you should be aware that this class feels like a lot of work at the beginning and then settles down at the end (before finals start, which is nice for your other classes). Overall, very solid class.",
                "Yes, definitely! But I would emphasize that prerequisites are important and they should probably have those under their belts, unless they are planning to put in even more time and work in the course than expected. Unfortunately, this probably rules out a number of School of Art MFA students, who I know have been interested in the Spring version of this course, but are a little hesitant due to the technical expectations.",
                "I think this is a great class for learning practical CS skills that are important in the industry but often get neglected in the classroom (eg. git). I feel like this class fills an important hole in the Yale CS curriculum, and I would absolutely recommend taking this class after 223. Especially if you want to participate in hackathons or build your portfolio with personal projects, but don't really know how, this class will give you some essential tools for getting your own projects off the ground.",
                "Yes, it is great for practicing these skills in a environment",
                "yes",
                "Do NOT take this course if you want to learn web development. Just learn it yourself; you'll be able to learn more modern patterns without wasting your time on filler lectures.",
                "Yes, if you want to learn about web development! This course will cover the widely used basics (HTML, CSS, JavaScript, Python, SQL) and will also go into some of the fundamentals happening under the hood. It is also a great course for learning to work with other people on projects of significant scope.",
                "yes if u are completely beginner interested in software",
                "Content-wise, this is an introduction to web programming, but many people in the class seem to have heavy experience with tools that are not taught in the course, which can feel unfair and intimidating when it comes to assignments (particularly the final project), but I managed to make it through the semester with minimal prior knowledge. PSets are with a partner for the whole semester, and there is an additional semester-long project for a small group.",
                "Yes, it's one of the most practical CS classes I've taken at Yale.",
                "Yes. It's very useful and fun.",
                "If you've done webdev professionally, you won't learn much. If not, you'll at least learn what you're supposed to be learning.",
                "I would absolutely recommend this course. This class was a very nice bridge from the hardcore computer science topics I've learned in core classes to more modern frameworks and ways to solve problems. After taking this course I feel that I have a much better understanding of how websites and applications actually work. I also understand the tradeoffs between something like implementing your own web server vs using a platform like Flask. In addition to that I understand the different \"layers\" of an application and why abstracting them into different components is important for organization and modularity.",
                "Yeah, a great elective to take if you plan on going into the industry.",
                "Yes, great intro to software engineering for internet applications.",
                "Yes! This is probably the CS course I have taken with the most openly transferable skills.",
                "Yes, I learned a lot about web applications through this course along with building a cool resume -worthy final project.",
                "Yes, this is a good class to learn full stack programming.",
                "Yes, for anyone looking to develop skills related to software engineering, this is a great course to take",
                "Yes, it's a great computer science elective, and you gain skills that are helpful in industry.",
                "yes absolutely! even if they only have cs50 or cs201 knowledge, they are probably capable of doing this course. the tech stack is really similar to the one covered in cs50 but at a much better pace. it will definitely help students learn how to create their own personal projects. i would recommend to students that did well in cs50 and have a solid understanding of cs, or even students finished with the core who are looking to learn more about practical programming",
                "I think so, it definitely gives you good practical knowledge applicable to the software engineering field.",
                "I think I would recommend this course to students if they've never used the technologies taught in the class. Some of the lecture content is interesting if you really like full-stack development. However, it's probably not that difficult to follow tutorials online and learn the same content independently.",
                "Yes, I think this is a great way to learn how to develop web applications. However, I think the course currently requires too much work and could accomplish the same learning objectives if the assignments were streamlined.",
                "Yes, especially if you want to pursue web programming.",
                "If you're interested in web development, this is a great introductory level course. I'd recommend it even if you've taken software engineering before.",
                "If you have no frontend or backend experience and are willing to take on a class with a decent amount of workload, by the end, you'll have made at least 3 web apps (we had 2 web app psets and a final project). Understand that most of the learning will probably be done through your work on the psets rather than lectures, and understand you won't necessarily walk away with modern frameworks under your belt (but maybe it'll be easier to learn them)"
            ]
        }
    ],
    "extras": {
        "title": "CPSC 419 01\/CPSC 519 01 - Full Stack Web Programming"
    }
}