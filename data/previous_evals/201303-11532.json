{
 "crn_code": "11532",
 "season": "201303",
 "legacy_coursetable_course_id": 23703,
 "enrollment": {
  "enrolled": 128,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    5,
    28,
    56,
    19
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    3,
    27,
    41,
    38
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    68,
    39
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "Taking, amazing. I've had not taken any prereqs before, yet I was fine. Just take it, no brainer.",
    "CS 201 teaches you the basics of how computers work. The programming language you will use for assignments is Scheme, which is a good teaching language even if it does not have much practical application.I would recommend this course if you are considering a CS major or have a deep interest in the basic processes of computing, but otherwise I would advise against it.Problem sets took 10-15 hours and there were 8 throughout the semester.",
    "yale has a few superstar teachers and prof angluin is one of them. with her clarity in explanations and warmth in teaching, every lecture is worth it. note - the course is less programming than computer science.",
    "Great course, I'd recommend it.",
    "I would definitely recommend CPSC 201! If you have any experience (even just a little bit) in computer science, or if you have any inkling that you might want to explore it more\/major in it, you should definitely take this class. You can always drop down to 112 (they meet at the same time), but I had only done very little Java coding before CPSC 201 and I used none of it. The only way that I could see previous experience helping is in being comfortable with the idea of coding as a whole, but there is no prerequisite knowledge. PSets do take a long time, but though they took longer than any of my other classes, I always felt like they were fun and rewarding!",
    "Yes, maybe not the most practical CS course, but certainly very interesting. You will come out with a pretty strong understanding of how a computer works, from the Boolean logic underlying computer circuitry to the way programming languages parse input language. Not sure how this will translate into functional programming ability, but you do certainly come out with a strong background in recursion and even a basic understanding of dynamic programming, which is covered briefly at the end.",
    "Probably what you'd expect from an intro CPSC class. Less about coding and more about concepts, some of which can get pretty complicated. The homeworks make you good at recursion and basic problem solving, but they take forever to complete so start them early. Professor Angluin is really nice and teaches well, but is sometimes hard to pay attention to. Would definitely recommend if you're interested in Computer Science.",
    "CPSC 201 is a good overview of the introductory computer science topics. The prerequisite is basically being comfortable with programming in general; CPSC 120, AP Comp Sci, or just some independent programming in Java or C should be easily sufficient. The problem sets (assigned most weeks; eight total) were both interesting and quite manageable (3-5 hours usually). The lectures tended to drag more and get sidetracked into long discussion\/formulation of algorithms, and it was definitely difficult to remain engaged. While Angluin is definitely not a dynamic lecturer, the material is interesting enough that I would recommend the class to anyone who thinks they might be interested in CompSci.",
    "Absolutely. I give it my strongest recommendation. The work isn't that difficult, even if you come in with little or no programming experience--once you understand recursion, you're golden for at least two-thirds of the course. And there are a ridiculous number of open TA hours in case things start to go sour.A word of caution, though: Problem sets take 6-12 hours, though they can be solved in a methodical way and the end will always be in sight. It's easy to fall into despair if you did something wrong on an early problem, since you use early code to write late code--pay careful attention to all your outputs, and you'll be fine.",
    "A very good intermediate introductory course for computer science. Dana Angluin is a great professor with an unexpectedly and equally great sense of humor, and I found it very helpful that she posted her lecture notes online (on classesv2) after each class. Her voice is somewhat quiet, but this semester she used a microphone system that worked well. I probably spent a little less than the median amount of time on the problem sets, maybe 6 to 8 hours a week. I found that I did not necessarily have to get help on them, so I can't comment very much on the teaching assistants, though I heard they were helpful. I will note that the second midterm was significantly more difficult than the first one, and suggest that anyone taking the course be especially prepared for it. (Circuits can be tricky.)",
    "The course was decent. The material you learn sometimes seems a bit too abstract, but overall I'm sure I'll appreciate knowing how a computer works. I wish the concepts were more connected to programming and software.",
    "A good introduction to computer science get to get you interest in computer structure. Recommend",
    "Definitely take this course! It gives you the tools to think algorithmically; even if you have never programmed before, it's pretty doable to jump in (albeit wiht a much higher workload for the first couple weeks).I really enjoyed the course, despite my initial impression that the theories behind computer science would be dry and boring. The material was presented in a logical manner, and are connected by overarching \"big ideas\" (which I really appreciated). The programming assignments were OK; not too hard, and pretty rewarding to complete.Suggestion: learn scheme before the course begins if you want a head start on the assignments, which take around 8-12 hours each.",
    "An introduction to computer programming and the theories of computer science.",
    "The course is taught in Scheme, so don't expect to gain too much practical experience or to learn a language to do many projects in. However, the course offers a solid grounding in the discipline, and gets you quite familiar with recursion, and, to a lesser degree, data structures. A worthwhile course if you're interested at all in computer science.",
    "It's a pretty good class, and if you're going to do computer science you'll have to take it anyway. You learn how to use Scheme, which isn't a particularly useful language itself, but the idea is that you'll learn how to implement various computer processes using functional programming, which is good to know. The first half of class was mostly about learning Scheme itself, and the second half was using Scheme to simulate things like circuits, Turing machines, and computer architecture. The weekly assignments always took me a while to finish, but were generally enjoyable and satisfying to do. If you're going to take this, you could probably get by without previous programming experience, but it will help a lot to know at least a little programming beforehand.",
    "I was in the predicament that I know many are in when deciding between CPSC112 and CPSC201. I had very minimal programming experience (no AP compsci) and was afraid skipping 112 would put me at a disadvantage. It did not in anyway. You can pick up how to program Scheme very quickly. When it comes to which class you should take, know that Computer Science 201 is an introductory class into the theoretical world of computer science. In addition to learning Scheme, you use the language to help learn these theoretical topics. If you are somebody wanting to learn to code, 112 is a better option. But if you are interested in how a computer works (circuits, machine language, etc), this is a great class.",
    "I would most definitely recommend cs201 to another student. This course teaches you how to break down problems and a way of thinking that should make it part of any liberal arts curriculum.",
    "CPSC201 is a conceptual look at both recursion (via Scheme) and the evolution of computer science (through sometimes historic topics and applications, like simulating a Turing Machine and a 16-bit memory cell). It's not the best at teaching you modern programming techniques, but you'll understand WHY programmers do the things they do so much more--and literally MASTER recursion.",
    "CS201 is definitely a theoretical course, and to those used to software development or object oriented programming from HS, it might be a bit of a dramatic change. But I think it's a really good course that not only allows you to code with a very simple language (Scheme), but to learn a lot of theoretical concepts that you might not other wise learn in classes (assembly language, turing machines, circuits, etc.) Professor Angluin is a great professor -- funny, clear, holds helpful office hours, and she makes an effort to get to know you by name and on a personal level if you meet with her. I would definitely recommend taking the course with her. Take advantage of zoo hours and the TFs when stuck on a problem set and then the weekly PSETs aren't so bad. Great class. (Also, I took it with the DS and the workload was definitely manageable.)",
    "I am an economics major, and this course made me wish I had given CS more a try earlier. I would recommend it to anyone of any major. The problem sets are time consuming certainly, as you can\u00e2\u0080\u0099t really get it wrong. You have to work until you have solved the problem, which is somewhat liberating. The lectures are paced reasonably and fun until you fall behind, and the online lecture notes make catching up totally feasible. You learn computer architecture concepts by building simulators of circuits, memory and data structures in scheme; Dana\u00e2\u0080\u0099s mantra is that building something will teach you how it works; which turns out to be true almost all the time. On the first Midterm and final, we were given practice tests, which made preparation easier. On the second one we didn't. I would urge you to make practice problems for yourself even if none are given.",
    "Take it if you're a CS major or planning to take more CS courses, otherwise 112 is more useful.",
    "If you're interested in a broad introduction to computing, how computers work, and develop programming skills, definitely take this class. But be prepared and willing to spend a lot of your time on it.",
    "I would recommend it.",
    "A good class that is what it is. An intro Comp Sci that will be much more challenging than an easy QR, but much easier than future CS courses if you are taking the major.",
    "Great course. Yeah it's in \"useless\" scheme, but it is a wonderful ground-up overview of CS in a nutshell. Take it with Prof. Angluin, who will not only memorize 80% of the names in a 100+ person lecture, she will offer office hours almost every day of the week, make hilarious self-deprecating jokes, and be extraordinarily clear in lecture. Don't take it if you want to make apps or design websites or stuff like that, because that's not what this class is about. Also 5-15 hour psets almost every week, so budget for that.",
    "Psets and tests will be familiar to those who have taken 112. Interesting and time-consuming, but not that difficult",
    "I would recommend it to another student who is interested in logical thinking. I would describe it as a course that makes you think about recursion and other topics related to computer science.",
    "Time commitment is the biggest issue for anyone considering this class. It's a lot of work for an intro class---dedicate no less than 10 hours before the decline to do the problem sets. Starting problem sets on the day of the deadline is doable but extremely stressful and means that you'll probably have to miss food and sleep and everything you're doing. Just to give a rough idea of what to expect on your first problem---you'll probably need 20 hours because you're not used to the language yet. A lot of work. In return, you'll learn a lot about the basic functions of computers, how they operate, and come across the most widely used terms in the industry. You learn the magic of recursion. If you enjoy solving problems, definitely take this class. It's like math, except in a much more dynamic and practical way that allows you to actually do useful things in an integrated development environment.",
    "Absolutely a fantastic class.Professor Angluin is a wonderful professor. She is extremely nice and approachable. If you ask her for help, she will make sure you understand what is happening and that you leave her office with a full understanding of the topic.This class is challenging because there is a wide array of abilities and knowledge coming. There are people who have been coding since middle school and people who just started learning to program in July. If you are closer to the second group (after AP CS or the like), then you may find this class really difficult at the beginning and the problem sets may take you forever, but if you're willing to put in the time, it will really be worth it. You will really speed up with successive problem sets and you will learn so much.This was my favorite class this semester.",
    "Very interesting class, took some work on the problem sets though. But it was great to get a sense of accomplishment through figuring things out.",
    "cpsc 201 is a great course that gives you programming practice (or at least recursion practice) while teaching you important programming concepts. The psets can take 5-10 hours, but they go very quickly and at no point seemed to me to be tedious or overly difficult. I would highly recommend this course.",
    "I would wholeheartedly recommend this course to everyone. Although it is very theoretical, it teaches you to think about computers in a different way.",
    "A wonderful introduction to the topic that's perfect for anyone with a minimal amount of background. Dana Angluin is a little hard to understand, but she organizes this course flawlessly, and by the end you'll be surprised by how much you've learned. The class\/problem sets are in Scheme, a language you've probably never used, which actually makes it more fun (in my opinion). The most rewarding part of programming is learning to optimize under constraints, and the constraints provided by Scheme make the problem sets particularly satisfying. If you're at all interested in the theory behind this field (or you just like solving logic puzzles), this class is a must.",
    "Good problem sets, not too long. Interesting introductory material in computer science. I definitely recommend this class.",
    "Take it even if you aren't planning on majoring in CS! It's a great overview of topics in computer science and Dana is great. She might be hard to hear sometimes (although she now has a mic), but she's very clear and her lectures are well planned. Highly recommend it!",
    "This is a fast-paced course. The Scheme programming language is hard to pick up, but it does\/will make you a better programmer in the long run. The problem sets usually take between 8 and 13 hours (a LOT of time, especially if you're taking this class as a freshman), and the midterms\/final are no walk in the park and require a firm understanding of the course material. Consider the necessary time commitment when taking this class (if your other classes are hard, be careful). If you're a CS major, you have no choice but to take this class; if not, I'd say take CPSC 112, then this class, and if you enjoy them, CPSC 223. That should give you a fairly good idea of whether or not you should pursue CS.",
    "I would absolutely recommend CS 201 to everyone. You really get a taste of so many cool things in computer science, everything from functional programming to basic computer architecture and computability. It's incredibly interesting, and as long as you're willing to put some time into the problem sets, super rewarding.",
    "This course teaches you the theoretical and conceptual basics of computation, circuits, and computers. Professor Angluin is wonderful. The PSETs typically took me around 7 hours. These are when you develop your ability to program. The exams are very doable.",
    "Take this class if you're committed to a future in computer science. Otherwise, it eats up a significant portion of your time with weekly problem sets. Great course, but don't be fooled by the pace within the first 2 weeks - it definitely ramps up.",
    "YES! Take this class with Prof Angluin if you can. It is what the title says, an introduction to several topics in computer science. You will learn that computer science goes way beyond programming. Problems sets take some time to be completed. (I took way more than the advertised 6-8 hours - for me, it was more like 10-15). Exams are fair, second midterm was a little bit harder, but nothing that was not covered in lecture. Curve is a little bit harsh, i just hope my grade will make the cut. Overall, great course! Be sure to take this either freshman or sophomore year, so that, if you want, you can switch to a major in computer science.",
    "I would highly recommend this class. It's very interesting, the assignments are fun and challenging (but not too challenging), and the professor is phenomenal.",
    "If you want to learn how to write apps and code projects, know that this class won't get you there. If you're looking for a deeper knowledge of and appreciation for the way computers really work, then this will interest you. Going to lecture is probably not necessary, but I find the discussion to usually be quite interesting. Psets range from easy (4 hours) to very hard (16 hours) throughout the term (randomly, not necessarily in increasing order of difficulty--be ware of Shut The Box).",
    "CPSC 201 is a highly theoretical introduction to computer architecture, functional programming, and the Scheme programming language. I would only recommend it if you have formal experience in computer programming, equivalent to CPSC 112. That being said, the peer tutors are incredibly helpful and if you can manage to stay awake and pay attention in class you should be fine. I would recommend this course to anyone interested in compsci or math.",
    "Recommended for students who have some concepts of how to program. Even if you're not a CS major, CS201 teaches an interesting and important method of thought\/breaking down problems. I wouldn't recommend taking it if you've never taken a programming class before.",
    "Yes, totally. It's not easy, but it's a great class and the workload is not too heavy. Soooo much fun sometimes. Other times less fun. But overall a very fun class.",
    "Well, you probably have to do this if you're exploring computer science in any serious way. You'll spend a few weeks learning basic programming concepts such as recursion via the Scheme programming language (a rare variant of the functional programming language Lisp - NOT something you'll use outside academic contexts). Such concepts include \"recursion\" (i.e. making a program call itself over and over), \"tail recursion,\" \"deep recursion,\" and oh yeah, \"recursion.\" This course will feel like Intro to Recursion until you can do recursion on lists in your sleep. Then you'll do a whirlwind tour of several areas of computer science, organized from the \"bottom up\" - Boolean logic, then the gates and circuits governed by Boolean logic, then the memory registers enabled by circuitry, then a form of basic CPU architecture enabled by memory, then the assembly language used to write machine-readable code, then the linguistic\/grammatical analysis which is used to break down human-readable code into machine instructions, then the objects and runtime analyses needed to make all those processes efficient. The whole thing is sprinkled with some asides on the history of computation (Turing machines, core memory, the \"million-dollar problem\" P=NP). You'll get a real sense of how each part of the computer flows up from the previous underlying foundation, which makes the course's organization really cool.\/\/ The problem sets are involved and will take a significant chunk of time each week. There's a plagiarism detector in the grading system and lots of thinking involved, so the work is unavoidable. But it's really constructive, intellectual, and cool - you will feel accomplished after you simulate a simple board game, a Turing machine, a toy CPU, and random sentence generator, among other things. My circumstances are sort of weird -- I took this as a senior Cred\/D\/Fail for intellectual exploration purposes, and that's not the profile of much of the class (which is largely freshmen and sophomores figuring out whether the CS major is for them.)In part because I haven't been using much math\/many quantitative skills for three years, I took longer than most people to do the problem sets, but it seems from observation that even the biggest hotshots took at minimum 6 hours per P-set, and I took closer to 10 on average. Thankfully, the Zoo hours, TAs, and Peer Tutors are always VERY hopeful -- you can and should GO TO THEM whenever you have an issue, rather than moping about how much more time you're taking than a hypothetical peer. I certainly think this class assumes some previous familiarity with programming language environments, and I had some trouble even after having done CS 112. But in the end your grade is GENEROUSLY and BOUNTIFULLY curved upward. \/\/Dana Angluin is great. There will be times when you think she's being rather slow or doddering or digressing or mechanical, but there is a method to her madness - after years of teaching this class, she knows exactly the speed she needs to go at and what she needs to do to make computer science work for the masses. Also, she'll try to learn everyone's name in a 150-person lecture, which is super-impressive (though you can expect to be known as \"Person-I-cannot-call-on-by-name\" for at least two or three weeks even if you raise yourhand a lot).",
    "Good class to take if you're interested in computer science or considering the major. I really enjoyed Scheme, it's a totally different way of thinking about code. Good introduction to some basic CS concepts: circuits, turing machines, assembly language. Angluin is great, an excellent instructor. Going to class is helpful because she makes announcements in class, and not via email, but not especially necessary for the material.",
    "I would absolutely recommend this course. It's a no-brainer for those who are actually motivated to learn about Computer Science. If you just want to learn a language, do it on your own. This course will present you with a theoretical base that will expand your mind.Expect 8-12 hr Psets per week. I think for the most part people enjoy them--they are really very well designed. Just don't expect this to be a gut course.",
    "Only take it if you are serious about computer science.",
    "Awww yeah! This class has great online lecture notes. Some of the more conceptual details are difficult to grasp if you haven't had experience programming, but Scheme itself is not hardto learn. The problem sets take 10-12 hours, not the advertised 6-8. The exams are very fair, but be sure to actually do some practice problems (if there are any) before the exam to get used to the kinds of questions that will be asked. The homework will prepare you for the code-writing parts of the exam. You can rely on DrRacket's error reporting feature to help you through the first few problem sets, but you really want to try to start writing code that works right the first time around, or that you can debug yourself, since the exam is written. However, the code that you need to write for the exams is not very hard or convoluted, so don't stress out too much.",
    "CPSC 201 is a pretty standard class with Professor Angluin. Her lectures can be dry and boring but the problem sets make you think differently and are really quite fun if you like computer science. I had never before taken a computer science class and did just fine. Just be sure that you have some previous coding experience, be it in Java or Python or what have you.Definitely take advantage of office hours if you decide to take the class. As far as work load, some people really struggled but in general it was about 8-10 hours per week. That sounds like a lot but those hours are kind of fun. Also, as far as the midterm and final are concerned, it sucks but you can't really study for them. Lastly, I would say that if you are set on taking this class, take it in the fall with Angluin, not in the spring with the other prof.",
    "all (or at least most) of the problem sets were fun. Like in one, we made a simple game (shut the box), in another we made a turing machine, and in another we constructed systems of circuits. The assignments were not too difficult conceptually because they were split up into so many parts. I really appreciated the fact that she posted lecture notes as well, not just because I sometimes missed class (though rarely), but because I sometimes did not entirely understand points she made in class and it helped to be able to review it later.Also, I really like Dana Angluin. Great teacher. Definitely would recommend this to anyone!",
    "Lots of solving little problems and learning the basics, both the theoretical e.g. what is computation, is this an efficient algorithm, what does a compiler do and the practical e.g. how is information stored in binary and what are the advantages and disadvantages of encoding information in different ways. Dana is great, super accessible, has been teaching it for ever. Be prepared to spend 10+ (the second took me over 20ish) hours on the first few problem sets and 5-10 on the rest. Though you may be discouraged in the beginning you will pick up the skills after two or three problems sets. If you enjoy working on the problem sets, solving small problems, giving birth to machines etc then stick with it!",
    "I would highly recommend this class to someone who is familiar with programming. It is an interesting expose on various concepts in computer science.",
    "A great class. Definitely difficult but a necessary course to take.",
    "CS 201 is a good introduction to comp sci. If you've programmed at all before, it shouldn't be too difficult to get the hang of Scheme, the language the course is taught in. The syllabus goes through various computer science topics other than programming, giving a taste of what else computer science involves. The course helps you get an appreciation for some of the theory behind how computation actually works.",
    "It's a good course. Very fascinating material. Just don't fall behind.",
    "CPSC 201 was a great class. While the assignments are programming-based, the class uses programming as a tool for teaching computer science topics. After taking CPSC 112 two years ago and not doing any programming since, the programming assignments weren't too difficult. They were fun and I looked forward to working on them each week. If you need help, then you can go to the Zoo to get help. There were 8 problem sets, which on average took about 8-10 hours, two midterms, and a final. The exams were fair. I would highly recommend this class.",
    "If you like cs, take it. If you don't, STAY AWAY. If you are on the fence then go for it. It isn;t so impossible that you won't pass or anything like that.",
    "Yes",
    "Intro Compsci introduces you to a whole new was of thinking about computers and problem solving. Scheme is a great teaching language, and if you follow along you will be amazed by much of the material taught in this class. I would recommend it to anyone with a thirst for knowledge.",
    "This class was awesome. I'd take it again. Problem sets weren't too bad,",
    "Solid course with an introduction to a lot of interesting topics. I know a lot of people say not to take this if you took 112 and aren't planning to major in comp sci, but I would say that's not true as long as you're okay with not learning a programming language with tons of applications to real life. But Scheme really teaches you to think in a different way, and I know I'll apply concepts from the course in other parts of my life. Professor Angluin is fantastic and really explains concepts well. Great TA help through e-mail and during office hours. Lectures could become a little dry but were mostly worthwhile. Problem sets took significantly longer than the 6-8 hours quoted at the beginning of the course (closer to 10 for most assignments), but the p-sets were normally interesting. Exams were neither easy nor overly hard, but they did have significant time pressure, and while the curve is supposedly generous (about half get A\/A-), it's not all that generous when you realize that's how the raw grades seem to shake out anyway -- as in, there's not much of a curve at all.",
    "Pretty good class, teaches you a lot about computer architecture and less about programming.",
    "Yes! Super interesting, loved Professor Angluin. All in all, great class!",
    "it is great for learning computer science basics, not good for people who are shaky with the concepts",
    "A great class to take! Taking this class was like learning a whole new way of thinking. I took this course without much prior programming experience (didn't take 112 first) and although it was a lot of work at first, I think that I don't regret jumping straight to 201. I really enjoyed the lectures as Professor Angluin teaches on the chalkboard and goes at a very manageable pace. The problem sets are probably the bulk of the class. Starting out, they took 8-10 hours a week, although some weeks were harder than others. Overall, it was a great course, and I recommend it!",
    "Take this class! CS201 is an excellent overview of the field of computer science. Professor Angluin's lectures are fantastic, she wrote things one the board so the class moved at the perfect pace for me to digest the material. If you are a quick learner, feel free to bring a laptop to class and take notes\/ browse the interwebs on it. The midterms and final are fair, but the class generally scores pretty high on them. The homework assignments take about 8 hours each and are fairly straightforward. The teaching assistants for the course are excellent and Professor Angluin is glad to address questions during office hours and after class.",
    "A classic CS course. Scheme teaches you a completely new way to think through problems if you haven't had experience in a functional language before. The psets will be fun! - if you start them early. However the late policy is super kind. The two midterms were tough but the final wasn't that bad. You might find the lectures a little bit slow, but it's worth going, and if you don't the online lecture notes are excellent. Angluin is a great instructor and really cares about you getting answers to your questions",
    "This was an awesome course. Professor Angluin was an amazing teacher. We covered different basic computer concepts and used Scheme to model them. I loved this course.",
    "I would definitely recommend this as an intro course to computers. Interesting material and a well taught course.",
    "Teaches CS concepts and stuff under the backdrop of a new language, Scheme. Fun and somewhat interesting, but ultimately unnecessary for experienced programmers.",
    "Yes, take this class. It's not too hard and you learn about how computers work at a very low level. I think that everyone should take this class.",
    "'Twas an excellent course! It moved at the perfect pace--unlike other CS courses I've had before, the instructor did not assume you knew all sorts of info that you didn't. She also kept the class enjoyable with all sorts of examples that were actually interesting. The psets took about 6-8 hours each and were very doable; in general, this is a class where you will do well if you just put the time in (and you don't need to put in all that much time). It might be tough if you have never had any programming before, though.",
    "Be ready to put in the work and start the problem seta early. Don't slack off, or you'll make this class much harder than it needs to be.",
    "I used to make fun of Yale's CS department for teaching scheme as the introductory class. But after taking CPSC 201, I can only say how much you learn in this class.This class isn't necessarily about programming but topics in computer science. You cover circuitry, linguistics, computer architecture, booleans, and more.Definitely take if you are at all interested in computer science - the problem sets are rewarding (and don't be scared after the 2nd problem set. It is supposed to take too many hours, but it gets easier after that).",
    "A comprehensive introduction to computer science that covers things like recursion, scoping, circuits, boolean functions and grammars. For non-majors be forewarned that the majority of your peers will have a lot more CS background than you and you will have to work harder to keep up in the class. I had even taken CPSC 112 (intro to programming) previously and found that it didn\u00e2\u0080\u0099t help much.Despite this, I\u00e2\u0080\u0099d recommend the class \u00e2\u0080\u0093 the concepts are interesting\/useful and it is very rewarding to complete the problem sets (which are all very well-designed). Lectures are sometimes hard to follow, but the posted notes are great. Tests are tough, but fair. Again, expect to put in a lot of time, and expect to do some self-teaching as this is not a hand-holding class. I suggest going Cr\/D\/F if you\u00e2\u0080\u0099re taking it as a non-major. It will make things a lot less stressful.",
    "A basic introduction to academic computer science.For non-CS majors\/non-techies: A rather fun way to get a taste of some of the key concepts in CS.For CS majors: it wasn't required, it wouldn't be worth taking if you've done much computing - course progresses rather slowly, and tends to be very academic. In retrospect, CSPC 202\/Maths 244 -> CPSC 223 would have been better.",
    "Yeah I'd recommend it."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "201",
  "section": 1
 }
}