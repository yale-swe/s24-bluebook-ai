{
 "crn_code": "10508",
 "season": "201603",
 "legacy_coursetable_course_id": 39115,
 "enrollment": {
  "enrolled": 129,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    3,
    10,
    37,
    40,
    19
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    7,
    20,
    37,
    36,
    10
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    4,
    15,
    29,
    49,
    12
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    9,
    21,
    38,
    32,
    6
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    2,
    5,
    40,
    49,
    14
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    1,
    3,
    36,
    52,
    18
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "This class taught me how computers were developed, conceptually, from the bottom up. We started from turing machines, moved to boolean circuits and then machine code and assembly language. We then moved to regular expressions and parsing source code. Over all, I got a better understanding of all the different conceptual levels involved between source code and the computer actually executing the code.",
    "I good understanding of Racket, and quite a good understanding of recursion and other programming concepts.",
    "I came into the class with no programming experience and it was extremely tough in the beginning. I was spending 10+ hours on psets that are simple in hindsight, while others were finishing them in 4-8 hours. I stuck through with it and went to a lot of the office hours which were extremely helpful. Through the class I learned a lot about recursion\/deep recursion, the basics of computer architecture, and the basics of some sorting algorithms.",
    "201 will give you a solid foundation to much of the theory behind computer science. It teaches you how computers work from the ground up, and really gives you an appreciation for just how complicated modern machines are. You will learn to think recursively by programming in Racket--though it's not the easiest way to do things, it will probably come in handy in the future.",
    "Learned about computers and how to think recursively.",
    "I learned a lot about functional programming and how computers work.",
    "Beyond learning basics of computer architecture, and how to use recursion, there is nothing to be gained from this class.",
    "I learned a lot about how the computer works and how it processes things. Also learned a completely useless programming language.",
    "General computer science knowledge in the areas of algorithms, algorithmic analysis, computability, and other fundamentals of CS.",
    "Gain a general understanding of the architecture of computer languages and the data structures used. Lots of experience in recursive programming using a functional language.",
    "I am a Biomedical Engineering senior and I really regretted not majoring in CS after taking this class. I learned a lot about computer science theory and programming. The course is a bit theoretical, but really allowed me to understand how computers work.",
    "I feel like I became a much better programmer overall in CS201. We went in depth into some things which I had never touched before and feel that I now have a better understanding of programming and computers in general.",
    "Good way to learn about topics in computer science you may have never encountered before - i.e. functional programming, circuits, assembly language",
    "Apart from learning how to do some basic programming in Racket, I feel like I learned to think more like a computer scientist and improved my problem solving skills. I never had problem sets that took as long as these in high school, so I was forced to learn time management as well.",
    "This course teaches basic computer science topics, mostly unrelated to programming, such as Turing machines, compilers, finite strings, and assembly. The class is also taught in Racket, a functional programming language that will most likely never be used again.",
    "There is a much deeper level of computer science that I don't really want to learn more about, but I guess it was good for me to be exposed to it. I'm definitely more excited about subsequent programming classes, but I won't deny that I learned the importance of attending lecture and paying attention.",
    "It was an interesting overview of low to high level concepts in computer science and you get a better grasp of how everything fits together.",
    "Practice solving problems recursively. Also, more importantly, knowing how higher-level languages, computers, etc. are ultimately generated from low level logic circuits. You see what computers are essentially.",
    "I learned an overview of the theory of Computer Science and how to effectively code with functional languages and recursion.",
    "Fundamentals to computers. This class strayed away from coding and covered various computer related topics.",
    "I eventually became familiar to recursion, a different way of thinking I've never been taught before.",
    "I learned to think theoretically about computer science problems and learn how computers work.",
    "Really great understanding of how computerss actually work. Not your average programming class, instead far more interesting as its about understanding the computer not just manipulating it.",
    "Theoretical overview of computer science",
    "I learned how to think recursively and about the functions of a basic computer.",
    "A knowledge of recursion, computability, machines, booleans and computer hardware and assembly, pointers and stacks and queues, languages, and a crash course in sorting algorithms. A way of thinking about computers and solving CS problems; ways of approaching problems.",
    "I knew Java and Python.",
    "A progression of skills that culminated in a solid understanding of computer science fundamentals and systems.",
    "I was able to develop a clearer sense of logic with the lectures, and through peer tutoring I was able to help improve my workflow and efficiency by knowing when to ask questions.",
    "I learned a lot about essentially how computers work in this course - from machine code to compilers to boolean logic. It was very interesting to me because it went beyond mere programming, which most students in the class already knew coming in. From learning Racket, I also got a new perspective on how to code recursively.",
    "This class emphasized a number of skills but specifically a more scientific understanding of recursion, data structures, and other concepts in computer science.",
    "My understanding and ability to work with recursion improved greatly, that's for sure. I also got a pretty good overview of the field of computer science too.",
    "I believe the skills I learned in this course were all taught through the homework assignments. Most of the time I felt as though lectures were useless.",
    "I felt I deepened both my problem solving skills, and my confidence with computer languages as a whole. I found it deeply interesting to learn about the fundamental principles underpinning the functioning of computers--something I'd wondered about for a long time.",
    "Ability to use Racket, fundamental coding skills, recursion.",
    "Knowledge of Computer Science",
    "Proficiency in Racket",
    "How to problem solve and program in Racket, machine code, and assembly language. I also learned about the core components of computers and how programming works on the most basic level.",
    "Definitely a useful course- learned more about the inner workings of a computer, and theoretical computer science.",
    "I developed my problem solving ability for computer science related problems. It forced me to work quickly on the exams.",
    "I have gained a thorough understanding of recursion, and I feel more literate to continue in my study of programming and creative problem solving.",
    "I leaned all the basic elements in computer science. An incredibly helpful course.",
    "This course allowed me to become more comfortable with recursive thinking, and taught me the fundamentals of computer science.",
    "You learn everything about the foundations of computer science, that will later serve as the stepping stone in more advanced courses.",
    "I'm not sure I learned that match about actual coding and think CS50 might be a better course for this. I had taken just AP Compsci before this course and was definitely prepared for the workload and content, but I didn't learn anything about making apps\/websites or anything really founded in \"programming.\" There is certainly coding, but it is more theoretical. Learned a lot about computer architecture.",
    "Loved the subject matter. Became really well versed in recursion and learned a lot about basic computing.",
    "Programming in Racket, thinking through basic programming structures, and the psets were very fun",
    "A lot of basic computer science skills like recursion.",
    "I developed the skills for the basics of computer science. Essentially, this course taught how the computer was built up from basics of logic gates to assembly code all the way up to algorithms and analysis. It gave me another way to look at coding in the language Racket, which is a functional programming language, and heavily used recursion, a skill that is hard to master with Java or C.",
    "Recursion Command line tools Functional programming",
    "I learned in this course all the topics I should probably have known (P vs. NP, algorithm complexity, basic computer circuitry, regular expressions, etc.) but didn't prior. In that sense, it taught \"cultural literacy\" in computer science so as to level the playing field.",
    "I learned Racket and began to gain a more in depth understanding of how computers and data systems work.",
    "I mainly developed recursive coding thinking and received an introduction to lower level elements of computer science.",
    "Basic programming skills and a knowledge of recursion and other concepts central to computer science.",
    "Problem solving in an entirely new way; using recursion as a tool for functional programming.",
    "programming in racket, recursion, turing machines, computer architecture...",
    "I gained the skills to learn a somewhat obscure computer programming language which is entirely dependent on recursion. I developed the skills to use coding to represent abstract mathematical topics. I gained knowledge of and insight into the thoughts and machines that led to the creation of computers and programming.",
    "A general overview of topics in the field of Computer Science taught in Racket.",
    "The course began as teaching basic programming techniques through the use of the language racket, but later evolved into more complex problem solving skills.",
    "I learnt how to think faster and how to always try and write the most efficient code possible so that the computer complexity is lesser.",
    "I learned how to program in Racket and it served as good practice for recursive thinking. I also learned CS basics such as different sorting algorithms and the structural organization of a computer.",
    "I became much more familiar with recursive programming",
    "I learned that computer science is far more than just coding. It's about understanding why the computer works the way that it does, and then figuring out how to design programs with this understanding in mind.",
    "Basic computer science theory, time management with beginner-level CS problem sets, and coding\/taking computer science exams within very short time constraints",
    "I learned about how computers work at a much lower level and a whole lot about recursion. Was a great class in teaching you new ways to think about problem solving.",
    "I learned about how computer science is taught at Yale and some basic CS concepts that will hopefully form the foundation necessary for other courses in the major."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "The homework, while interesting and productive in and of themselves, are in no sense an indicator of what to expect for the tests. This makes the tests seem disjunct from the course itself. This could be improved with some additional practice questions throughout that are closer to the material tested on the tests. This course moved slowly in class, but decently fast out of class, which was frustrating to me. I felt like I learned more from the homework than I did from the lectures.",
    "Holly is understanding about grades and wants students who put in effort to do well, which I appreciated. I think having more TF's and one-on-one tutoring opportunities would be nice. Also, making homework worth a little more.",
    "The course covers a *lot* of ground, and so faces the praise and perils of any intro course. It introduces a vast array of topics but fails to go very far in depth into any of them. That being said, I believe this is appropriate for an intro course. Additionally, programming in Racket is not a very useful skill (not including the skill of recursive thinking it fosters) outside of the course, and so spending a semester learning a language I'll probably rarely use in the future seemed a bit of a let down.",
    "Strengths: -Teaches you to think recursively really well -Good overview of low-level compsci concepts Weaknesses: -Spending a whole semester on Racket is overkill: halfway through I already could think recursively really well, and beyond that I derived no value from learning racket at all",
    "This class is good in the way it builds upon different aspects of computer science to give a comprehensive look at the field. However, the tests are puzzling. We're given 10-11 questions to finish in 50 minutes. When I talk to other students, no one seems to be able to complete the test. Why, then, are the tests so long? And, apparently this has been a thing for multiple years. It makes more sense to either extend the testing time or reduce the number of questions.",
    "The homework assignments were fun and helpful and the right level of difficulty. The lectures were informative. The lectures did feel as though they moved a bit slowly, however, and weren't particularly engaging, but as long as they got the information across I guess it was fine. The exams were difficult and moved very quickly; it was almost impossible to finish all of the questions, although I wouldn't necessarily say they were unfair.",
    "The lectures themselves are pretty boring and slow, but the class notes and the problem sets are top notch and you learn so much just working through them. Overall a good class.",
    "Racket is a programming language that is not useful in any capacity, yet the CS Department still believes that is it relevant for teaching in some manner. Lecture is useless, and lecture notes are a minimum for understanding the material, yet offer no further resources if one is interested in certain course topics.",
    "Strengths: showed me a lot about computer science I had never even considered before and helped me think recursively without using counters or variables. Weaknesses: Racket seems like a completely useless programming language I will never use again. Also, a little too theoretical, especially towards the end of the course.",
    "Strengths: Breadth of material is great. Problem set questions are straightforward. Weaknesses: Problem sets do not have anything to do with the exams. Lecture notes are too brief to learn or review material. Very little practice of circuit problems, making the exam very difficult (as revealed by the average score on exam 2). Please include example problems in the lecture notes.",
    "Great overview of computer science fundamentals, but it can be a little dry and some of the work feels like busy work -- more conceptual problem sets would go a long way.",
    "I liked how notes were online so you could prepare before class and understand what was going on. More TA assistance would be nice for some of the problem sets. The tests are a big time crunch which basically separates people by how fast they can write code instead of determining whether they actually understand the underlying material.",
    "Weaknesses: - Poor organization - Too many people - Lack of individualized support Strengths: - Good online material - Clear expectations - You learn a lot",
    "The class was taught well, but the tests were very hard. It was simply way too much work in a much too short time limit. You had to be able to see any problem and instantly come up with the solution, and even then you would barely be able to finish. Luckily it was curved, so it didn't end up truly mattering.",
    "Fairly good course overall, no significant complaints.",
    "I wish there were some more resources on the language itself, Racket. I understand that learning Racket is not the point of class, but there were a number of times during the first half where I felt like I had the right idea to solve a problem, yet lacked the necessary knowledge to implement it in Racket.",
    "Lecture was very slow, almost unnecessary, especially since Professor Rushmeier posted all the lecture notes online. The difficulty of the tests also varied drastically; the first test was remarkably easy in comparison to the second one, which dropped the median by approximately 20 points. However, psets were genuinely interesting, and I felt most engaged by them. In fact, a lot of my learning was through the psets, supplemented by lecture notes.",
    "It seems like there should be sections to accompany this lecture, or at least some kind of meeting with peer tutors every week that reinforces what was covered in class.",
    "Some of the topics felt like they were randomly thrown in there without a great deal of explanation and at other times we went through too many practice problems of the same thing..",
    "Framework is well designed to enable a multidimensional understanding of computer science. Problem sets facilitated learning and were challenging and fun to solve.But class could have made better use of tech, rather than being taught old school, write-stuff-on-blackboard way it is taught now.",
    "The course does an excellent job of reinforcing the material in Problem Sets, but I feel like the presentation of material in lecture could be more clear at times. Sometimes, I would have to go a few steps back to understand what was going on in the pauses that were given for time to participate in class. Furthermore, I feel that the exams were overall fair, with the exemption of Exam 2, for I could not demonstrate my knowledge of the subject matter in the limited amount of time we were given. However, the material was very engaging and the Problem Sets were overall very fun to do (with the exemption of Pset 5, which was a pain).",
    "Strengths: Good introduction to various concepts in computer science Weaknesses: topics are sometimes not covered well enough and don't mesh well.",
    "This computer science course is very different from intro courses taught at other schools. The psets and tests were very challenging, but the psets did not help for the tests at all. I thought there should be more material aligning with the tests and I felt at times the psets were just trial and error until I got the right results.",
    "I liked how the notes were posted online so you could really focus in class on the lecture.",
    "Holly is an amazing professor. Peer tutors extremely helpful. Psets could have been more thoughfully constructed.",
    "CS department at Yale is severely under-resourced.",
    "One of the strengths of this course was that it exposed us to some of the big theoretical concepts in computer science. A major weakness was definitely how impractical it was. Coding in racket seemed a bit outdated. Sometimes it was hard to stay motivated in the class because the psets didn't seem relevant to the real world. This, of course, is coming from someone who is interested in coding in industry as soon as possible.",
    "Strengths: efficient course, helped along by years of refining. Weaknesses: size such that it can be hard to get help (peer tutors can help but it is difficult to suss other people's code on the spot). Psets clearly connected to class material and we learned far enough ahead of time to complete the psets. However I would have liked to have seen some psets complete themselves for instance although there was something in the TC-201 pset (hw4) we did not make the machine run for homework I would have liked to have written in assembly language for the pset.",
    "The main downside to this course is the fact that the homework assignments are very different in their subject matter compared to the material tested on exams. Further, Racket is a useless computer programming language that is not used by big tech companies. The argument that learning to code in Racket helps students learn problem-solving is outrageous. The real reason the course is taught in Racket is likely due to the fact that homework assignments can be autograded.",
    "Exams were brutal.",
    "Some strengths - Professor Rushmeier, the TA, and the peer tutors were all excellent at providing extra help and being open to answering questions, which I appreciated greatly and found really useful. I liked the course organization as far as the order in which topics were presented - I thought they built off of each other nicely. The additional PDF lecture notes were also incredibly helpful and I appreciated the effort in providing those. Some weaknesses - There was a little too much time at the beginning of each lecture spent on logistical things (often up to 10 minutes, which is a pretty large fraction of a class that's only 50 minutes long total). I also thought the exams were just really, really rushed - a lot of my classmates and I felt like there was just not enough time to think about answers, so if you didn't know something immediately, there just wasn't enough time to finish the entire exam. Additionally, it would've been helpful to get more exam-type practice problems. The practice exam problems were very useful, but there weren't very many, and our homework problems often didn't give us practice on the kinds of things we were tested on (coming up with DFAs, for example, or drawing gates for different boolean structures).",
    "The course has valuable concepts about computer science that provide a good basis for more computer science. I think that the class itself wasn't as engaging as it could be. The lectures seemed to be slow and uninteresting and psets could be done with a cursory knowledge of the material in lectures.",
    "The strength of the course is in how well the professor is able to teach the class and the engaging nature of the problem sets. The weakness of this course is the little time allotted for the number of problems on the exams!",
    "I felt as though the exams were under too rigorous of a time constraint. I do not think there was enough time for me to accurately convey my level of skill.",
    "I thought the class moved at a good pace, and covered interesting material. I think an increased availability of practice exams, or greater resemblance between homework problems and exams, would really have improved my time in the course, as I worked hard on homework and studied energetically and still had a very difficult time on exams.",
    "Lecture is the biggest weakness of this course. Prof. Rushmeier is not engaging and while obviously very smart not great at teaching.",
    "Fix the test-taking times. It is impossible to complete the exams in 50 minutes and under. After each exam, many students left complaining that they didn't have enough time to even finish the exam. I would like to take exams that truly tested knowledge on the subject, instead of test-taking abilities.",
    "great support by TAs and professors, was also very interested by the course material!",
    "The course material is interesting, but Professor Rushmeier structured the course in a way that made the problem sets difficult to finish on time",
    "I think less time on the low-level programming languages and more time spent on time-complexity and algorithms would be helpful. Also, the tests are focused on speed rather than knowledge, which can be frustrating. At the minimum, it would be nice for the practice test to more closely mirror the test, or for multiple practice tests to be given. The structure of three midterms and no final is very nice however, and takes away some of the stress. This is a bit outside the scope of the course, but I think that it would be helpful to offer formal assistance and advice when it comes to career fairs, internships and networking. As freshmen, we're thrown into all of that without any preparation and it would be helpful to be given more information. Overall a great course!",
    "Problem sets could be weighed more, and exams be weighed less.",
    "It is very structured, so it is easy to catch up on material if you ever miss class. I think it could be improved by limiting the amount of code that is written on the board and leaving that for the reading handouts.",
    "This class has several problem sets that are very challenging, but each question on the problem set serves to inform the next--very rarely, if you put in the time, will you ever feel completely lost. Unfortunately, this does not translate to the exam, which is a race against time. I felt completely caught off guard by the first exam, and wish that Holly had been more upfront about their purpose--ostensibly to measure how much code one could memorize and regurgitate.",
    "The test difficulty (and limited time allowed) made it very difficult to do well on them, especially when I generally felt comfortable with material. Otherwise, the lectures and assignments were interesting and thought-provoking.",
    "It's a very organized course. The online notes are set up very well. I think the course could benefit from an additional section.",
    "It might be nice to use a more modern functional programming language. While Racket is in the same family and Lisp and Scheme, it might be nice to use one of those languages.",
    "I loved this course because it gave a great introduction to many different topics in computer science.",
    "Problem sets are very fair, good exams and a nice curve. No weaknesses I can really think of, besides that I thought the course got a little slow during the computer architecture unit. You stop coding and go into design -- wasn't for me, but doesn't mean it was bad.",
    "One strength of this course was its structure. It followed a very logical progression and made the jumps from one topic to the next manageable and logical. Another strength was the difficulty of homeworks. Some of the homeworks were fairly difficult which made it essential that you learn the material in class thoroughly. A weakness was the strength of teaching and the motivation to come to class, which was pretty low.",
    "Weakness: no collaboration, tests and psets rather disparate Strength: interesting psets",
    "Many students felt that skipping lecture and reading the online notes was sufficient for passing the class. However, the class has the very difficult task, as it were, of introducing the science of computer science for students with very different backgrounds in the field. The assignments were very well-structured and thought-provoking. Those alone could prepare students for the examinations.",
    "I was great at utilizing the resources given to do well in the class. For example, I went to every office hour. I had trouble, however, completing the problem set in a reasonable amount of time.",
    "I thought that the course was very interesting, however the use of racket, I felt, was not good preparation for later courses or for the field of computer science. However, the psets were challenging and the material was definitely new and relevant.",
    "Strengths: Unlike CS50 (CPSC 100), CPSC 201 gives you a better sense of what all you learn in class builds up to in terms of a bird's eye picture of computer science. Weaknesses: I wish we learnt more about algorithms and did so more formally. Granted, that may not be the objective of an introductory class, and is probably covered in other classes like CPSC 223. I wish there was a deeper exploration of the reasons behind using a functional programming language like Racket instead of something else like C or Java (i.e. different programming language paradigms).",
    "The greatest weakness is the tests in this course. They do not test you at all on what you have learned and really your grade is just a gamble. It becomes really frustrating and discouraging at the same time.",
    "I didn't think the teaching was particularly great. A lot of self-teaching was necessary because the lectures weren't super helpful. It was also frustrating that the problem sets offered virtually no practice for the exams, so studying became pretty difficult, as evidenced by the 61% average on the second midterm.",
    "Strengths: having many peer tutors to help with problem sets was a non-intimidating way to improve on concepts and make progress on psets. The lectures were always engaging and interesting, usually easy to follow. Weaknesses: The support\/resources of the class seemed sparse at times. The TAs at the office hours sometimes hadn't done the pset by the time we came to them with questions, which made it difficult to get out of roadblocks. Some of the psets also had cryptic instructions, which made it hard to figure out what certain problems were asking us to do. The lectures didn't always correspond to the psets\/midterms, which made learning for these three portions of the class (exams, psets, and class) seem disjointed.",
    "The method of teaching was a bit confusing to me, and the grading system was a bit too stringent even for a computer science course.",
    "One strength of this course is that it gives students a survey of numerous topics within computer science. Another strength is that, although some of the concepts were hard to understand at first, the psets are well designed to reveal the concepts problem by problem so that completion of the homework nearly guaranteed a grasp of the subject matter. Another major strength of the course is the availability of peer tutors during Zoo hours and the encouragement of collaboration with other students in that setting.",
    "Strengths: Covers everything needed for a computer science major first entering the field Weaknesses: Taught in Racket, a rarely used language",
    "The course guideline was followed very well and the class overall had a steady flow to it. One weakness of the course would be the submission of assignments, which proved to be more tedious than necessary.",
    "One weakness that I felt was that the mid terms didn't exactly test the skills that we learned in class and through our problem sets. Perhaps it would be helpful to have a more rigorous and longer set of similar questions so that students can practice in advance and perhaps learn better the skills required for the tests.",
    "Some of the homework instructions were unclear.",
    "The tests (midterms) in this class did not feel appropriate for the subject. I understand the desire to spread out grade distribution but computer science, especially writing programs, seems to me a subject that takes thought and should not be rushed.",
    "It was a fun course. No real improvements needed.",
    "The professor was a great teacher, but should really focus on making the lectures flow better in terms of integration with visual aid. She seemed to actively make no effort to improve her handwriting on the board, which would have been fine if she had just prepared slides\/typed up the things to be written on the board. Handwriting code makes little sense to me.",
    "Strengths are the problems sets are well-thought out and Professor Rushmeier is great. Main weakness was exams tested ability to perform quickly under pressure, but not so much general knowledge of the concepts.",
    "Allow students to work together! It makes learning so much easier, and helps build a community in and out of the classroom.",
    "The course's problem sets are interesting and creative (though difficult), and the availability of the teaching staff to answer questions and provide guidance was very impressive. However, there were multiple times when I felt like the material and examples provided in the lectures were not sufficient to equip me to succeed as well as I would have liked to on problem sets or exams, which were significantly more difficult and complex than anything covered in class."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "I recommend this course if you are interested in getting the fundamentals in UNDERSTANDING how computers work from the theoretical, not mechanical\/electrical engineering level. However, this course will not teach you to program, and, while the concepts covered may make you think about programming in a different way, the course is by no means practical if you want to become a programmer, and it won't help you pass technical interviews (with the exception of a bit of runtime analysis at the end).",
    "Yes, take this class. Professor Rushmeier was at times a little disorganized, but she is very open to questions and getting to know her students. Would be a good class for somebody interested in a computer science major or interested in understanding programming modes of thinking. If you're just looking for practical experience with coding, you won't find it here (the course uses Racket programming language, which doesn't really show up anywhere else).",
    "Definitely a good way to get a deeper understanding of computers and programming. Wouldn't recommend taking this casually, however. It's a good amount of work and the tests are hard.",
    "If this is your first CS course, be prepared to put hours and hours in. I'm definitely on the slow side of coding, but sometimes psets took me 20 hours.",
    "I'd recommend 201 to anyone potentially interested in going into computer science. While it's a bit too technical and abstract for someone who just wants to learn how computers work, for someone aspiring to or considering the field, it's definitely a worthwhile overview of the basics which will give you a decent idea of whether you'd like to continue studying CS or not.",
    "Take it if you have to.",
    "Yes, it's a good computer science course and functional programming helped me think about coding and computer design in new ways.",
    "I would recommend the class to students who don't have that much exposure to computer science as a whole and only maybe learned how to program. I also think you don't necessarily need programming experience beforehand as I only took AP Computer Science in high school before taking this course and that experience wasn't that important. The programming language she uses, Dr. Racket, was also annoying to use, especially at first when I was just learning it, but does help you think recursively. There were three 50 minute in-class midterms that were really time constraining (there were questions I barely answered and other people in the class skipped entirely), but the curve she gives on each test was fair. Not easy to get an A in, but this is a course that is really necessary for understanding the computer science field more and is a course that seemed to always cover important topics. Also, homework assignments were time consuming and you do have to go to office hours. Homework is an important part of your grade, and also has something to do with the curve apparently, so make sure you get full points on all the assignments if you can.",
    "For CS majors, you are required to take this course. For non-CS majors, you should only take this class if you intend to also take CPSC 223 (Data Structures). This class alone will not teach you how to program, nor will it prepare you for real-world problems. However, it is a good introduction to the field of CS in general.",
    "Yes -- it's great to take a deeper dive into the underlying concepts of CS that you use in every language.",
    "Good course if you want to understand a lot of the underlying fundamentals and principals of programming.",
    "Yes. If you are a non-CS major, do what I did: take it credit D\/ fail. You will learn a lot but will not have to stress out about the tests and Problem Sets which can be really hard. Specially because some people in the class have been programming since they were born.",
    "Yes! If you plan to be a CS major you have to take it, if you want a super strong basis in CS and plan to major in a semi-related field, this will be a great course. It is quite a lot, I came in with a strong coding background and managed to get an A, but I could see it being quite difficult if you didn't have one. Definitely worth the work though.",
    "What you learn in this course won't be that \"practical\" for industry, but will help you understand just how broad the field of computer science is. Overall a great course, although the professor could certainly go faster.",
    "I would recommend it to a student interested in the Computer Science major, but not a student who simply wanted to learn a programming language. The goal of this course is to get students to start thinking like Computer Scientists, so if you just want to learn a language and start pounding out programs and applications, this is not the right course for that.",
    "The tests were not very well written. 4-5 minutes per question and the questions were challenging, not trivial, really should take more time than that. A 50-minute class period really is not enough for an entire exam by Professor Rushmeier. I don't think the expectations for this class were realistic at all. The problem sets were incredibly time-consuming. Usually this class has late days and this year Professor Rushmeier decided not to allow students any at all. I ended up getting full points on most of the homeworks but do not know if I learned much or took anything away from this course at all. Anything that I did learn came from the helpful notes accompanying the course, which were actually written by Professor Dana Angluin, who seems more knowledgeable on the material and fairer\/more realistic as a course instructor.",
    "It's a required core class for the CS major, but I'd say the class spent a lot of time teaching concepts that could be learned in very little time. Some concepts were reasonably difficult, but overall, if it weren't a core class, I would not have taken this class. It's probably possible to skip this class and to go straight to CPSC 223 if necessary.",
    "I would recommend this course... to prospective CS majors. The programming language we use, Racket, is a pain and pretty useless. BUT, I am significantly better with recursive because of the nature of this class. Recursion recursion recursion. My goodness, recursion. Lots of that, but also a lot of general computer science knowledge. It's very theoretical. I took this with my twin and we are basically the same person and I liked the class while he didn't. We're both planning to major in CS. Oh and exams were difficult but at least the curve is really good.",
    "Yes, definitely take if you are interested in computer science.",
    "Take it for the major, or for (as a cogsci major) an understanding of how computers compute. Otherwise, go for CS50 if what you want is a working level of programming.",
    "I would recommend this class to a potential Computer Science major or anyone interested in understanding the theory behind the science. I would not recommend this course, however, to a student who buckles under time pressure and like lots of time to complete problems, for the exams are very fast-paced.",
    "If not for the computer science major, I would not recommend taking this class for an introduction to computer science; I would look into cs 112 or something similar as Racket isn't the most used language.",
    "Yes, I think it's a great intro CS course, though difficult, and I learned a lot from it.",
    "most definitely! most ineresting computer science class I have ever taken.",
    "I would recommend the computer science major to other students and by extension this class because it is a requirement for the major. However, I would discourage people who do not intend to major in cs to take another class that teaches more practical skills.",
    "CPSC 201 is a very well-done, efficient class! It has been refined over the years. The language is a little-known, little-used language - everyone will start on equal footing. The problem sets are fairly appropriate to the level of the class and if you understand the material, they do not take terribly long. Do be prepared to invest time and DO start them early, because in computer science it can be easy to get stuck. Take advantage of all the resources available to you; peer tutors, TAs, the professor (Rushmeier is very good about emailing), or even a night of sleep can help. Midterms are short but Rushmeier's are for the most part doable, and they clearly connect to the problem sets and the class. EENG 201 has some overlapping material (EENG 201 focuses on boolean expressions, logic gates, and an abstract view of low-level computer architecture); having already taken EENG 201 I found it helpful to CPSC 201 but still learned some things in these units. Rushmeier is an efficient professor who covers as much material as you need to succeed but allows for questions in-class and is a good lecturer for what can easily be dry, technical material. I found my prior CS50 experience good for understanding towards the end stacks, queues, and a little bit of sorting algorithms but am not sure if it helped otherwise. (CS50 helped me understand a lot of broad fundamentals that I am seeing on summer job applications, however, and CPSC 201 does expect you to have experience coding and debugging your own problems, so keep that in mind if you are deciding whether to take an introductory programming class.)",
    "I would never recommend this course to another student. It was a waste of time to learn to program in Racket. Do NOT take this course unless it is required for your major. Please, if you want to learn a programming language for its usefulness, take a course in Java at Yale or teach yourself how to code using online tools or prep books. Python and Java are infinitely more useful than Racket, which does not make it on any lists of the most-used computer programming languages.",
    "Take this class! Especially when combined with other intro level electrical engineering or compsci courses, 201 gave me a broad and comfortable understanding of computer science principals and functions of data storage and basic machine language.",
    "Yes, it's a great course to strengthen computer science principles if you know how to program.",
    "I'd recommend this course to any student interested in CS (probably mandatory, anyways!) or Cognitive Science. Unlike Intro to programming, you really get a solid foundation in the nitty gritty details of how computers actually work, and although Racket was occasionally painful, it does succeed in teaching you a different mindset of programming recursively. The exams and homework assignments are tough though, so be prepared to put in a lot of time and work into this class. If you do, it'll be really rewarding!",
    "Yes - especially if you enjoy computer science. This class brings up important concepts about computer science and teaches programming in a functional language, a challenge that I don't think most students have dealt with before.",
    "If you are interested in CS and you have some background with another programming language, go for it! This class is difficult without prior knowledge.",
    "I would only recommend this course to those interested in pursuing Computer Science as a major, otherwise it would not be a worthwhile investment.",
    "I really enjoyed the class, and learning the concepts involved. I had a very hard time with exams, despite investing significant time both in homework and studying, so that's something to keep in mind, but that might just be me.",
    "A good introductory class, though some conceptual experience with computer science is likely needed to take full advantage of the course contents. Chances are, this class would be taken for major credit, there's not much to be said on the subject of recommending it.",
    "I would not recommend this course to another student. However, it is required as a Computer Science major course so I guess CS majors have no choice.",
    "Definitely, to someone who has a background in computer science and is thinking about the major",
    "If you want to gain a solid understanding of Computer Science, this is a good course.",
    "Definitely, I already have! However, I would only recommend it to students who are interested in CS as a major. It is very interesting but has too little practical knowledge for students not interested in it as a major.",
    "I believe that the better track for CS at Yale is for students to go from CS50 --> CS223- I don't really view CS201 as being that entirely useful with regards to real-life applications or preparation for 223. Thus, for those people who have coding experience, I would recommend that they start in 223 rather than 201, because often times although the material in 201 is interesting, it seems like it won't ever be used again in following CS classes at Yale or the CS industry in general.",
    "Yes. If you don't have much experience in the field, this gives a good foundation of the implementation (as opposed to theory) side of things.",
    "I know several students who skipped 201 to take 223 this year, but I would offer a challenge to that. I think that 201 provides a phenomenal basis of fundamental understanding for Computer Science, which will serve to aid you throughout your time here at Yale. Yes, it is scary to be learning a language with no clear practical application, but over time you'll begin to see why CS at Yale follows this natural progression. I would caution you to know that the instruction is borderline terrible, though. I've never been so engaged with the \"idea\" of a class while being so simultaneously disengaged by the actual class. Holly obviously cares about her courses, and the teaching staff answers questions rapidly, but by the end of the semester, even the guy you'd expect would go to class every day was no where to be found. This is honestly a shame. I think much of it has to do with Holly teaching a class that was written by Dana--who is amazing!! You pretty much have to take the course no matter what, depending on where it falls in your schedule, but you're in luck if DA is teaching.",
    "It's a decent class if you genuinely have an interest in Computer Science-- note that this is significantly different from coding. Take it if you're thinking of going into CS-- if you're looking to learn how to code, go for 112.",
    "Absolutely recommend! Probably better for CS majors, but a great start to the major.",
    "I think that anyone thinking about majoring in computer science should take this class. It will make you feel more comfortable with recursive thinking as well as teach you the fundamentals of computer science.",
    "I would definitely recommend this class to anyone who is interested in computer science.",
    "If you already have a good amount of skill with building websites, programs, applications and want to further your CS knowledge, absolutely. Otherwise, CS50 might be best for you.",
    "Yes, I would recommend this course. It's great for anyone interested in learning how computers work. Be careful with the midterms! They go by fast.",
    "Yes",
    "I would definitely recommend this class to anyone interested in computer science at all because it provides a basic understanding of how a computer is made and what \"coding\" really is. It is very interesting, pretty well taught, has challenging problems, and overall, I have taken a lot out of this class.",
    "This class is a requirement for the major, but there's essentially no other reason to take it. The language taught in this class is not a common one, and while it's theoretically a very elegant one, its practical purpose is somewhat limited. The topics taught in this class are somewhat interesting for a few people, perhaps, but much of it feels very much like a computer science program still figuring itself out; the topics are necessary to learn and significant in the field, but it seems this introductory class isn't very well suited to address them, in respect to the rest of the major. Admittedly, in this time and age, to construct a program of study with introductory courses suitable for both experienced programmers and people with interest but no background is a difficult task, and Yale started doing so somewhat late. The class is a bit discouraging as an introductory curriculum, but the rest of the major is by no means shabby.",
    "Yes.",
    "Yes, it is a required course for the computer science major.",
    "I would recommend this course to anyone who knows that they like computer science. If you do not like computer science and programming, you will be miserable. Otherwise, you will be constantly excited by trying to work through the material and psets.",
    "Yes, if you have a foundation in CS and want to major in it -- otherwise, I don't feel like the course would be super helpful or engaging.",
    "It's a required core course for computer science, but also a useful and interesting introduction to a theoretical understanding of computer science",
    "yes, good introduction to cs",
    "I would definitely recommend this course to other students, especially to those intrested in improving their logic or in learning about how computers came to be.",
    "As a non-CS major taking this course, I want to give fair warning there is a curve made up of mostly actual CS majors. The material is interesting, but the course itself is a pre-req for the major and other major courses. I wish it was taught in another language so that I would gain experience working a more useful language. At the end of the day, you take it if you are a CS major and if you're not, take it only if you're interested in a lot of the theoretical foundation of CS rather than looking to \"learn to code.\"",
    "This course was a great starting point for any computer science student, but could also be a strong QR credit for those wanting to develop skills related to problem solving.",
    "Yes, I would recommend it as it is a good introduction to computer science.",
    "Only take it if you have to. Racket is a pain to work with at times.",
    "I would recommend this course. For those looking to learn programming applicable to the real world, this is not the right class. However, you do learn a lot about computer science, how computers work, and mostly how to approach problem solving in a different way. The problem sets and not easy but with enough time and help are more than doable. The tests are rushed and challenging and therefore not fun, but everyone is in the same boat so, even though it may feel like it, everyone doesn't fail. Professor Rushmeier is soft spoken but she explains concepts pretty clearly, and paying attention in class can save you lots of time outside of class trying to understand ideas on the problem sets.",
    "It's an okay introduction to computer science.",
    "Yes. It was enjoyable and informative",
    "I wouldn't recommend this to a non computer science major. People interested in learning how to code or light computer science might benefit more from CS 112 or an online program. This is a very much a class in which most of the learning is done by the students themselves. I learned far more from just doing the problem sets and reading the lecture notes and textbook on my own than I did from the actual lecture or from the feedback that I received from anything. Feedback is definitely where the course has the greatest room for improvement. The auto-grade feature for problem sets is useful, but it does little to point you in the right direction when you have something wrong. Furthermore, auto-grade will only tell you if your code produces the correct output or not. It tells you nothing about how good or bad your approach to the problem was. I often times found myself getting a \"correct\" answer, but feeling hugely unsatisfied with my implementation. My programs were often times a big Frankenstein of code, continuously modified until something finally magically worked. Having an answer key released after handing in the problem set would be extremely useful for analyzing my own code and seeing how I could improve. My largest frustration with the course was that the exams did not fit the course. The lectures and lecture notes taught us concepts, but did not offer good practice in implementing those concepts. This is what the problem sets were for, but I did not feel that the problem sets were very helpful for preparation for the exam. The exams were extremely fast paced, requiring remarkable efficiency to complete. The problem sets however were designed to be big problems that one would slowly chip away at over the course of two weeks. And the fact that we had no useful feedback on the problem sets did nothing to help us improve our efficiency in coding, or improve our ability to take the exams. The TAs were quite helpful, but they were often heavily outnumbered by students. This is where we could learn the most about effective approaches to the problems, but unfortunately this was also a less accessible source. I often found myself going to office hours and just coding by myself for hours while waiting in a queue that only grew. That being said, I still learned a lot from this class, and have no regrets in taking it. It just isn't a very rewarding class for the amount of time that you are required to devote to it.",
    "I would recommend it to CS majors and those interested in learning CS theory, but not for programming skills; recursion is very useful to learn but that is only really covered in the beginning of the course.",
    "I would recommend this course to anyone who wants to understand how computers work at a lower level. This is a great introduction to the field of computer science, problem sets were fun and challenging, and Professor Rushmeier is great.",
    "Yes",
    "Yes, computer science is a great thing to learn.",
    "I would be quick to recommend this course to students who have a strong background in coding and computer science concepts, but I would be less quick to recommend it to those hoping to get ahead in the major without having established a firm foundation in those skills."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "201",
  "section": 1
 }
}