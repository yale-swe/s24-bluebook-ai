{
 "crn_code": "10510",
 "season": "201603",
 "legacy_coursetable_course_id": 39117,
 "enrollment": {
  "enrolled": 64,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    1,
    1,
    15,
    18,
    13
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    2,
    11,
    14,
    16,
    5
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    5,
    4,
    12,
    21,
    6
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    3,
    4,
    15,
    16,
    10
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    1,
    2,
    11,
    22,
    11
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    0,
    11,
    19,
    17
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "Programming and reasoning skills",
    "I had to do a lot of self learning because I felt that I was learning nothing in lectures - however, I learned a lot on my own this way and thus became a better programmer, not dependent on the notes given in class and much better at learning and absorbing the materials on my own.",
    "I have learnt different data structures and how to implement them in C.",
    "I learned about data structures and how to implement various algorithms. The most important thing I learned, however, is how to solve some problems that are frequently asked during coding interviews.",
    "I learned a lot of important information about different kinds of data structures and how to use them in programming techniques like dynamic programming. I also got a lot better at programming the C language. I learned how to manage my time when writing big programs that have many components, and how to debug these kinds of programs. I also learned new ways of thinking about different programming problems.",
    "Coding in C, debugging, understanding of basic data structures.",
    "I learned how to write code and compile it straight from the terminal on my computer. I learned how to write in the C programming language. I learned what a pointer is and how to free memory. I learned a lot of useful programming data structures and how to implement them.",
    "Learnt more about data structures and, more generally, matured a little as a student of computer science.",
    "An essential overview of data structures and programming techniques.",
    "Basic skills of programming and basic understanding of data structures",
    "Basic data structures in C",
    "My coding got much much much better.",
    "knowledge of various data structures, dynamic programming, hashing,",
    "I learned about various data structures, how to implement them, and their runtimes. I also gained a lot of experience programming in C and dealt with pointers, references, and memory allocation.",
    "This course introduced me to some details of memory allocation in C, as well as debugging. As the title suggests, it also provided basic information on data structures.",
    "I learned a lot of useful programming skills, data structures, and computer science topics. I also gained confidence that the cs major at yale is doable an perhaps not as ball-busting as everyone makes it out to be. That said, the course was challenging, and I learned time management skills by necessity.",
    "I learned to code in C and learned material that could be tested in coding interviews.",
    "I learned about data structures and programming techniques and how to implement them in C. I also learned how to manage my time for the problem sets.",
    "I learned a lot of data structures, specifically how to implement them and which data structures are best suited for a specific task. This course also greatly improved my abilities with C.",
    "I developed a pretty strong understanding of the C programming language, and feel more comfortable applying and thinking about various data structures.",
    "The C language",
    "Learned to code in C and a bunch of new algorithms and data structures to implement some cool projects. This is definitely the \"learn to code for real\" course that follows nicely from 201 and makes me feel much more confident applying for internships."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "Professor Slade is great, but he should be more careful with the spec of each assignment.",
    "The strength of the course is a result of the weakness - organization was poor and lectures were lacking in material. However, because of this, I became much better at learning and teaching myself (also a bit of mind reading while trying to edge case). Another strength were the ULAs and course assistant, who were very helpful and attentive.",
    "The course is very engaging and interesting. The lecture is entertaining. Some assignments are too hard while the rest are too easy.",
    "Towards the beginning of the semester I at times felt confused about the requirements of my psets. I felt like the rules would change midway through or that some of the more important requirements were not even listed in the specification. This did improve throughout the semester. One strength of the class is Amelia (and other amazing TAs who really seem to be personally invested in our success). Also, Slade's jokes in class may make me laugh and I seem to remember the material better when there is something funny associated with it.",
    "The strengths are the problem sets and the scope of information covered. I thought the problem sets did a great job of being a challenge (and a step up in complexity from CPSC 201) while also integrating what we were learning in class. Another strength is the great resources of notes online and office hours with awesome peer tutors. One other great strength of this course was the opportunity to make up some points and forgiveness from the instructors when a problem set had an issue. One weakness is that lectures were very boring and I felt like I didn't really learn the material until the problem set reinforced things.",
    "Professor Slade is a great guy but not a great professor. I would definitely go to office hours since the teaching staff is beyonf helpful.",
    "The biggest weakness is it being taught in C. This leads to most of the focus being on dealing with C-specific errors and debugging rather than thinking about data structures. Slade is also a poor lecturer (but brilliant and accomplished individual) so its probably better with a more skilled lecturer.",
    "The lectures were completely pointless. Professor Slade really did not teach us anything in class. All the learning was done by doing the problem sets.",
    "The homework assignments a great. Definitely they were the highlight of learning CS, and I learned so much doing them. Also the support structure in the class is very strong. I have never taken a course before with TA office hours pretty much every day of the week, and I found it super helpful to be able to get help on any given day. The weakness of the course was that the material being taught wasn't broken up into nice little units. It felt like we were jumping around a lot and back and forth a lot between separate topics I think it could be improved by categorizing the material into nice little units.",
    "Problem sets were made too easy. The difference in difficulties between Slade's and Eisenstat's problem sets is humongous.",
    "You basically learn everything from completing the problems sets; lectures don't help too much if you just read the notes. The issue with this is that the problems set specifications tended to be inaccurate and ended up being updated several times within a week, which meant that your program needed to constantly be updated and that you needed to play close attention to little things - which could get annoying.",
    "Problem sets were suitably challenging, though they tailed off in the end. I feel I had the time to learn more.",
    "strengths: the difficulty level of the programming assignments are pretty appropriate and allows us to improve our programming step by step weaknesses: could have taught us C in more detail during lecture, especially in the beginning of the semester",
    "I loved this course, I learned so much just by doing the problem sets, and the exams were reasonable.",
    "Good material, structured.",
    "Learned virtually everything outside of the class - either through reading or through the problem sets",
    "This course was disorganized in the extreme. The only saving grace was the TF, who practically ran the class and kept all of us on top of things. - Lectures never had a clear topic. Each lecture would be spent on inconsequential things, such as how to navigate the 223 website, or questions raised on Piazza about the latest homework. I don't recall a single lecture that went from beginning to end focused on a specific topic and teaching us that topic. - Material was expected to be learned on the students' own time from various textbooks. This wouldn't have been such a big problem if even some of the material was taught in class and students had a responsibility to complete\/supplement class material with textbook material, but the fact of the matter was the onus was on the students to teach themselves all of data structures. - Staff solutions for homeworks always had multiple versions that continued to be updated as late as hours before the homework deadline. There was never a single homework whose staff solution stayed the same from the release of the spec until the submission deadline, and one homework had as many as 9 updates to the staff solution. - The specs for homeworks were often vague and incomplete in what exactly the assignment was looking for. They would either not mention what data structure we were supposed to implement or mention it without specifying what part of the assignment it was to be used for. - There was no way to receive feedback on homework submissions. I understand that it would've been impossible for TAs to manually read through every homework submission and give tips on coding style\/organization\/logic, but I don't think going through that process for just one assignment out of the seven we had would've been too much to ask.",
    "The lecture notes for the course were useful, it generally covered a broad range of data structures, and the resubmission policy for psets allowed us to identify mistakes and correct them, which was helpful. I was often frustrated by the solution programs to the psets, which had to go through many iterations not just for simple edge cases, but for significant errors (floating point imprecision, etc). The specs could have been a lot more specific (when to fail gracefully, when to throw an error, etc), given how often the provided solution was changed. The course also felt like a much easier version of previous years, and I wish we had covered all of the topics from Aspnes notes; in general, providing the algorithms or data structure files for psets was useful for doing them quickly, but not great for problem solving skills or development as programmers. The midterms tested memorization of random logical problems from class and other pieces of sample code, which did not seem like a great test of our understanding of C or data structures. Finally, lectures were not particularly efficient, and relied entirely on small sections from other peoples notes or simulations. Instead of going over problem sets in-depth, I wish we had covered more complicated aspects of algorithms or data structures.",
    "This class did not a good job of teaching data structures.",
    "Strengths: Professor Slade is really kind and thoughtful and has your best interests in mind. As a Yale graduate, he can relate. I like when Slade teaches at the blackboard. Weaknesses: Sometimes lecture could have been a bit faster paced.",
    "Strengths: The introduced policies regarding error correction for partial credit; the TA Amelia; the idea behind the assignments and the degree of difficulty of the assignments; the expectations of the tests Weaknesses: The many versions and corrections to assignments and what was expected. I hear from older students that it might give a false sense of how robust assignment submissions have to be in 323.",
    "It could be improved if we got homework grades faster.",
    "This class, like most classes in the Computer Science department, take way too long for what they're worth. Too many hours a week. If you have the time, aka you don't have a job, you've done a lot of coding before so everything is easy, you have friends who are going to split up the work with you(not legal, not an endorsement), etc. Then go for it. Otherwise, don't do it.",
    "I loved this course. Data structures were introduced in lecture and then we had to solidify our knowledge of them in the subsequent problem set. I just wish our professor went over these data structures a bit more in lecture as opposed to talking specifically about the problem set for the whole time (or at times unrelated UNIX).",
    "I think that the course material is quite strong; this class is really driven by its problem sets. Although the textbooks and the lecture notes are not always on the same page, there is some cohesion.",
    "The professor isn't very engaging or organized. It's very frustrating because this is one of the most important courses in the core CS sequence and it's usually wonderfully taught by Eisenstat (so I've heard), but this year, Slade just completely fumbled. Besides that, I think it's great.",
    "I feel that this course covered a lot of material, but I feel like it could be improved by having lectures that are more relevant to data structures and algorithms as opposed to the nuances of the C programming language. While I did learn a lot, I felt that lectures could have focused more on discussing and thinking about data structures..",
    "This course is very pset based since it's a CS class, but it'd be nice if there was more structured content presented in class lectures rather than students being expected to read up on notes themselves.",
    "The problem sets are boring. We should do something visual or exciting--Nobody is every going to go home and be like, look what I built today? A graph. If we spend so many hours working on them, it should be something we are proud of doing.",
    "Tons of work, tons of reward. It has to be your focus for the semester. You MUST budget 20 hours for every problem set over two weeks, which is totally manageable if you work a little bit every day. There is no way to compress the time it takes for coding, so you cannot bang out a pset in a day like you might a paper. You don't want to use up your late days too early in the semester. Slade's lectures could be improved. We also need more TAs at each evening help session, because going there felt pointless when there was a 45 minute wait for time with the one TA."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "I would recommend this course if you do not have the motivation to learn from Aspnes's notes online all by yourself.",
    "Take this if you like programming, if you enjoy a challenge, and also, if you're a CS major. Learn to manage your time - problem sets for me took on average 7 hours, but for many others it could be upwards of 20. Start early, understand concepts thoroughly, and don't just copy code given in lecture without understanding it - you're not going to enjoy debugging that. Study C before you come into the course (take time during break) and it will be much much easier.",
    "I have learnt a lot of useful things from this class. Take it if you want to learn coding well. This is one of the core course.",
    "I would only recommend this course to someone who is interested in being a CS major. Other than needing to know these key concepts for a job in CS, I think that there are more classes at lower level that are better for \"practical coding\" like CS200 that teaches useful languages like python and R.... unfortunately that class doesn't count toward the major because it actually super helpful skill.",
    "I would definitely recommend 223 with Slade to another student. You learn a lot of great information about computer science that's useful for all future studies and finding jobs too! Definitely make sure to start problem sets early and use office hours\/the awesome peer tutors. Another thing is that lectures are quite boring and I didn't learn very much in them (although they are worth going to, because learning something is better than nothing, and Slade will tell funny stories and also give you tidbits about the exam-- and the logical problems will also be on the tests!) The problem sets make the whole class worth it, because you learn how to write a big program rather than a bunch of individual problems. This forces you to manage your time and learn to debug during rather than after. Overall, I felt like this class made me a better programmer and computer scientist.",
    "Take it, but go to office hours - you won't learn anything in the class itself.",
    "Obviously got to take if you're a CS major. If not, its not ideal since a lot of the focus isn't on learning applicable coding skills or about data structuers, but given its the only option at Yale still probably worth taking if you're interested in it or it would be relevant to something you want to do academically\/professionally.",
    "I would definitely recommend this course to other students! I took this course Cr\/D\/Fail without having taken any CS classes at Yale and only with a bit of MATLAB background, so at first it was a major struggle to do the assignments. However, after 4th assignments I got the hang of coding in C, the homework assignments became really fun and engaging. Your skills improve a lot throughout this course, so I recommend you take this class if you want to get better at programming.",
    "Do it if you're super interested in computer science or need it for the major, otherwise, would not recommend.",
    "Yes. You will learn plenty and improve your coding skills.",
    "If you want to understand what \"programming\" really is, then take this course. I learned so much.",
    "Yes, this class will definitely change you into a person comfortable with programming. But of course it is not an easy class and you will need to put pretty much effort to get a return. If you are not very familiar with C, you might find the first half of the class very challenging (because you need to learn a lot of basics of C like string manipulation, pointer, etc.), but after you study hard and overcome this part, then you will be fine with the rest of the class and you will make a steady progress in your programming skills. Good luck!",
    "Yes!",
    "Absolutely, also you need it for CS.",
    "depends who's teaching it and only if you're serious about learning computer science as a cs major or applied math, etc.",
    "If you already know C, well, the material for this course is straightforward to pick up. Take at your leisure.",
    "I would recommend it if it was taught by a different professor.",
    "If you have to take this course, then I would recommend it; with Professor Slade, the workload is pretty manageable and the peer tutors are helpful, although the knowledge you get out of it seems to be less, too. With that said, its a nice introduction to data structures, and techniques that seemed to be used in actual software development. Problem set resubmissions are friendly, although you should be careful to start them early; midterms are quirky (they rely heavily on lecture notes\/code), but not terrible. Prepare to rely heavily on Aspens lecture notes and the provided pdfs.",
    "This class is probably required if you are taking it. Its a good class if you want to learn data structures for interviews etc. But if you are a cs major, you probably have already learned almost all the data structures, so the class becomes more just mindless work of implementing the data structures. Professor Slade is an extremely kind and knowledgable professor and apparently made the class much easier. However the class was taught in a very unstructured way. Many of the questions in class could not be immediately answered and most of class was spent going over the problem sets or answering questions about them. But I feel like more class time could have been focused on learning the data structures. I also feel like a lot of class time was spent doing logical problems which were fun, but were only focused on the intricacies of C which are not very helpful when considering the overall objective of class to learn the data structures and programming.",
    "This is a good course to get a sense of whether the CS major is for you. Hard, but you will learn a lot. Slade's psets are less nitty-gritty 'gotcha' than are Eisenstat's. That said, Eisenstat is a more compelling lecturer.",
    "Yes",
    "Yes it is important for the cs major. It is helpful for software engineering interviews.",
    "No. But if you're a CS major you have to. Think long and hard if you want to be a CS major is Yale's current climate.",
    "Yes. If you are majoring in anything CS-related, this is a great course to take. Especially if Slade is teaching it- he's funny, down-to-earth, and has quite the CS background. He's great! Just be prepared for the problem sets- even though you'll have other work, take at least an hour or two to work on them the moment you get them. They'll be due two weeks later which seems like a long time, but it can catch up with you fast and you'll be up late eating buttery food and drinking a Red Bull trying to plug your memory leaks. But actually, even though the problem sets took me awhile (20 hours on average), I was never frustrated or hated the course. I actually enjoyed doing the problem sets and if you're passionate about CS (or just like the way that Slade has structured this course) I bet you will too!",
    "I would definitely recommend this class to any computer science major or non major looking to improve their coding abilities and efficiency.",
    "Hope that Slade is not teaching this course again. Stuff you need to know for cs though, so take it even if he is. It's not that hard to learn on your own.",
    "If you're in any STEM field, I think learning about data structures and how to think about them is important. The class is relatively relaxed, and some of the problem sets are definitely pretty fun.",
    "The problem sets are not exciting. You do them, and are glad to be done rather than interested in the program you made.",
    "This and 323 are the core CS courses. I have some non-major friends who tried it and dropped, and frankly it's a lot to ask of a non-major.",
    "This is a class anyone learning programming should take. You learn how to code in pure C: handling standard input, reading files, allocating and leaking memory, using pointers, stressing over valgrind, causing segmentation faults, etc. Alongside, you implement different data structures like hash tables and self-balancing trees, and learn when to use them. There are fortnightly assignments, which can take anywhere form 5 to 20 hours to finish. You are given public tests and one or ten staff solutions. Your code is then tested to the extreme with any edge case the staff can think of. Thanks to Prof. Slade's policy we could resubmit homework to gain back some points after it was graded. The class can be especially tough at times, but it teaches you to write quality software that doesn't break when needed."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "223",
  "section": 1
 }
}