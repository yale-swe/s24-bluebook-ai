{
 "crn_code": "10687",
 "season": "201903",
 "legacy_coursetable_course_id": 52938,
 "enrollment": {
  "enrolled": 87,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    0,
    3,
    9,
    16,
    36
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    2,
    9,
    15,
    20,
    17
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    1,
    6,
    16,
    20,
    19
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    2,
    11,
    17,
    18,
    15
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    0,
    4,
    24,
    36
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    0,
    1,
    10,
    53
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "How to budget my time on a long CS assignment.",
    "I guess I learned about some random assortment of OS topics and how to parse strings really well in C",
    "Very fundamental stuff about CS: hardcore programming in C, systems programming, memory hierarchy, how a computer actually works under the hood, etc.",
    "I learned to be a more persistent programmer and how to work through frustration without becoming upset with my lack of progress. I learned a lot about computer systems and memory hierarchy which has made me have a better understanding of computers in general.",
    "This class will make you a better coder in C. In order to survive in this class, you will need to understand C.",
    "Got a relatively basic understanding of the internal workings of a computer still cant say I fully understand what a shell is, but I still feel like I covered a decent amount of ground in this course and the psets were pretty interesting.",
    "I learnt to complete long problem sets. I understood how to motivate myself to start them early, and how to approach a problem that looks completely incomprehensible at first.",
    "My debugging skills improved massively. I also learned so much about how computers work, to a much deeper degree than the intro we got in 201. I left a better programmer and a more informed citizen.",
    "C",
    "More programming in C, systems programming, memory hierarchy\/allocation, etc",
    "I did well? So I guess I did learn things. Lecture (tests) and PSETs are completely unrelated, and you can skip\/ignore one and still do fantastic on the other, but I wouldn't recommend that. I gained familiarity with computer architecture and systems, but I think most of what I learned could equally have been learned by a wikipedia binge. The class will force you to memorize",
    "I definitely became a better programmer as a result of this course. You will learn an immense about of information about the intricacies of c and systems programming.",
    "Systems, code organization, programming skills",
    "This course taught the fundamentals of computing and how computers work on the most basic level.",
    "...I learned that things don't always go the way you planned. Actually, they probably never do. This class teaches you resilience, and how to cry properly both in private and public. You also learn C in and out, and despite the many failures you'll face doing the problem sets here, you're gonna come out a significantly better programmer than you came in, regardless of your incoming experience (which you should have a lot of. please don't take this in your first year, or even second)",
    "I learned how to bash my head against my computer until I produce code that kind of works",
    "As the name suggests, most of the content involved computer architecture and programming at the system level. We also touched a bit on compression algorithms, parallel programming, and the Linux shell.",
    "I learned some basic topics regarding computer architecture and operating systems, such as computer arithmetic, instruction set architectures (ISAs), pipelining instruction execution, virtual memory, concurrency, bash (Unix shell), as well as other subjects like various data compression and error detection algorithms. However, I would say my greatest takeaway from this class is that I became a much better coder. The psets are very challenging and have an enormous number of possible edge cases. Therefore, I learned how to write clean, efficient, and well-designed code.",
    "I learned more about how systems are programmed and organized at a lower level. We covered topics like computer organization, compression, shells, and how to implement them in C.",
    "I improved my C programming and Valgrind skills and learned about Computer Architecture and Linux.",
    "Interesting material on programming at a lower level than in 223 - stuff like arithmetic and number representation, error detection\/correction, compression, concurrency, and user- vs. cpu-level programming",
    "I learned a lot about fundamental computer architecture.",
    "Algos",
    "Binary number representation, Linux file system, data compression, error detection and correction, computer system organization and memory hierarchy, parallel architecture, virtual memory, shells and processes, concurrency",
    "I learned about systems programming",
    "C programming skills, understanding how the shell works, compression algorithms, bit arithmetic, memory architecture",
    "I became a better programmer. I learned so much about systems programming and computer architecture.",
    "I learned more about computer architecture and what goes on behind the scenes. I also became more familiar with C and I'm a stronger programmer.",
    "learned about computer architecture, organization, and programming techniques via lectures and pretty tough\/comprehensive psets",
    "Learned how to code really long projects. Learned about the basic interworkings of a computer.",
    "I got a lot better at coding in general and coding in C. I learned how to edge-case a program and make it robust. I became fluent in data structures from having to use them so much in solving the cool problem sets in which we implemented system functionality that most take for granted. Compression algorithms, system design such as segmentation vs paging, as well as error correction were other things I learned.",
    "C programming, computer architecture, memory, pipelining, etc",
    "Learned about the internal organization of a computer Coded some basic terminal programs (bash, a command lexer)",
    "In class, the lecture consisted of topics within computer architecture, linux, and other CS comcepts like compression and error detection\/correction. The problem sets consisted of heavy systems programming, often implementing Linux functionality on our own.",
    "I gained a greater insight into how computer systems, particularly the shell, works. The course covered parsing, information storage and retrieval, compression and decompression algorithms, and briefly the structure of the operating system.",
    "Became veeeeeerrry comfortable with C and programming in general",
    "Implementation of random programs such as bash and LZW compression.",
    "Systems programming, some architecture content and significantly increased my proficiency in C",
    "Code better, computer architecture",
    "High-level understanding of computer architecture, the linux operating system, systems programming. You will understand how your own computer works a lot better after taking this course."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "Its hard. REALLY hard. REALLY REALLY hard. But you will LEARN so much",
    "Strength: the psets are very engaging and push you to become a better programmer; but be prepared for intense frustration with the psets if you don't properly learn how to use valgrind and gdb. Weakness: the lectures are sometimes boring (but I can't come up with a better way of presenting the material though lol).",
    "The strengths of this class are the intellectual challenge and the complex but interesting programming assignments. Although they are very difficult, they do challenge you to think. In my opinion the biggest weakness of this class is that your grade depends a lot on how well you can come up with the right edge cases. You can spend 10+ hours edge casing and still lose 30% of your grade on an assignment if you don't think of the right edge cases.",
    "This class is very challenging and time consuming, but the material is interesting and there are always plenty of office hours to help.",
    "Stan is a LOVELY professor I have to admit that I frequently zoned out during lecture BUT he made such an effort to make the course manageable for us (e.g. classwide extension on LZW, lots of super helpful TAs, minimal lateness penalties, was incredibly accessible by email) which helped a lot with the stress of this course. I still think the lectures could be better organized and the readings chosen more selectively.",
    "The problem sets were good but very repetitive. Most of them boiled down to some tedious parsing (apart from LZW). The 'edge cases' weren't so much about understanding your solution and its potential problems, but more about reading everything that was written in the specification and trying to combine them in various ways. I would've enjoyed solving more interesting problems.",
    "Professor Eisenstat is an amazing professor. His lectures are really clear, and he's reasonable when it comes to assessments (exams, psets). There's a lot of work in this class, but it's really worth it. Just make sure that you have enough time during the semester to work on the psets and understand the material covered in class.",
    "It's a hard course, but the support is off the charts. I wouldn't change a thing.",
    "I learned a lot from this course, but it didn't always feel immediately applicable to real world problems that I can think of. Also it was hard to access books off campus, which sometimes made studying\/completing assignments difficult for me.",
    "Main weakness is that some concepts are not super clearly explained in lecture. I think the prof assumes we start off with a lot more familiarity than we do sometimes. He jumps right into stuff, which can be good but also hard to follow sometimes.",
    "The course is a must take at Yale, but it's also in need of change. PSETs are at times too long and tedious, and many times involve string parsing which isn't fundamentally challenging on an intellectual level, rather is merely tedious to do in a language like C. Lecture is not the best, and most of the concepts feel rather dry and niche.",
    "The biggest strength of this course was the problem sets. You will become a lot better at C as a result of this course. This course was also mostly interesting during lecture. Some of the material may be a littler dry, but Professor Eisenstat did his best to make you want to listen.",
    "Well organized, challenging, engaging",
    "This course is not well designed. There is a reason why only cs majors take the class and 50% of them drop the course past midway. The notes are never posted after the lecture and the problem sets are vaguely related to class material and do not invoke any creativity or problem solving as to get a good grade, they have to be done in a very specific way. Simply posting the notes after each lecture would improve the class so much.",
    "This class is just hell embodied in workload. Everything the past reviews said remains true. Be prepared for a semester of no sleep, lots of stress, and the feeling of pure unadulturated bliss once the semester finishes and you've made it through. Yale College has to do at least one of the following: make sure the workload reduces, make the course be worth 2 credits, or heavily invest in the improvement of Yale Mental Health. But also like, you learn so much from the professor. Stan is a legend, and that should be appreciated, removed from all the hardships of this class. Love his chalkboard teaching.",
    "The projects in this course were way too long and difficult to predict how much time they would take. I often found myself with 10+ hours left of work to complete with only a day or two left with the assignment because of hidden problems. Additionally, I put in over 100 hours programing in this course and received a grand total of 15 minutes of feedback on my code. ***This class needs more one-on-one style\/design evaluations of code***",
    "As the culmination of the computer science required track, this course is obviously intended to be very difficult. However, I did appreciate that at certain points the difficulty level was reduced a little bit.",
    "Strengths: The psets were very very challenging, but at the same time, I definitely became a better coder by taking this class. I had to force myself to start early and design\/outline my algorithm before even beginning to code. Thankfully, the CS department hired a lot of ULAs this semester, so at some office hours, there was no queue! At most, it was a very short queue. It was very easy for me to go to get help on the psets. Stan was also very responsive through email if you had any questions. Weaknesses: I would say that for 2 out of the 5 psets, I could not see how they related to what we were learning about in class. A few psets took me 30+ hours (thankfully not all 5 - this year the psets were slightly easier I believe). There are also no lecture notes at all, which was inconvenient. If you are unable to attend a lecture, you must get notes from someone else. In my opinion, the lectures were just okay. They were very well-organized, but for example, the class had a lot of trouble understanding the instructor's explanation of two's complement, even though this was one of the \"easier\" topics that most of us had learned in 201. The LZW and bash lectures were taught weeks before we started working on the LZW and bash psets, which I felt was a bit disjointed.",
    "The strengths of this course were the psets for the main part. They did a great job at nailing home the very theoretical concepts we learned in class in a very concrete manner. The weaknesses of this course were mainly the lectures, which were rather dry and dull, and the difficulty of the exams which were hard to prepare for. It felt like there was a distinction between problem sets and exams where they were totally independent of one another rather than complementing each other.",
    "323 really challenges you to be a better and more thorough programmer. However, it does require an extreme amount of time to do the problem sets and the class did make me miserable at times. Definitely take it with your friends if you can so you will have moral support. I believe that the problem sets could be shorter and we would still learn the same amount. For example, the LZW problem set probably did not need delay and pruning. Luckily this year we had a sufficient number of ULA's, and they were usually somewhat helpful, and Stan Eisenstat's office hours were extremely helpful. I believe that 323 would be better if we had powerpoint slides and\/or videotaped lectures instead of just a chalkboard-style lecture.",
    "Strengths: lots of theoretical content which is good if you like that kind of stuff, pset programming somewhat useful for exercising coding muscles for interviews, concurrency stuff also very useful for interviews. Weaknesses: Psets were only mildly related to lecture content - felt like we were just sent off to create something with very little guidance and a somewhat lengthy, ambiguous spec, a la Eisenstat.",
    "This course definitely did a great job of challenging students to the max. Students needed to put in a LOT of time for each pset, but that also meant that a lot was being learned during each pset, and the concepts covered by the psets were really cemented into my mind. However, the sheer amount of time it takes to do each pset could also be seen as a drawback of the course. I feel as though some 1 week psets sprinkled in with the two week ones might help the class.",
    "Strength is the depth of content but the weakness is the quick pace.",
    "It was hard",
    "Professor Eisenstat is a fantastic professor. His teaching of the content and organization of the course is especially well-done.",
    "notes could be posted online",
    "Strengths were that the psets really taught me a lot. Main weakness was the some lectures were hard to follow and made simple concepts seem more complicated than they really are.",
    "I found that the problem sets were very difficult and often had little to do with the topics that we were studying in class. They did teach me a lot, though.",
    "The first four Psets were basically just psets for parsing. They were interesting and cool, but at a certain point, you want to do more psets like abash and the like, ones that show you the nitty gritty of computer science and not just reading from a buffer. Stan the Man is actually awesome.",
    "strengths: Eisenstat knows what he's doing and has been teaching this for a long time. office hours are a good resource if there are ULAs that know the psets\/content that you have questions about. Stan is also pretty patient if you ask him questions, and is pretty understanding on psets if any problems come up (he will help debug your code if you ask!) weaknesses: this class (psets) may sometimes be unnecessarily hard. when you go to office hours and no ULAs know the pset, it can be pretty frustrating since you might be at office hours for a long time. further, there's a complete disconnect between the problem sets and the exams, and I feel that there should be overlap between the two. As a lecturer, Eisenstat is sometimes too smart, and I feel that while he's receptive to students asking questions in class, a lot of the time, his pacing and examples don't make sense to the average student, so a lot of time must be spent trying to understand his notes from lecture.",
    "This course took so much time. Beware. I spent at least 30 hours on every pset. But they are not very intellectually challenging just hard to debug at catch all the edge cases.",
    "Strengths: Professor Eisenstat is very responsive on the News Archive, which was a super valuable resource for the problem sets. I also really enjoyed all the problem sets -- they were very engaging and fun to complete. TA walkthroughs at office hours were also a very helpful resource. Weaknesses: Professor Eisenstat does not post lecture notes, so you need to know someone in the class if you miss a lecture, otherwise there's no way to get the lecture's content. He also wasn't the greatest at explaining things sometimes. Also the TAs weren't unreal at helping in office hours, but I understand how hard it is to jump into someone's code with problem sets that complex.",
    "This class is incrediby time-consuming and difficult, but I do feel like I learned a lot and came out of it a far better C programmer. In lectures, I wish Stan spent a little more time on the big picture concepts before jumping into the details of a topic. I also felt that 3\/5 of our problem sets consisted of annoying parsing which is prones to countless edge-cases and I don't feel like it was very instructive, especially after the 2nd or 3rd time.",
    "The course was very intensive and rigorous in terms of the Problem Sets. I appreciated that the material covered in class was also relevant to the problem sets. There were also adequate help from the Teaching Assistants. If there were any way that the course could be improved, I think a video recording of the course should be uploaded just in case any sessions are missed.",
    "Problem sets are difficult, but have taught me a lot about good programming practice and improved my work ethic",
    "Strengths: 70% homework. The class newsgroup. Ample ULA\/professor appointments. Exam review sessions are helpful. Neatly written class notes. Weaknesses: Each homework takes an inordinate amount of time, to the point that other classes suffer. Homework has little relation to lectures. Difficult exams.",
    "Stan's lectures are great. Some of the best in the CS department. The ULA ratio was also amazing this semester. You were almost never in line for office hours (if there was a line, it was mostly because of the LZW PSET), but apart from that there was always help at 17 HLH.",
    "Midterms were very difficult",
    "While I understand that Stan designed 323 to be a survey of a variety of topics in computer architecture & systems programming, it was difficult to follow all the different topics we covered; come exam time, basically the only resource we had available to us were our own notes, which often lacked sufficient detail because Stan moves through his lectures fast. The readings from the textbook don't fully overlap with the material covered in class, the pretty much unrelated psets basically comprise a credit and a half on their own, and the handouts don't stop all the gaps either. It would be tremendously helpful if some additional resource was provided to help fill those gaps from lecture. That said, this class was excellent and I learned a lot. The problem sets are brutal, but everyone knew that already."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "Only if you have to. Theres too much work involved to justify taking this class unless you absolutely must.",
    "No, but you need it to be a CS major, so why are you even reading the evaluations?",
    "YES. Honestly, if you are serious about becoming a good programmer, this class is a must-take; it's literally the rite of passage for a CS major. Professor Eisenstat is also super kind and helpful and will give super timely, concise, on-point answers to any questions you may have.",
    "Yes I would but only for CS majors. I recommend taking both 223 and 323 with Stan Eisenstat because it seems like that is the easiest transition into this class since you are already used to the style of 223 with him. This course will definitely challenge you, but if you start early on the psets it is doable. I think this is a class where it is extremely difficult but also extremely rewarding. The psets are cool, and I ended up talking a lot about them with non-CS people. I would recommend making sure you have the time for the psets, especially if you aren't a super fast worker. Take an easier class or two so that you have more time to dedicate to this one.",
    "If you do not need to take this class for your major, make sure you understand what you are getting yourself in for. If you do need to take this class for your major, be sure to go to office hours, especially the TA walkthroughs if they are still offered.",
    "I mean, not if youre not a CS major. But if youre doing it for the major, dont freak out: its REALLY not that bad; I think 223 was a lot worse and theres really so much support from Stan and from the TAs. Just start early, dont be afraid to ask for help, and trust that you can do it! The terror is really much worse than the course itself",
    "I was terrified of this class, having dropped it during shopping period of fall 2018. I didn't think I would be able to do it, but here I am on the other side, and I made it! It was fine! And I actually think it went really well! To be successful in this class, you need to have sufficient programming experience (which I gained from working in industry over the summer -- taking CPSC 223 with Professor Aspnes did not prepare me whatsoever) as well as excellent time management skills (and enough time to devote to the class). Many of the most vocal complainers in the class are people who don't start the work on time! Don't be intimidated by the hype. Yes, it's a lot of work, but it's doable. With the exception of LZW, I finished every problem set well ahead of the due date, and I'm not a programming god or anything (in fact, I consider myself rather slow when it comes to coding). That said, I spent many hours a day coding and tried to frontload the work so that I could get help at office hours before they got too busy right before the deadline. The ULAs are on the whole fantastic with the exception of a few, one of whom I found very condescending. (I won't name names, but it goes without saying that it was a man...) I found the tests pretty difficult but since each one was worth 15% of the grade each and I did well on the problem sets I didn't worry too much about them and just tried to aim for an average score. The lectures were fine but it was always a struggle to pay attention. The material is important to know, though, and Professor Eisenstat is generally very organized. Also, you need to go to lecture and pay attention since the tests are based on lecture and there is pretty little overlap between what we cover in class vs on the psets. (Honestly this kind of bothered me since in other classes, if you've put in the work for the class, you obviously still need to study but the exams should be fine. In this class though, I felt like acing the test was a matter of rote memorization of concepts that weren't part of the homework.) Overall a fine class, and if you're reading this review, chances are you have to take it regardless for the CS major. You can do it! Just start early, write pseudocode, read the spec multiple times, edge case, make friends in the class, and ask for help when you need it.",
    "Honestly yeah, it wasn't nearly as bad as people make it out to be - each pset may be work intensive depending on your comfort level but they're only due every few weeks (we only had 5 the whole semester) and the lectures are kind of interesting if you like to understand how things really work.",
    "Yes. This is definitely an essential course for anyone hoping to study Computer Science.",
    "Yes. It's a well-taught class, and I learned a lot from it.",
    "This is an amazing course. You have to do it, but the reward is amazing. It wasn't always easy, but if you space out the work well it's not too bad. You got this!",
    "Only if you're a masochist or in the CS major (or both.)",
    "It's a requirement for the CS major, so you have to take it. Otherwise you have to be really into systems programming to devote this time\/effort much to a class.",
    "Ya I liked it.",
    "Only if you're a CS major. Read a book if you want to learn about the stone age: don't go there yourself.",
    "If you are a CS major, you have to take it. If you are not a CS major, I would only recommend this course if you want it to consume your semester. Some of the problem sets are very difficult and will take you a long time.",
    "Of course",
    "No. Stay away. Not a good class.",
    "...God no. but if you're in CS, you gotta. So.. just do it and get it over with.",
    "Only if you are a computer science major... because you literally have to take it. Otherwise, stay away. For your own sanity",
    "If you don't have to take this course, don't take it. There are people who think they have to take this course and choose to change majors instead of actually taking it. The workload is about equal to two classes, but it is manageable if you are decent with C, very diligent, and don't let yourself procrastinate too much. And you will definitely become a much better programmer. Honestly, for me the worst part was not actually the assignments but rather the lectures and exams. I fell asleep almost every single lecture, and I don't think I've ever taken a class that is more boring. Professor Eisenstat's teaching style is such that you need a superficial understanding of a million different topics to resuscitate on the exams, but you won't walk out of this class with a thorough understanding of a single topic.",
    "If you take this course, then you must be majoring in CS. There is no reason to take such a challenging course with at least a few 30+ hour psets if you are not a CS major. The material is also a bit boring in my opinion. However, the topics you learn in this class are very useful for someone who will have a CS-related job in the future. You also become a much better programmer over the course of a semester. Since there are so many edge cases for each pset, you must think outside the box \/ brainstorm various edge cases with your friends and make sure that your code will not break under these different scenarios. This is exactly the kind of well-designed code that you will need to write in the future if you ever become a software engineer. Therefore, don't take this if you are not a CS major, but if you are, then this is a useful class, even if it is not the most exciting.",
    "CPSC323 is infamous for a reason. If you prepare ahead of time and let your life revolve around 323, you can manage it (think ~30 hour psets) and survive. However, there will be times where the workload will get brutal (debugging LZW in particular) and you'll question whether or not you'll get through. If you can though, you'll feel like you can survive everything else in the major. Thankfully, Stan's curve is rather generous, and as long as you're in the top half of the class, you'll be fine. I would only recommend this course to students in the major taking this course \"for fun\" is insane.",
    "I would recommend this course only to CS majors for whom it is required. This course is a rite of passage and it made me feel like a real CS major, but it was very difficult and I don't think it is worth the immense amount of time necessary if you aren't majoring in CS, EECS, etc.",
    "Rite of passage to take it and survive with Eisenstat - I definitely learned picked up some things from lecture and can talk a little bit more intelligently about systems architecture and programming, and it's required for CS, CS\/Math, CS\/Econ majors anyways so yea take it.",
    "This course is required for any CS major, but a non-CS major could still get a lot out of the class if they do have a solid background in C and complex problem solving.",
    "Don't spread the pain over multiple weeks. Start early and spend large chunks of days working on the pset for a single week at office hours. The time you put in with guidance is directly proportional to your grade on the psets",
    "I would recommend this course only to CS students who need to take it as a requirement. It's very challenging and might stress you out.",
    "Yes",
    "CPSC 323 with Professor Eisenstat is one of the most iconic courses in all of the CS major. Highly recommend taking the course with him as a professor. The problem sets take a lot of work but you really learn the material and get a lot out of the class (e.g. better programming skills).",
    "Only if they need it for a major",
    "yes, but know it is an incredibly demanding course where you will learn a lot",
    "I'm glad that it's a required course but I wouldn't recommend it to someone who wasn't required to take it.",
    "I would recommend this course to a Computer Science major during a relatively light semester- the huge workload means that its very hard to balance with another sizable class. I did learn a lot, however, and my coding\/debugging abilities generally improved a lot.",
    "It's a lot of time, but not necessarily difficult. At no point did I find myself grabbing my head thinking \"I can't do this\". I did, however, often find myself just grinding away, spending all of my free time either writing the code or fixing bugs. Edge cases take up hours. But, if you're willing to put in the work, it will be one of the most rewarding, interesting, and fun classes at Yale. If you can credit\/D it, it would probably be the perfect class to credit\/D, as long as you keep yourself honest and make sure to actually do the work.",
    "only if you really have to take it. like other students have said, this class take a LOT of time and commitment. you will spend generally ~20-30 hours on each (biweekly) pset. personally i didn't think I become that much of a better programmer from the assignments, but I can say that after this class, you will have a much better understanding of C programming.",
    "yes. while it was difficult it definietly made me confident to pursue computer science as a career.",
    "Yes, I really enjoyed 323. At the end of the day it's just another class -- everyone just likes to hype it up. You're given so much time for the problem sets, ranging from 2 to 4 weeks to complete each one, and each is very engaging and honestly a fun problem to solve. The earlier you start them, the better. The lecture content is entertaining enough to make it through the hour 15. But Professor Eisenstat doesn't post lecture notes and lecture content is 90% unrelated the problem sets, so you'll need to have a friend in class to catch up on content. Midterm and final were pretty fair and only covered content from lecture. I never looked at any of the readings Professor Eisenstat posted, as I found my lecture notes sufficient.",
    "I would only recommend this course to someone who has to take it for the CS major, otherwise you're insane.",
    "Yes, if you are intending on taking computer science, this is an essential course.",
    "Yes if you want to become a God at debugging",
    "Not unless it is required.",
    "Don't take this course unless you have to because the PSETs can range from 30-80hrs.",
    "You probably have to take it anyway, so instead of \"recommending\" the course I'll just provide a couple of tips: 1. Take it with friends\/people you know. Review thoroughly for the exams together, go through the pset specs together, come up with edge cases together. 2. Start the psets early, obviously, but by this I mean as soon as the spec comes out, just spend 30 minutes reading it. Identify everything you don't fully understand and ask the TA\/ULAs. If you're completely lost and unsure of how to even begin to approach the pset, that's okay; talk to other people about how they're thinking about the spec, go to the walkthroughs, ask Stan, re-read the spec. This is why it's important to at least read the pset early. No form of anxiety at Yale compares to the panic of reading the spec the weekend before the pset is due and having no idea where to begin; except maybe flipping through the midterm and only knowing how to do 1 out of 6 problems. 3. If you need them, TAKE THE PSET LATE DAYS. You lose 3 test cases per day, so if you think you can pass >3 test cases with the extra 24 hours, do it. 4. If you're really struggling, talk to Stan. He'll do everything he can to help you. 5. Don't panic if you're doing below average by\/after the midterm. Just learn from your pre-midterm mistakes and keep going. The curve is generous and you'll probably do a lot better if you change your strategy (start them early). Coding tips: 1. Seriously prioritize readability. This will make debugging much much easier. 2. Avoid nested if statements as much as possible. Avoid nested combinations of for\/while loops and if statements as much as possible. They make your code impossible to understand and even more impossible to debug. 3. Use functions to modularize your code, even when you don't necessarily need to reuse that piece of functionality. 4. Avoid passing a ton of parameters to functions. They make those functions extremely difficult to track and introduce subtle bugs into your code. If a function has >4 or >5 parameters, it's probably doing too much and you need to split it up into two different functions. 5. use code linters, learn gdb and valgrind really well There you go. Good luck"
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "323",
  "section": 1
 }
}