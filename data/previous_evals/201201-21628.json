{
 "crn_code": "21628",
 "season": "201201",
 "legacy_coursetable_course_id": 15075,
 "enrollment": {
  "enrolled": 16,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    3,
    8,
    1,
    0
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    1,
    2,
    3,
    4,
    2
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    11,
    1
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "While computer music is a fascinating field, I would avoid this class until it has been completely revamped with a new curriculum and a new professor.",
    "A great class. A chance to learn from a real visionary and passionate person. Worth it just to learn Haskell, if you're interested in music too it's a no brainer.",
    "First you start by learning Euterpea, a library written in Haskell for generating Computer Music. The first few problem sets are straight forward questions and proofs, and rather fun. Once you've got a handle on Euterpea, you begin to delve into signal functions - basically generating sound by manipulating actual waves. The language in order to do all this, however, is still in development, and can be problematic to deal with at times.Overall, I enjoyed it, and found it easier than other ComputerScience electives I've taken. The main flaws were trying to deal with the kinks that still exist in the language.",
    "A great way to learn functional programming and Haskell. The actual synthesis side is fairly light, but gives a lot of hands on experience with the basics.",
    "Take it if you're interested in computers and music. However, it is a rather nebulous course, and you won't come out of it able to code an industry-ready synthesizer. The course is more theoretical than that, which was exciting for me, and possibly you too.",
    "I would recommend it if you're looking to try your hand at functional programming and want a relatively easy CS elective.",
    "If you're looking for CS electives, this is a pretty good class for that. Compared to a core class like 323 or 365 this might seem to be a walk in the park since there's not nearly as much work, but often times it can get a bit confusing if you're caught behind on work. If you're more into music than computers like me, it's definitely much more programming than music, so beware. If you really liked 201, then you might find yourself enjoying this class more since Haskell is functional.",
    "This class both teaches you a lot about computer music and about programming languages in general, particularly Haskell. If you've never used a functional programming language (like Scheme) before, you may be in for a shock, but power through because it's worth it. Haskell is really, really cool. On the music side of things, this class focuses on sound signals and how to shape and alter the sounds of a single musical note (rather than an entire composition). But even if you're more interested in composition, you should take this class as thereare opportunities for that and it's simply one of the more creative and interesting CS classes out there at Yale. If the course title draws you in, take it take it take it.",
    "Haskell is confusing and horrible! Everything's a function. That sounds harmless at first, but that means that you can't keep a normal counter for anything. You can't say, let count=0, and then each time you encounter a newline, count++. You can't do that because if count is 0 at one point and 2 at another, then it's not a function. You can't just generate a rand int because that's not a function. You have to give it a seed as a parameter so that the rand int is a function of that seed. But then, if you want to run 10 trials of something, you have to make 10 random generators."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "432",
  "section": 1
 }
}