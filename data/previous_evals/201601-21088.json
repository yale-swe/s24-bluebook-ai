{
 "crn_code": "21088",
 "season": "201601",
 "legacy_coursetable_course_id": 36626,
 "enrollment": {
  "enrolled": 148,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC305",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    0,
    8,
    27,
    57
   ]
  },
  {
   "question_id": "YC306",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    3,
    14,
    35,
    40
   ]
  },
  {
   "question_id": "YC307",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    64,
    26
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC304",
   "question_text": "How would you summarize ECON 111 01 for a fellow student? Would you recommend ECON 111 01 to another student? Why or why not?",
   "comments": [
    "It makes you a better programmer, but I wouldn't highly recommend it unless you need it for your degree.",
    "As a required CS class, probably don't take it with Stan. He's a great guy but it's much harder than it needs to be with him.",
    "It will teach you most of the basic skills you need for software programming and tech interviews. Would recommend.",
    "A course that will challenge you unlike any you will take. As a Global Affairs major, my friends all thought I was super masochistic for taking something like this, but I truly believed that I gained so much out of this class that will impact my ability to think in the future. Yes, it will suck. Yes, it will be hard. Yes, you will be up science hill all the time at office hours looking for help. But at the end of it, you'll end up with a sense of satisfaction knowing that you survived 223 with Stan.",
    "223 teaches basic concept about data structures: how data could be stored efficiently using C programming language. The whole class is centered around sorting data. Regardless of your major, if you are going to use some form of computers, you have to take this class before you graduate. If you are worried about getting a bad grade (which is totally possible given how demanding the psets are), you should take it Credit\/D\/Fail. The exams are fair -- you will ace them if you take good notes during the lectures and do the review problems. I found the psets to be the hardest part of this class. They take ~18 hours each. Some people had to submit their psets a week later the actual deadline, so start early! Stan is a clear professor and the material is not necessarily complicated, if you stay on top of the readings and the lectures.",
    "It was a difficult class that does take considerable effort; you have to genuinely try in order to complete the pests. However, it was also very valuable for my CS knowledge, and thus I would recommend it.",
    "I would definitely recommend this to anyone who wants to become a better programmer. Don't take it if you already have a heavy schedule though.",
    "NON CS MAJOR, TOOK CLASS CR\/D: At a lot of points this semester, I was like, \"why am I spending far and away the most time\/effort on a non-major class that I'm taking credit\/d?\" Doing problem sets can definitely be a drag, especially if you wait until the second week to start. But my coding skills are SO MUCH HIGHER now than they were at the start of the semester. I'd say that, now it's over, I don't regret it, but I definitely regretted it basically the entire semester.",
    "I would definitely recommend the course if you want to gain experience with programming in C, and also a solid understanding of data structures. The first part of the course was a bit algorithms heavy this year, but the second half made it worth it. I would say though that it is a lot of work, so plan on this being one of your most work-intensive classes for the semester.",
    "Great class, I learned so much. This class is not for the weak, but it's definitely for those that want to grow and develop their skills quickly. I don't have to take 323 for my major, but I want to because 223 showed me that a class with Stan, while painful at times, is a guaranteed way to expand your knowledge and comfort with programming so so much. I'm actually excited for the fall. The homework assignments take a long time, but they're so masterfully planned out and challenging that they've made me feel so much more confident as a programmer and helped me feel prepared to code in the real world.",
    "Yes. I think anyone who wants to learn to code should take this class.",
    "This class is really difficult and time-consuming but really rewarding. If you have the time to put into it and want to get some excellent computer science education, I would absolutely recommend it. However, if this semester you are going to have limits on your time or brainpower or frustration tolerance, perhaps it is not the best choice.",
    "Amazing class. A lot of work but very rewarding.",
    "CS 223 is pretty good, although not for the faint of heart. The problem sets take an above average (although not unreasonable) amount of time; the tests are fair; the grading scheme is OK. In short: Lectures, 7\/10. A lot of printed material, but overall engaging even in a 75 minute slot. Coverage of Data Structures: 8\/10. We played with\/implemented heaps, queues, arrays, hashtables, and tries. Too much focus on varieties of trees in the last few lectures. Learning to program: 7\/10. Seven projects force students to write 800-2000 lines of C, and style grading forces those lines to be at least passably good. Algorithms: 4\/10. This is not an algorithms course and only covers very basic topics. We didn't implement quicksort, and certainly didn't implement anything more advnaced than that. Time efficiency: 6\/10. I am not sure there is a better intro\/intermediate programming course at Yale but I think the focus on figuring out edge cases on your own\/intensive search for 10% of the problem set cases dramatically diminishes the efficiency of the course. We could have done three or four more problem sets in the same amount of time if final test cases had been released.",
    "I would definitely recommend this course to anyone interested in CS! I'm not a CS major and I had never programmed before I took CS50 last semester, so the first assignment took me an embarrassingly long time. But I learned so much from doing the assignments throughout the year and I bonded with some awesome people at office hours, so the many hours (of suffering) were worth it! Try to take it with Stan if possible :)",
    "CS223 is notoriously difficult with Professor Eisenstat, but very worth it. I feel like a much better programmer after this class and I really understand data structures pretty thoroughly. While you might be frustrated with his psets come Thursday night, having such rigorous test cases is helpful and a great preparation for the real world. Professor Eisenstat's teaching can be a little confusing in class, but if you go to office hours or study with friends for the midterms, those are definitely doable. Make sure to start the psets early and go to office hours at the zoo annex to make friends\/enjoy the psets.",
    "CS223 is probably one of the most rewarding and difficult classes you will take in the CS major (besides 223). Having Stan is also wonderful because you will be way prepared for everything in 323! Don't take it if your other courses are going to be work-heavy.",
    "Incredibly difficult, if you want to learn how to code, take it",
    "223 with Stan is incredibly time consuming. Apparently it is comparable to 323, which I wish I had known going into the course. My advice is to start the problem sets super early and try to have all aspects of the specs addressed by the Sunday before it's due. Then you can spend the rest of the time debugging, and you'll at least have everything, even if it's not perfect. Also, make sure you leave time at the end to think of edge cases. As a fairly inexperienced programmer, I turned in my problem sets passing all of the public cases but would still fail quite a few of the private tests. I'm actually not really sure the best way to approach this problem (still was failing a lot at the end of the course) but be aware that pretty much everyone is going to pass all of the public cases, so this is where you must distinguish your solution from everyone else's. The tests aren't worth much and are pretty true to the practice exams-the best thing to do would be to come up with a bunch of practice questions similar to the ones on the practice exam. Idk this class is super hard but no matter what you are going to learn a lot, and that's really what's important. Go to Stan for help and advice even if he intimidates you. And don't be too hard on yourself if you're trying your hardest and still get below average on all of the problem sets. You'll be fine.",
    "Great class that's not too bad. Just start early and ask TAs for help",
    "Definitely take this class if you want an advanced CS class. It has a reputation for being the weed-out class, etc. but it honestly wasn't terrible. If you pay attention in lecture (which you really should go to because he doesn't post notes online) and put in enough work on problem sets (sometimes upwards of 15 hours per problem set; per two weeks), you'll do well. I really enjoyed this class both in terms of the CS as well as programming experience gained. Be aware that lectures are almost entirely theoretical\/abstract, while homeworks tie some of these concepts in (i.e. you need to implement the concepts discussed in class by yourself). Exams are almost entirely based on lecture.",
    "Problem sets (every two weeks) took me 20 hours each. The problem sets don't correlate to the lecture, unfortunately, so I spent lots of time at office hours. Find a good TA and go to office hours early. Stan doesn't really give you any guidance, so it's a pretty stark contrast from CPSC 201, which is probably one of my favorite classes at Yale. It can be frustrating at times, but I'd still recommend it. If you fall behind, you're screwed though.",
    "Good introduction to data structures and algorithms. Well taught.",
    "Learning curve is very steep, especially at the beginning. Go to office hours, start very early, check thoroughly for edge cases, start a study group early in the semester. You will learn a lot, but you will spend a lot of time on the class. Lecture is a bit slow and does not really teach the materials in the problem sets.",
    "AAA Great class. Take it. Spend the time working on the problem sets. You will learn a ton. Also, I 100% support the theoretical approach of Yale CS. Most other schools are just teaching applications, but I have found Dana and Stan's classes to be incredibly useful in my work in the tech world - shockingly even Racket helped me. They allow not rote memorization, but rather understanding what you are doing so you can apply principles wherever you need them. So, learn from the legend. take the course. good luck you will have fun.",
    "I highly recommend this class if you're interested in programming at all. I've definitely grown a lot as a programmer through this class, mostly through the PSets (which we get two weeks to do). I would recommend taking it with professor Eisenstat. Lectures are pretty chill, but PSets can be intense and time consuming (I've spent over 20 hours on some of them). Exams are fair and generously graded (in terms of partial credit).",
    "You can't take a class like this at Harvard.",
    "I would recommend this course, not so much because I enjoyed it, but because it's necessary foundation for other courses.",
    "A lot of work, but you learn how to program.",
    "High workload, high satisfaction. Make use of peer tutors at the Zoo annex for psets, and talk to Stan during Office Hours whenever you miss a concept he went through too quickly in class.",
    "If you plan to be a compsci major, take it",
    "This class is heavily focused on the problem sets. If you have a solid background in programming, you will be fine.",
    "One of the best courses I've taken at Yale. I took it cr\/d\/f second semester senior year so I didn't put the most effort into the class, but I still left feeling like I had learned so much. This class will teach you how to program and also how to think about problems in general. I highly recommend this course, even if you're not a CS major (like me) and just want to challenge yourself.",
    "[NON-CS MAJOR] I truly do not know why this class gets such good reviews, I think it's pretty average on the whole. Sure, you learn a lot of programming, but it's all on your own. Class is debilitatingly boring--the thing that's interesting is actually applying the concepts by yourself to the homework assignments. And yes, they take a long time, so don't be an idiot like I was and start them the week you get them. They get easier after the first 4 or so because you start to get the hang of things, and are doable on the whole, if hard. Don't give up hope. The best part of CS223 is the TAs: shout out to all of them for being absurdly smart and helpful. For all of you non-cs majors out there, I would suggest CR-D for this class unless you want to spend hours figuring out edge cases to account for. Don't worry about the doom-and-gloom posts that say you should learn C before taking this class! It's totally doable and relatively easy to pick up (Google is your best friend). Also, exams are for the most part largely reflective of what we do in class and the practice problems Stan gives us, so study hard and you'll be fine.",
    "A really good class. It's SO important to have good people to work with, and to start early on the psets. I watched the same people struggle thursday nights because they had started only a couple of days before. Lectures don't correlate with the psets, but the exams are based off the lectures (And also very closely off the review problems).",
    "Amazing class. Please, please, please take it if it's with Stan Eisenstat-- he's an incredible professor. As a non-CS major taking this for a letter grade, I thought it was challenging but accessible, and I learned more in this class than any other I've taken at Yale. Start the psets early! And again, take it with Stan-- if you have the time, meet with him one-on-one once or twice. Again, he's an amazing and really kind guy.",
    "Well it's required for CS majors so you guys have to take it, though I think unfortunately that Professor Eisenstat will not be teaching it in future years. For non-CS majors, even if you're interested in programming more than Computer Science, this is a good class to make you a better coder.",
    "223 is really difficult but doable and rewarding. You should be ready to put in a lot of time in this class, and a lot of time at office hours so account for office hours when you plan your schedule. Stan is a brilliant person and you will learn a lot from him. He is extremely helpful via email and when you go to his office hours so don't hesitate to reach out to him.",
    "This is the last iteration of the class that will be taught by Stan, so I can't speak of its value with another professor. While, it's very challenging and time consuming to do the psets, it's very gratifying when even just a small part of your code works.",
    "Take this is if you have sufficient coding experience and want to learn C + a few new data structures\/algorithms. If you have a lot of experience, you may be bored some of the time, but there is a lot of new content as well.",
    "I am not a computer science major, and was deciding between this and an easier computing class, and I am very happy with my decision. Unless you're fast at this sort of stuff, I'd expect to spend 9+-1 hours a week on the psets. First pset is relatively easy, but take it seriously! You will get destroyed on edge cases if you don't construct it carefully, it was my worst grade in cs 223. Make sure to have friends in the class and go to office hours. I like the nature of the exams. Be sure to read the newsgroup, tons of important info appears there are nowhere else. Start early on psets!",
    "223 will definitely teach you a lot of important information. Go to lecture and start the psets early and you'll be fine.",
    "If you want to become a better programmer and\/or you are seeking a nice challenge, take this class. The work is hard, it will take away a lot of your time, but there are several resources to help you along the way. You will be happy with your progress by the end of the class.",
    "I would certainly recommend this class, as it is required for CS majors. In the end I felt that it was rewarding and I developed as a programmer, and I think I have gained a solid understanding of some of the most important data structures in CS.",
    "I definitely would recommend this course. It is one of the most challenging I have ever taken, but it is because of the incredible amount of knowledge and experience I have gained.",
    "Only take this if you have to for your major. DO NOT take it for fun. It is too much work, not fun, and just overwhelming.",
    "This class is a lot of work, but the time and effort you put into psets is worth it because you learn a lot. I would recommend this class for anyone who is interesting in computer science because the things you learn in this class are relevant for any type of internship or job you could have later. The workload is heavy, but if you start the psets early, go to office hours and work with friends it is totally manageable and not stressful. The TAs are really helpful in helping you understand concepts and finding bugs.",
    "I absolutely recommend taking this course - the topics are extremely important to anyone who wants to learn computer science. It also taught me the language C and how to use a command line.",
    "Excellent course. Difficult for most students. You should take it even if you're not a CS major if you enjoy abstract thinking and puzzle-solving; and if you do not, you should take it anyways, to develop those skills (you may find it enjoyable eventually).",
    "100%, take it. Great course, great teacher, you'll learn a lot and feel like you have at the end. Take it.",
    "I'm sure the other reviews will talk about the course content, but I want to post a bit of a warning about Credit\/D\/Fail-ing the class. It's particularly hard since there is no partial credit for assignments. Either your code works, and you'll get most if not all of the points, or it doesn't and you'll get none. There really isn't a partially working category. I ended up spending more time on this class than any of my other classes. Also, everything builds on itself, so if you don't put a ton of effort into the first psets, it'll bite you later on. Tough, enjoyable, at least I didn't have to stress about midterms....",
    "It's a good amount of work, but it's very worthwhile.",
    "A great computer science class that teaches you a lot about data structures and programming in general. C is an annoying language to be sure, but you do learn to think a lot about memory management as a result of using it. The problem sets are challenging, and most of the points you lose will probably be from edge cases in the specification, such as weird command line arguments. But, they are very doable and you get two weeks to do them -- start on the first week if at all possible. The tests were actually fairly challenging, since they involve coming up with your own algorithms to do things, but they arent that unreasonable so you should be fine as long as you study.",
    "A difficult and rewarding class that serves largely (with Stan) as your first real crash course in what the computer science major is like. You'll learn a lot of interesting content, be frustrated by trying to pass tests, and have to develop stronger time management skills.",
    "Only take it if you plan on majoring in computer science, only the psets really help you learn about the data structures and algorithms.",
    "CS 233 was a great class; I'd strongly recommend taking it with Stan. The problem sets *will* make you a better coder--I've known C for nine years and I still learned\/improved a ton from the class. The material taught in class was often only tangentially related to the psets, and I would have preferred Stan actually show us how to code algorithms\/data structures rather than just writing them out in pseudocode on the blackboard.",
    "I would definitely recommend all students with an interest in QR to take the class, regardless of whether they plan to major in CS or not. Knowledge of data structures earned from this class is very practical. The class also forces you to think, logically, which I believe is a very important skill.",
    "Stan is leaving. Most course-specific comments here are probably irrelevant for future. Learn C and coding beforehand with the class website: https:\/\/zoo.cs.yale.edu\/classes\/cs223\/ Get started with any text editor (e.g., download Sublime Text 3). You'll have some time to switch to vim or emacs or such. Ask someone in the Zoo to show by hand how to compile something simple. The class webpage is overwhelming, so here are two highlights: READ KERNIGHAN AND RICHIE Brian W. Kernighan and Dennis M. Ritchie, The C Programming Language, it's cheap on abebooks.com. It is so well written that English majors should read it (I'm a half-major there).. Steve Summit's Notes on C Programming\" To accompany the above.",
    "Super course. It is very difficult, but that is why you learn so much. There is no other way to survive it.",
    "223 can be difficult, depending on your skill-set entering the class. For me, it was by far the most difficult class I've taken at Yale, but that experience varies. If you want to be a CS major, you have no choice, but to take the course, but make sure not to fall behind. It's difficult to catch up. The final was much easier than the midterm, if that's any consolidation.",
    "Very intense course. Take it if you are a CS major or is very interested to learn more about CS. Make sure you know basic programming course because you do not learn basic programming in the course. Don't expect the professor to teach you how for loop works.",
    "Be prepared to start early on the psets, and make use of the help sections if you get stuck. It's a fairly time intensive class, but if you stay on top of things it shouldn't be overwhelming.",
    "Very few non-majors will take this class, and it is required for all majors, so an evaluation probably won't change your mind. However, I can tell you what to expect: The coding homework assignments for the class, all in C99, are completely disconnected from the lectures and exams. They are meant to be puzzles, similar to problems in CPSC 201 or any other previous core computer science class. They can be of somewhat intimidating scale, however. The biggest thing to keep in mind during the homeworks is to break the assignment into approachable chunks, and attack (and debug!) your program piece-by-piece. The exams follow closely the content of the lectures. Pay attention in lectures and attend the review sessions, and all the problem types on the exams should be familiar to you. The class also puts unusually little weight on the exams -- a nice feature that serves to value effort more than immediate understanding.",
    "You have to take this most likely. Taking it with Stan is both good and bad. He's probably the toughest professor but you'll also feel ready for 323. It'll be a tough class that can take you over 40 hours to do a problem set (problem sets are every other week). It's just like all the other classes in the department."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "223",
  "section": 1
 }
}