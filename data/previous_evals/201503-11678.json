{
 "crn_code": "11678",
 "season": "201503",
 "legacy_coursetable_course_id": 34102,
 "enrollment": {
  "enrolled": 102,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC305",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    1,
    0,
    4,
    12,
    49
   ]
  },
  {
   "question_id": "YC306",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    3,
    18,
    18,
    27
   ]
  },
  {
   "question_id": "YC307",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    57,
    7
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC304",
   "question_text": "How would you summarize ECON 111 01 for a fellow student? Would you recommend ECON 111 01 to another student? Why or why not?",
   "comments": [
    "As hard as advertised, and not because you're learning more than in easier classes. It will make you more wary of programming practices which is good, but it doesn't teach you any more core content than an easier course.",
    "It is the best class you will take in your career as a comp sci major, though you should probably take it if you want to do anything tech after college.",
    "Its reputation speaks for itself.",
    "All around, this class is the hardest class in the CS department. But if you are even interested in taking this class you already have heard the stories. The problem sets, while difficult, are also enjoyable. I would say that if you are taking this class don't take 5 classes as this class can take up a lot of your life. All in all, this class is incredibly interesting and you definitely learn a lot but it is a difficult course. Once you make it past though, you know you're a CS major.",
    "Good for your brain.",
    "CS323 is notorious. The workload is large but manageable if you start early. You'll really become a better programmer and learn a lot. Make sure you give yourself a decent amount of time after passing all the public test cases to work on edge cases.",
    "Worth taking to increase understanding of basics of how various parts of the computer work.",
    "Absolutely would recommend to any student interested in computer programming. Definitely not as time-consuming as people make it out to be if you don't procrastinate on your assignments. I came into this class with very little exposure to C, but my C has definitely improved a lot after this course. Problem sets are reasonable and the professor is very fair about making sure his assignments don't take too much time. The lectures, however, can be hard to follow, so be sure to stay alert during lecture and take good notes (if you copy down what the professor writes on the board verbatim, you will likely not understand your notes when studying for exams).",
    "I learned a lot in 323, and I felt that my prowess as a coder improved dramatically. Eisenstat is a competent instructor and an engaging lecturer. Be sure to show up to class as he does not post online lecture notes. However, he can sometimes be impatient with students.",
    "This class is way over-hyped. It is not too difficult and after the first assignment did not take very much time either. Good class to learn something about systems and the p sets were interesting at times.",
    "This course is a lot of work. Definitely was the most time-consuming course I've taken at Yale. My assignments took me on average 25-35 hours per C pset (One every two weeks. Four total across the semester). That being said, this class teaches you a lot about building and designing good code. You have to edge-case very well to do well on the assignments. That makes it so that you become very meticulous with what your code is doing. I feel like the psets are challenging, but rewarding. The thing is though, that the lecture notes and the homeworks are pretty disjoint, especially for the first half of the course. The second half has some overlap with the lectures when you implement a shell and the lzw algorithm, but there is a fair amount of content that does not get used at all in the homeworks. What that means for you as a student, is that this class can feel like two classes, since the homeworks are pretty disjoint from the lecture (and are very time consuming). Just be wary of that when choosing it. Otherwise, it's pretty solid. Another thing, the Hennessy textbook is pretty bad for this course since it's so poorly worded, so you'll spend a lot of time looking stuff up online. The other textbook is just fine. Just something to consider.",
    "I entered 323 a boy and emerged a boy who had taken 323. Not for the faint of heart. Take this only if your love of coding exceeds your love of friends and family. In all seriousness, psets really stretch you and make you a better coder. Start early. Never give up. You will be able to live and breath C by the time the course is over. Lectures are unrelated to psets so if you are lost, seek help from the TA's.",
    "A very fun course. You create useful utilities like a compression program and a terminal shell. Lectures are entertaining. Allocate 10 hours per week for the problem sets. One of my easier and more enjoyable classes this semester.",
    "323 definitely lived up to its reputation. It was very difficult and the problem sets took longer than my homework for any other class I've taken at college. However, the material covered is really interesting and very important even though the problem sets took unreasonably long, I actually enjoyed working on them. Stan is a really accessible professor and has tons of office hours, which is very helpful.",
    "CPSC 323 was a great class. Eisenstat is an amazing lecturer, and the psets are certainly challenging but also pretty fun to do. If you are still considering whether or not to be a CS major, definitely try it out, but be prepared to Cr\/D or drop it and have a back-up plan just in case, since it is quite difficult at times and definitely not for everyone. Yes, this class is a lot of work\/time, but in general, after the initial understanding hump, the assignments arent too difficult to code.",
    "Start early. START EARLY. YOU HAVE BEEN WARNED. Great class though",
    "Absolutely the most challenging but rewarding class I've taken at Yale. Expect to spend a lot of time (20-30 hours at least) on each problem set. This class required a lot of time and energy but ultimately, I learned a lot and am glad I took it.",
    "This is it. This is the core of the Computer Science major at Yale. Prof. Eisenstat will teach you what you need to know. Everything you need will be fairly easily accessible. This is a difficult class--producing several somewhat-elegant, fairly fault-tolerant C applications that must perform under time and space constraints is not easy. It is, however, as valuable an exercise in C and systems programming as I can imagine. This course will make you a better programmer. Really. Take this course if you're in Computer Science or if you have a different major but want to seriously incorporate programming into your career path. Don't take this course for your distributional requirements. If and when you take 323, it will likely be the focus of your semester. Don't count on being one of the four or five people who finish a given assignment in ten hours. Take 323 alongside a light course load if you can. Make sure you have availability in your schedule to go to the peer tutors' hours. And make sure you remember what you already know about C at the beginning of the course.",
    "It's 323, but it's actually a lot of fun and really manageable if you start on time.",
    "Homework assignments take a long time, like everyone else will probably tell you, but start early enough and plan ahead and it probably won't be so bad - I ended up submitting pretty much every assignment one day late, but that was partly because I started late (had an otherwise heavy courseload). Usually once you figure out a key programming motif in the assignment, things get a lot easier and you can keep moving on fairly quickly. Also, don't expect the lecture content to correlate very well with the assignments. Lectures tend to be more about computer architecture (addition modulo 2, adders, CPU components, memory hierarchy), whereas the assignments are very much more just about C and UNIX programming. Many topics are also covered under some EENG courses (201 for adders and CPU architecture & 202 for LZW, Huffman, and Hamming codes), so having taken those classes will make this class easier (but potentially also more boring).",
    "Fantastic course with engaging problem sets, interesting material, and a great professor. A gem in the computer science curriculum that will teach you to be a better programmer and computer scientist.",
    "It's a lot of work. A lot of people drop the class. Get working on psets early and you won't have to be one of them. Let's be honest--you're probably taking this course because you're considering majoring in CS. Don't let a couple of time-management mistakes be the reason why you drop a required class and \"choose\" not to major in a subject. If you're just taking it for fun, then good luck :).",
    "You probably have to take this class, and you have probably heard horror stories. Many of these stories are true and unexaggerated. But don't worry, 323 is completely doable if you put in the time. Stan is amazing and much more approachable than he may initially seem. He really cares about helping his students learn. He expects a lot but is very very fair. The problem sets are tough but not killer. LZW is actually fun once it starts working. You will make such good friends through your study groups. All you have to do to get through is: 1) Start early. At least read the spec and start thinking about it right away, even if you wait to code. 2) Have a good group and\/or go to office hours. 3) If you're stuck, take a break and come back. Everyone says it but its completely true. 4) If you're really stuck, go see Stan. He is a miracle worker. 5) Don't panic (too much) Happy 323ing!",
    "The only thing I have to add to the large amount people know about the class already is that if you didn't take 223 from Eisenstat, prepare to experience a huge jump in difficulty.",
    "Actually as hard as its reputation. I learned an incredible amount struggling through the problem sets and cramming for exams, but I learned next to nothing from the actual lectures in class",
    "Exactly what you've heard already as start the problem sets early. The exams can save your grade. Good luck.",
    "'Oh, this course. I'm a physics major, wanted to take 323 to learn about how computers work and how to program system software. But I took Physics 420 and Physics 441 at the same time as this course. Bad idea. Really bad idea. Don't do that. I pretty much had no time for anything besides psets, and didn't quite finish a bunch of them. For your own sanity please do not repeat my mistake. But 323 was excellent. Eisenstat is harsh and precise, but underneath that he actually does care about students. He puts a lot of time into the course: he personally holds review sessions for the (noncumulative) tests; he answers every student question, from a 100+ student class, on his own homebaked version of Piazza; and he writes new problem sets and pset solutions every year. He has also been teaching the course since the 1970s, and updates it every year. He has witnessed the rise of the personal computer and later the rise of the Internet; it was awesome to hear bits of the history he lived through during lectures. More about lectures. They are essential if you want to do well on the tests. The problem sets and lectures are usually focused on separate material: computer architecture is explored in the lectures while problem sets focus on implementing system utilities. The tests are almost only on material from lectures. Problem sets. As Eisenstat observed during one of the ritual post-pset debriefings, there is almost no correlation between time spent on assignments and grade on that assignment. Some people spent more than 50 hours on every assignment, and performed poorly. There was one coding wizard in our class who typically spent less than 10 hours on each assignment and managed to pass all of Eisenstat's rigorous private test cases. Prior experience with system coding is what really determines how long these assignments take. Anyway, you will learn a lot in this course, but it does take a lot of time. For the typical student, to do well, you need to: work early and often on the assignments; work in groups to understand the specification, preferably before coding even begins, and frequently as code is developed; and go to peer tutors to ask about the assignments. If you're reading this, you will probably end up taking this course, either because you need to or because the legend of Eisenstat's 323 is too mythic to resist. Good luck.",
    "Definitely as hard and time-consuming as the reputation of the course implies -- I would suggest taking it with a lighter, probably four-course schedule. That being said, the psets will definitely make you a better C-programmer, if you take the time to understand them, debug them, and test edge cases. For me, the hardest part about this course was the quick pace expected of us, and the strict late policy on the psets. I would suggest seeking out help when you need it (many a time it can be a bit nerve-wrecking, but from personal experience and the experience of friends, Professor Eisenstat is quite helpful during office hours). Good luck!",
    "I was one five or so of the slowest programmers in CS 323. I didn't learn how to code until freshman year. I'm not that STEM-y. I survived this, so DON'T BE SCARED. If you care about CS, and you want CS for leverage to take on huge problems that matter, don't back down now. Decide if this REALLY matters to you: if it does, clear your schedule and get 'er done. No lie, this course was an astounding, and often crushing, amount of work. I found the material interesting, but our assignments were so aggressive that they sometimes made me find much less pleasure in what we learned. Still, I became a much better programmer and feel invincible now to any coding challenge. If you really care about CS and want to go all out on this, don't hesitate just because of the workload. It's very doable, just requires discipline and planning with basically three other guts.",
    "Probably the hardest course I've ever taken at Yale. You will become a better programmer, but if you have a heavy courseload, it will be overwhelming. Stan's a good professor, but the lectures can be intense as he tends to gloss over hard concepts\/doesn't explain it to the point where you don't need to self-teach. It's very much sink-or-swim, and the specs can take many hours to even understand in the first place; there's an art to understanding what he's asking of you in the first place. That's probably the hardest thing at first, especially if you've taken 223 with Aspnes.",
    "Awesome course. The things that other people have said about Stan teaching this course are true (great experience!). However, here is some insight on grades and how hard this class is: I'm not a genius at Yale. I wasn't born writing good code. I'm a terrible test-taker (my midterm grade was in the bottom 5%). I only seriously started taking CS courses 1 year ago. It's so strange to see some of my classmates (many of whom are legitimately smart at math and CS) complete these problem sets in 1\/3 the time they took me (and even scoring better on the private tests). But you don't need to worry about it. As long as you put in the time to do all of the problems sets (especially if you can finish them on time--this is key), you probably won't get a C as your final grade. I did manage to complete all of the psets (many of them NOT on time), and my grade was not a C. It also wasn't an A. Anyway, if you're like me: bad at Math, bad at tests, a mediocre programmer, but love to solve puzzles and work on hard assignments for MANY hours, you'll survive this course. PROTIP: Start these assignments EARLY! It suck so much to be working on them past the deadline. It destroys your life because you feel compelled to work 10 hours a day, but your productivity really plummets. There were times where I wasn't passing public tests 30 hours in, and I wanted to give up. But an additional 10 hours started to yield results, even though it had seemed so daunting just hours earlier. Do yourself a favor and try to get these in on time. In any case, seriously, it'll be ok. The grading is fair and Stan is extremely compassionate and also dedicated to this class.",
    "Great class; 323 was actually much less work than I thought it would be. You've undoubtedly heard a lot of horror stories, and it's true that the workload is high, but it's much closer to 10-30 per problem set than anything that's way too ridiculous (you'll be asked to log each hour of work you do). This means that putting in 10 hours of work per week should do nicely--but of course that means that you really do need to start early. The reason why people have so much trouble with this class and struggle with assignments is that they're starting the problem set during the week that it's due. I pretty much devoted an entire weekend to doing each problem set, and then thought of edge cases over the following week. LZW really isn't that bad. He gives you most of the code for it beforehand. I suggest that you make test scripts for each problem set. Whenever you think of a test case, write a bash script that tests for it, using a similar format to Stan's public test scripts. This is the way to score well on the problem sets. The problem sets themselves are really cool (things like coding gzip, tar, LaTeX, and the Bash shell). The tests aren't much like the homework, but if you do well on the problem sets, your scores on the exams won't really matter. The tests are very theory driven and are actually fairly tricky, but the questions are fair. Score around the median, and you'll be solid. Getting an A in this class is very doable.",
    "The course moved really slowly. The projects were kind of fun, but mostly tedious and time consuming since they are (mostly) written in C and annoying to debug. Would not recommend for non CS majors, since the only reason I see to take this is as a major requirement.",
    "CS 323 is a great class, and it deserves the hype it gets, I think. Like most high-workload classes, if you distribute the workload without saving tons of work until the last minute, it's not that bad. It'll be frustrating at times, both because of the vague homework descriptions and the outdated nature of the teaching style. Stan just uses a chalkboard and expects you to go to class, so make sure you got to every class and take at least decent notes.",
    "323 is really a great course. You learn a ton and become a better programmer. It isn't as much work as people say it is, even if it is definitely a 5 in terms of workload. The lectures are pretty dense and are the entire focus of the exams. That being said you learn the most from the psets. Find people to work with; it's key to this course.",
    "The ultimate computer science class at Yale. By far my favorite class so far, and the only one that rivals classes at big tech schools. By the time you finish this class, you are a computer scientist, and you will be married to C. Take it.",
    "Take it, it builds character",
    "This class is so legendary there probably isn't much more I can say about it that hasn't been said. It's amazing, it's hard, you learn so much, and you become a waaaay better programmer. My main bit of advice would be to go to office hours with Stan! He's great and really helpful.",
    "DO NOT DESPAIR! Yeah, you will have a lot of late nights, you won't be going out as much this semester, at time the problem sets will seem impossible and you will begin to seriously consider changing majors with the fear of flunking out of this one - but don't give up! Seriously, it's terrible, but it's also pretty great. You will bond with your fellow 323ers (just look at the bond between those wonderful Women of 323), and you will come out feeling accomplished and more confident in your ability to program. You will make it. And hey, I don't think Stan gave any C's this year (all hail), so it won't even tank your grade. Stan is also very aware of everyone's struggle and he REALLY understands that it is indeed a struggle for most. Which is why he ended up dropping the last pset and making all the other ones easier. So don't worry - he won't kill you or anything.",
    "First of all, the lectures for this class are in sort of a weird spot---many topics (e.g. pipelining, concurrency, computer architecture) are presented in just enough gritty detail to make the material feel very dry, but not enough detail to make the information you're learning feel at all useful from a practical standpoint. So either a more abstract or less abstract presentation of a lot of this stuff would be better. On the other hand, as everyone knows, 323 is really all about the assignments, which are not as big of a deal as everyone pretends. If you start early and actually put in the effort to get into good coding habits (even if it means sacrificing more time at first), these can be great fun and teach you a lot.",
    "The most work-intensive course I've ever taken; problem sets took me on average 30 hours each (thankfully, they're due only every 2 weeks instead of every week). Really interesting concepts, though, and it's exciting to be able to say that I've coded a bash shell.",
    "Things I wish I had known (on top of all Stan's advice): (1) The first assignment is real. I thought it was a warm up and ended up turning it in late. Don't trust the \"200 lines of code\" thing; Stan has a huge advantage over you, and you will probably use significantly more lines (2) Break assignments down and do the little chunks you know you'll need no matter what first. The design of your program will probably change as you understand the assignment better, but things like arg parsing are easy to get out of the way. (3) Use version control. Git is super easy when you don't need any fancy features, and if you commit every time you get a feature working you can always rollback if something explodes. Dropbox might work too. (4) Stan is serious about those 1 line error messages. Producing errors in the right places is sometimes non-trivial, and occasionally provides hints about Stan's implementation.",
    "A warning: This class will take over your semester (and possibly your life). You have probably heard of 323 before, and all the stories are true. The psets are incredibly hard and you will become a better programmer. This class was more work than all my other classes combined (no guts there). When you finish LZW you will feel like you've climbed Mt. Everest. For most of the rest of the course you will probably feel like shit. Jokes apart, plan your other classes a little to accommodate 323 and start the psets early and you will be fine (and watch out for the private cases). Good luck!",
    "The class is hellish when youre in it - it's a marathon and you just need to keep pushing yourself to finish. Psets will take 30 - 40 hours every 10 days. Go to Stan's office hours, much more useful than the student TA hours. You'll come of the class extremely thankful for the experience :)",
    "Absolute gut. I am utterly ashamed at Yale for allowing such an easy class to even exist in its premises. No words can even begin to describe how trivial the workload was. I heard most of the kids in the class just partied all the time they were so bored. This is probably the only class Bush got an A in. Forget Structures of Networks, forget Porn and Morn, or Stars and Galaxies, this is the absolute gut of the century. If you dont take this as your 7th class, then at least take it as your 8th.",
    "CPSC 323 is an intimidating class -- expect to spend 20-25 hours (or more) on each bi-weekly problem set. The exams are hard and the material can be challenging at times. That being said, it is one of the best courses I have taken at Yale. CPSC 323 has two main pieces: in lecture, you learn about computer architecture, while the problem sets teach you systems programming. On the whole, the lectures were well informative and well laid-out. At times, I felt he moved too fast, but that might just have been me. His presentation style was well-organized: he used the blackboards to draw out and detail exactly what he was trying to convey. For me, the problem sets were the highlight of this class. That's where I learned the most: By working on such large assignments, I learned how to be a better programmer. Unlike some other CS classes I've taken, the specifications were clear. There was no doubt what you were supposed to do. By providing us with a working example of his solution, he made the assignments even clearer -- I wish more professors did this! I've learned alot from this course and it is a class I cared alot about. Since the course is so perfectly laid out by years of Stan's work, I felt compelled to give it my all. I learned how to not only write good code, but to test, modify and refactor it.",
    "Great class on very low-level computing. Majors have to take it, of course. I would caution non-majors to consider it very carefully before taking this class.",
    "There's not much I can say that hasn't been said. I LOVED the class. That said, it was a ton of work. Averaged out throughout the semester, it probably was about 15 hours a week. However, this number is skewed, since I usually spent significantly more time on problem sets closer to when they were due. However long the problem sets were, I did really enjoy doing them. The material for the class is very interesting. If you are a non-CS major willing to step into the massive workload for the course, I would definitely recommend this class.",
    "Take it if you're majoring in CS. Otherwise, I recommend finding other ways to learn from the course (auditing, doing some of the assignments, etc.) as your alternative."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "323",
  "section": 1
 }
}