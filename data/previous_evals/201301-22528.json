{
 "crn_code": "22528",
 "season": "201301",
 "legacy_coursetable_course_id": 20856,
 "enrollment": {
  "enrolled": 127,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    1,
    0,
    1,
    26,
    64
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    5,
    22,
    41,
    24
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    72,
    18
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "Six coding assignments averaging 15 hours apiece, two non-coding psets which take about 7 hours apiece, two non-cumulative exams.Great class for compsci majors or other people interested in coding. It's a hefty class though- take a lighter schedule otherwise or you'll be sad.",
    "Eisenstat is a wizard. He guessed this kid's netID once. Also, you do end up learning C by the end, but it might be a painful process.",
    "This class was so much work but totally worth it. This is the probably the course that will decide whether you want to be a Computer Science major or not.Stan is secretly a nice guy. Sign up for his office hours. They're actually helpful!",
    "This is a great class and definitely a notch in your programming belt. It's not easy -- several long homework assignments will put your understanding and skills to the test, but you'll come out having learned a lot. Prof. Eisenstat is really good.",
    "I learned quite a lot but it's a really tough class. The pace of the class is very fast (too fast?) and Stan talks about the CORE ideas far too little and focuses on random analysis and recurrence stuff (granted, it's his research interest) too much. His explanations during lecture are kind of non intuitive and go by really fast in a blur of symbols (and you forget what they mean). He explains things a much more clearly if you go after class and ask him, but that makes one wonder why he doesn't just explain them that way during class!!! The course seems to inherently disadvantage students who are less good at 'computational thinking' and coming up with algorithms\/seeing solutions to algorithms, and students who have had little training in that kind of thing before. There is a difference between knowing how to program (112, 201) and knowing how to actually come up with clever, efficient ways to solve a problem, and it sucks if you're one of the stupid ones who doesn't really know how to do that. (points at self) But if you can program, you can still do the psets, but you will just suck at all the non programming work and the exams. START YOUR PSETS EARLY AND GET HELP, I AM NOT JOKING HERE. You will come out of this knowing how to program in C and feel like a badass for knowing what a Makefile is (even if you are not really sure what all the individual parts of it are). You will also develop a healthy fear of CS323 and\/or decide to drop CS entirely.",
    "This course is actually not very interesting at all. It is a good introduction to the C programming language, I suppose but in terms of what you actually learn, this course provides no revelations. Of course, if you want to be a computer science major, you don't have much choice in the matter, you have to take it.",
    "I'm sure you've heard that CPSC 223 with Eisenstat is a rough experience, and it's no myth. The programs he makes you write require a lot of thought, and it's really unlikely that you'll Google your way through like in other CS classes. It's impossible to know whether your program will earn full credit because the assignment evaluation is based on the number of tests it passes, and only 1\/3 of the tests are provided before submitting the assignment (this is to encourage you to make up your own test cases). There are also two non-programming assignments where you will come up with algorithms for certain problems, which will feel a little strange for a CS class but are much more relaxed than the programming tasks.My biggest complaint about the course is that the solutions to the assignments are only provided in class, and then never posted online. Presumably this is to avoid code copying over different generations since the assignments don't change too much from year to year, but you really don't learn from your mistakes by looking at his code for 2 minutes in class. For example, I am still not sure why my program was almost twice as long (code-wise) as his in the first assignment, even after finishing the semester.Overall, expect to work hard and spend several late nights pulling at your hair while staring at a screen, but you will sharpen your CS skills considerably. If you really like programming\/debugging, you will love this course. This is one of the few classesI've taken here for fun and it's by far one of my favorites.",
    "Interesting class, but if you're not a CS major, you shouldn't take this class or take it Credit D\/Fail -- very challenging and time intensive compared to other Yale classes",
    "You will laugh. You will cry. You will sweat. You will bleed. If you are a cs god (top 10% of the class) , get ready for a gut. If you are not, have fun ;) But rlly tho, this is a good class and you will learn a lot, but get ready to spend a good amount of time on it.",
    "Very heavy workload (psets can take upward of 20hrs), but you learn a lot",
    "Yes take the course. You will improve your C skills and will learn a great deal about data structures. Furthermore, the problem sets are very interesting and lots of fun, even if they can be painful.",
    "Yes. Semi-rigorous C programming. Intro level data structure and some algorithms.",
    "This is a very difficult and time consuming class if you're just coming from 201 with no outside of college computer science background. A lot of people in the class know much more so it's a bit tough to keep up. However, if you do start the problem sets when they're assigned and leave yourself plenty of time to work on them, it's doable. I learned this after turning in two problem sets late because I started only a couple days before they were due, but if you can space your work out (and don't be afraid to ask questions, either by emailing Stan or other people in the class, usually at least someone knows what they're doing) it's okay. You'll learn a lot too.",
    "If you're taking it, you probably have no choice. (If you do have a choice, it's probably not the best course to take: the material is not that fascinating in and of itself, and the course is mostly valuable for the sheer amount of practice you get writing C programs and implementing data structures. You practice enough to really have the structures and coding practices pretty deeply ingrained. But this is useless if you're not planning on doing a lot more CS.)For those who do take it, a HUGE PIECE OF ADVICE that will make the class MUCH, MUCH more manageable:Over winter break, please, please do yourself a favor and *read the first six chapters of \"The C Programming Language\" (K&R)*. And do the exercises (or at least be sure you could do them). If not the first six at least the first five. The chapters are short, so this is totally doable if you set aside a little bit of time.The thing is, those six chapters are assigned as reading in the first few weeks of the course, but the material covered in class has nothing to do with them. You really are expected to read it on your own and that's crazy difficult when you're juggling a ton of classes for shopping period. The material in the book, every sentence of it, is helpful for doing the programming assignments. I think what usually ends up happening is that students don't do the reading, get the first programming assignment, and try to piece together the parts of the reading that will let them complete the assignment. This takes so, so much longer than actually reading the chapters and internalizing the stuff in them. You CAN hack your way to solutions, but they will not be as good, and they will take you way longer. If you actually read and understand the book over winter break, you will probably be prepared to do the programming assignments in 3-7 hrs. At least that was my experience.",
    "In short, CS223 is a crash course for basic programming in the real world. Compared with 201, the problem sets were more complex and time consuming; however, they were also more applicable to the real world (implementing Merge sort, spell checker, etc.) and provided valuable experience programming in C. I would recommend this course to another CS major or to a computer enthusiast. The programming assignments take on average 20 hours (I normally took much longer) and come at an average of 2 per week. The course will definitely solidify your understanding of programming and sorting\/ data structures; however, be prepared to pour in consistent time and firm dedication.",
    "Psets are a lot of work if you're not experienced in programming (CPSC 201 doesn't count as experience) -- expect 15 hours on a pset at minimum. Some of the test cases are really obscure and out there, so a lot of the programming pset involves trying to guess what kinds of weird, fringe cases he might test your code on. The non-programming portion of the course, however, is much more reasonable and manageable.",
    "Highly reccommend. The class is pretty difficult, both the programming assignments and the exams. The average completion times for the homeworks was somewhere around 10-15 hours and the average grade was rarely high. However, Eisenstat is an incredible teacher and I feel like Ive learned more in this class than my other classes combined.",
    "Amazing class. You will work your ass off, but it's SO worth it. I feel like I may have learned more out of this class than any other at yale. Be prepared to put in serious time though (most PSETs have at least one \"gotcha\" pieces that take much longer than you'd think to implement). Take it take it take it.",
    "Good class. Hard class. I didn't know C, Linux or the data structures theory at the start of the class and now I do.Stan is a great teacher. He has high expectations, this is particularly visible in the code-writing assignments. So don't take this class unless you can put in 10 hours per week.START HOMEWORK ASSIGNMENTS EARLY!!!!!!",
    "Great Course. Very Interesting. Ton's of Work: 107.6 is the cumulative median time for all homework assignments.",
    "Anyone who thinks they are serious about computer science or learning programming should take this class. Since it's pretty hard, they will learn if they really care or not.",
    "More work than CS 201, but enjoyable. Be prepared to devote a lot of time to the class unless you are very quick with psets or already well-versed in C and\/or Linux.",
    "CPSC 223 is a great semi-intro class. You get a true taste of computer science and will leave the class with a clear idea of whether comp sci is for you or not. Eisenstat takes some getting used to (he's a bit curt and VERY literal), but he is an excellent teacher. He's also easy to meet with (no office hours, but you can schedule appointments at virtually any time of the day), and much more helpful in the meetings than he is when answering questions in class. The homework for the class comes in waves; there are only 6 coding psets, but each one takes about 10 hours. I felt the class had a steep learning curve at the beginning- you have to teach yourself C (not hard, the textbook is straightforward and comprehensive) and basic LINUX (interacting with the zoo to submit homework\/run tests\/write makefiles etc.). LINUX was the bane of my existence for the first few weeks of class, and I highly recommend finding someone to help you with it at the beginning of the course. All in all, CPSC 223 is a fun, interesting, and fairly manageable course taught by an excellent and experienced professor.",
    "This class is a very difficult class, even for someone with experience in CS. It's a good trade off though, because you learn a ton about low-level programming, algorithms, data structures, and the importance of finding and getting rid of vulnerabilities in your programs.",
    "yes, only if you put in the time.you're not going to get a guaranteed A even if you spend a lot of time. know that there will be a lot of students who have had a significant amount of programming experience.don't let that discourage you however, because this class will actually teach you to think differently and it's a very meaningful course",
    "Obviously if you are a computer science major you have to take 223, so enjoy it. But, even if you are not planning on taking the major, and are interested in furthering your coding skills this class will be great for you. It will be a lot of work but it will be worth it. Find an easy humanities class or two to take with it so you have time to focus on the psets. But, in all seriousness you will come out of this class with a incredibly furthered understanding of computer science.",
    "I would recommend this course to any CS major (although you have to take it anyways).",
    "CS 223 will take up A LOT of time - you HAVE to start the assignments early and you WILL stress out about them and stay up late before they're due,unless you're super good at programming. You can take late days, but it's like 5% off your original grade for the assignment for each late day... I ended up having to take advantage of this quite a bit so I could spend a whole Friday coding and hand in the assignment Friday night instead of Thursday night. Brainstorming with friends before you start coding is really helpful. The class isn't really non-CS-major-friendly... You could take it Credit\/D, but I imagine that'll either cause you to not learn a lot, or you'll end up spending almost as much time anyway. The exams were pretty fair and had nothing to do with coding - just stuff about algorithms that we learned in class. Stan Eisenstat is a good lecturer, but sometimes he takes way too long on stuff that is actually simple, making it seem more complicated than it is. He also does the same thing with the instructions for the programming assignments - it took me some time to figure out what he even wants us to code, but actually, the goal of the homework is usually simpler than the cryptic way in which he sometimes writes the specifications, haha.",
    "CS223 with Eisenstat will teach you A LOT. It will boost your confidence in coding after you get through all the p-sets. The material can be boring at times because it has much breadth but no depth. Aaron Segal is an unfair grader so be careful on non-programming assignments\u00e2\u0080\u0094write everything out, be nitpicky, i.e. leave no room for him to dock points. Tough class + will require a lot of time. START PSETS EARLY! Ask for help if you're the type, it'll save you many hours. LEARN C BEFORE THIS CLASS IF YOU CAN. Lectures will not cover C (except for tiny tidbits of nuances), so initial p-sets will be more frustrating if you do not know C.",
    "CPSC 223 is the first real computer science class you will encounter at Yale. Depending on the instructor, (Aspnes, Eisenstat, etc.) the class will either be easy or much more challenging. Eisenstat's CPSC 223 is more involved and programming assignments take 10-15 hours on average. This class is for you if computer science concepts come easy to you, and this class is not for you if you are only interested in coding\/programming.",
    "Data Structures is undoubtedly the most difficult course I've taken during my time at Yale. Without a doubt, I learned a considerable amount, and Prof. Eisenstat is a highly intelligent, experienced professor. However, by the end of the semester I felt as though I would have learned more had the class been less intense. The class essentially consumed my academic life and forced me to ignore all my other classes. I learned more in this class than in any other, but at too great a cost.",
    "Obviously for CS majors this course must be taken. For non-CS majors, this course is a broad and detailed overview of some very fundamental concepts in computer science. I found some parts fascinating and some parts boring, but everyone's different in that regard. If you're willing to put in the work (I needed ~20 hours per biweekly pset), then it should be quite rewarding.The approach is a bit old school; we program with C, an important but old language, and Eisenstat goes in depth about its inner workings at the machine-code level. This course could probably have been given with few changes even 20 years ago.The learning curve for C is pretty steep, so I would recommend you learn a little bit of it yourself before starting. I didn't, and had serious problems producing bug-free code all semester. Compared to higher level languages like Java, C requires direct memory management (by the programmer) and doesn't have object-oriented programming. Thus even the most basic functionality can be painful to implement, for the inexperienced.",
    "The problem sets will take much much MUCH longer than you think they will. Beware. But other than that, the algorithms and data structures presented in lecture are fascinating and incredibly clever in their own right and will make this class worth taking!",
    "This is a good higher-level intro course for students that are CS majors or otherwise interested in gaining a solid understanding of data structures, C, and basic algorithms. Since the emphasis of the class is on general programming techniques, you're left to learn much of the C language on your own at the beginning of the course, so the learning curve can be steep, especially if you're new to procedural programming. And even if you've used C before, you've probably never used it like you will in this class. While many of the assignments are fabulously contrived--and often very challenging--they prepare you (one would hope) for writing more efficient and effective programs in practice. Stan is a good lecturer, although much of his grading on programming assignments seems harsh. Getting an early start on the assignments is highly recommended.",
    "CPSC 223 will teach you by experience how to start coding in C. While we did not go that much farther conceptually than what I learned in my semester of CPSC 112, we certainly got a ton of experience in using various data structures in our programs. The emphasis on algorithms and their analysis was enlightening, and after this class I am eager to continue my computer science education, although I am a biochemistry major.",
    "Great class. The problem sets took time, but they were extremely satisfying to finish and as long as you start early and seek help from TAs and professor Eisenstat, they are doable. Starting the night before or even 2 or 3 nights before led to some pretty stressful experiences, but by the time I figured out how to plan my workload it was not bad. Professor Eisenstat is a great lecture, and while slightly intimidating, he wants his students to succeed and is very helpful to those who seek his help.",
    "Don't take it with Eisenstat, which may not be an option most of the time. His problem sets take 30-40 hours a week, the same amount of time many people spend doing one job. It's very difficult when you also are required to take at least two more classes per term at Yale.",
    "If you have a strong interest in computer science and in programming, the tedious and opaque nature of the course will be bearable. There is great satisfaction to surviving the course however, and doing so will also come with great progress as a programmer and an increased understanding of the fundamentals of CS.This course is an joy-rending struggle, but it does have a lot to offer if you can survive it.",
    "I would recommend this class to anyone who is considering CS as a major- it will help you make up your mind. The class teaches a lot of low-level programming basics that form the foundation for other higher level classes so definitely take this before taking other 300-400 level classes",
    "Don't take it if you are not majoring in CS.",
    "You know what you're getting yourself into. Probably a much more challenging course with Stan than with Aspnes, but it was fun anyways.",
    "Yes, 223 is a great class. As the reviews will attest, it is a lot of work. Every two weeks there is an enormous programming assignment due, and unlike previous courses, these assignments are not composed of small individual problems but rather one big problem; you have to create one big program to solve a larger task\/function. One of the infamous aspects of this course is having to learn C quickly by yourself at the beginning of the semester. This is true- in the first week \/ two weeks of classes, you should read as much of the C Programming Language book as you possibly can to learn C and be ready for the first assignment. However, learning a new programming language is not hard if you know others, and C is pretty straightforward. To relieve the tension of people who don't know any C and want to take 223, I'll let you know that I knew ZERO C before starting 223, managed fairly easily to pick it up in the first two weeks, and did fine throughout the course! But beyond the programming assignments, the lectures are pretty high-level and can be hard to understand and the exams are also challenging. The point of the course is to worka lot, learn a lot and really come to understand the fundamentals of Comp Sci and C- if you're not willing to put in the work the course is not worth it.",
    "AAThis is an excellent, but very challenging course in CS. You are finally going to learn how it all actually works under the hood as you code. You will cover data structures such as trees, lists, arrays, heaps, etc. and algorithms (divide and conquer, greedy, dynamic, etc.). More than the actual content itself, the course seeks to develop your maturity as a computer scientist and coder A LOT. For example, you will learn to compile and link on the command line. The workload is pretty heavy. You have six programming assignments that took me 7, 10, 25, 20, 15, and 13 hours respectively (assigned every 1.5 weeks). You will have two non-programming assignments that take 6-7 hours. You will have a 1.5 hour midterm and 1.5-3 hour final. This class is very work intensive and requires lots of critical thinking in passing the public tests and then trying to predetermine the private tests (you are only given 14 tests to see, but your code must pass 40 tests in all- 26 tests you won't see until after your code has been graded). This is the first real class in any CS department for moving into more serious coding. Gifted coders beware: the non-programming assignments and exams can drop your grade even if you destroy the programming assignments. You have to start the Psets early. If you start late, you may finish and think you are hot stuff, but in reality you have not devoted the appropriate time to actually do well, and it will bit you in the back at the end. LEARNED so much though, and I highly recommend it. Just remember that this is 2 credits in reality.",
    "CS 223 is an essential for all CS majors, but if you aren't a CS major and you're just really interested in CS and enjoy it, I would not recommend this class. I might recommend it as a stepping stone to get to a better or more fun course, but this class in and of itself will is not particularly beneficial for most practical coding purposes (app development, etc).",
    "The course is very challenging and time consuming when taught by Professor Eisenstat. Taking it Cr\/D probably isnt a good idea because of how much time is required. I took this class without having taken 201 which made it challenging to get up to speed early in the course--mostly in regards to how to configure my computer properly and how to use text editors and the Unix shell to build and submit assignments. However, it's not impossible to take without 201 if youre dedicated to get an early headstart and putting a lot of work in.Professor Eisenstat is an incredible teacher and if you put the work in you will learn a ton. It's one of those courses that will probably kick your butt when you're in the moment but for some reason you'll still emerge liking it.",
    "Data Structures is pretty brutal at first, but once you get used to it, it's not that bad. Take it if you really like programming, or want to learn more. The computer science theory you learn in this class is minimal, and you probably already know it. However, you will get a lot of programming experience.",
    "I would recommend it if they are willing to put in a lot of time and are interested in the material.",
    "Take only if CS major. This will be your hardest class of the semester.",
    "Definitely take the class if you plan to be a CS major, or think you might want to be a CS major and are not sure about it. This class will definitely help you decide. If you are able to handle it, you will probably be able to handle more and more difficult CS classes and potentially become a major.Beware! Although interesting, the class is also time consuming. You will find yourself working late, before the 2am deadline almost always. Don't let the first easy assignment deceive you, the later ones will take>15 hours for some people, and honestly more than 20 for most people.",
    "Very huge time commitment but great payout. Absolutely take it if you're interested",
    "I would definitely recommend this class to any student interested in Computer Science. The class is fairly challenging, but has a great payoff in terms of computer science experience. Don't expect an easy A, or even an A at all, but if you want to become a better programmer, this is the class for you.",
    "CPSC 223 is perfectly described by its name-- you should be aware that this course is a BIG jump up time-wise from CPSC 201. The problem sets are much longer, and much harder (as are the exams), and you WILL struggle often. Also, Prof. Eisenstat often relies on students to self-teach themselves a great amount of material from the textbooks, and considering the time commitment this course inherently requires, and considering how dense the textbooks often are, it is often difficult to learn core concepts clearly. Granted, you will feel yourself having learned an incredible amount at the end of the semester, but it will have been a long road to get there. Take it if you're REALLY serious about computer science.",
    "The class taught some of the theory about data structures, but expect you to teach yourself C and Linux. You will be at an extreme disadvantage if you do not already program in C and understand a Linux system. Programming sets are difficult and the tests cases are very tricky.",
    "Learning about all the data structures was fun and implementing them in C was a good experience overall. Nevertheless, Professor Eisenstat's teaching method just didn't fit with me. The class should be called \"Introduction to Data Structures\" and not have the \"Programming Techniques\" addendum because with Stan's teaching style, there were no techniques that we learned from him. In the class it was all about theoretical computer science, while the programs were pure programming. That was all right most of the time, but when it came to programming intricate problems, it didn't suffice. For example, especially with a low-level language like C one has to spend some time explaining (with code) how to handle memory, instead of just assuming that we will learn on our own or from the theoretical conceptstaught in class. I emphasize the importance of CODE being shown in class. Also, Stan keeps his answers for problem sets to himself and does not release them, which is a terrible thing to do. I understand that he wishes to reuse the programs in the future, but in order to learn programming TECHNIQUES (as the title of the class mentions) it is much better to see how a professional programmer\/computer scientist programs and develops his code. So, in a way his laziness is rather unfair for this class. In the end, of course if you already have experience in this area, you'll have an easier time than us who had to climb cliffs to keep up with the class. Of course, the problem sets take anywhere between 15-30+ hours, depending on your previous experience.",
    "It feels a little silly talking about whether I'd recommend this class, because it's both a requirement for the cs major and a prereq for a lot of cs classes, so I imagine that most people taking this class have to take it. I will say that cs223 is a lot of work, but it's a good class, and you will learn a lot.",
    "Very difficult class, but I do feel like I've learned something. Start the problem sets early and get help - don't be too proud to ask for guidance if you need it.",
    "Take, and give yourself a stake in it (i.e. do it for a grade). If you like solving puzzles, you'll love the problems and feel accomplished with how robust some of your programs are by the end of the course; they're really like mini-pieces of software.Once you're in the class, some advice: passing all public tests (the test cases the professor will give you to try on your code) does NOT NEARLY guarantee you're done. Given that, as long as you commit yourself to making your code able to handle any relevant scenario, you can normally get it good. Passing 40 out of 40 test cases is very possible. Just try to imagine the strange types of input your program may encounter for each assignment.",
    "This class is a long and difficult uphill battle through uninteresting but necessary material. It teaches you C, which is significant. Eisenstat is very helpful. But the homeworks seriously stressed me out.",
    "Absolutely fantastic course. You'll come away feeling like you can do almost anything with C. And you'll learn a good deal about data structures and related algorithms, too. The course has a gentle enough introduction that you'll enjoy it even if you've never programmed in C before (though you may have more work at the beginning of the semester.) But the course is also advanced and interesting enough to keep even experienced programmers engaged. No matter what, you'll become a better programmer from working closely with C, doing your own memory management, programming from the command line, and solving the interesting homework assignments. And you'll get a taste of many fundamental topics in computer science that constitute the bread and butter of the discipline.The homework for the course centers around six programming assignments. The assignments are challenging and decently time-consuming, but also a ton of fun if you enjoy programming. While some may seem easier than others, in truth, each is challenging to make perfect. Professor Eisenstat releases a few public test cases for you to test your program on. After your turn in your code, he grades your program against those sample test cases, as well as many more previously unreleased \"private\" test cases. I highly encourage to try to test and break your own program as much as possible. The sample test cases generally leave many edge cases untested, which, if not properly handled, may cost you points from the private test cases in the final grading script.There are also two written \"non-programming\" assignments, which require diligent work, but are decently straightforward and not nearly as tricky as the homework assignments. The exams closely follow the pattern of the non-programming assignments. And while the exams are challenging, they are very reasonable.The beginning of the course focuses mostly on C the language and programming techniques. As the course progresses, it transitions to more and more on data structures and algorithms.The textbooks are definitely helpful, as are Professor Eisenstat's handouts. It's good to know that much of the course's later material (especially in the last third) isn't precisely covered in any of the texts or handouts, so going to class and taking notes can be very important.Professor Eisenstat knows the material backwards and forwards. He is a great lecturer, and definitely knows how best to teach the material. He is also tremendously helpful during office hours--definitely go to them if you have any questions the peer tutors can't help with.Overall, I highly recommend the course for anyone who enjoys programming or theoretical computer science. You'll have a great time.",
    "If you are a com sci major, you don't have a choice. You have to take this class. Professor Aspens version is significantly easier I hear, but I think you end up learning a lot more with Eisenstat.If you're not a com sci major, but are looking to get a solid background in computer programming then you have to take this class. One of my biggest regrets is not taking this class in my sophomore year. You end up learning enough programming to land you a job at Google, Microsoft, or any tech internship.",
    "Learned about data structures and algorithms, as the course's long name suggests. I think this is a great course, and even non-CS majors should try it to learn.",
    "If you've programmed in C before, understand pointers, and are smart enough to learn things from the books or the Internet, this course may be a waste of time for you. On the other hand, this course *will* force you to get a lot of hands-on experience, so if you're not otherwise able to motivate yourself to program in C for many hours, this course may be helpful. One of the things that Eisenstat emphasizes particularly well is the practice of programming. Emerging from this course, I think I have a much better sense of how long tasks will take and which ways of coding make bugs more likely.",
    "Good class that teaches you both practical programming and general concepts. Learned a lot. Fairly high constant workload. Possible to take with only some prior programming experience.",
    "I would strongly advise against taking this course if you can avoid it. It does teach the concepts effectively, but the workload is so brutal it will make you miserable, and tremendous effort does not guarantee an even somewhat decent grade. Buy a good C book and save yourself the frustration. If you do take the course, buy a copy of Van Wyk, and start all the problem sets early, even if you think the spec may change. Outline your programs before you start coding.",
    "You will lean a lot about programming and computer science but be prepared to put in the time and effort.",
    "If you've done some programming before but haven't taken a class yet, definitely start with 223."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "223",
  "section": 1
 }
}