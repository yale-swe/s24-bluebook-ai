{
 "crn_code": "12171",
 "season": "201403",
 "legacy_coursetable_course_id": 28994,
 "enrollment": {
  "enrolled": 110,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    0,
    0,
    15,
    66
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    4,
    19,
    28,
    29
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    72,
    6
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "C will be your loyal steed after this course, and the ability to debug obtuse problems in your code will be your sword. Take the class - a freshman took it this year and so can you!",
    "Yes. If they are serious about programming and computer science. Otherwise the amount of time needed for this class (40-70 hours\/pset or 20-35 hours\/week) might not be worth it.",
    "Stan is an excellent lecturer, teacher, and mentor. He always comes prepared for lecture and is extremely organized. His carefully designed psets impart invaluable programming experience for students. Most of all, what makes this class great is Stan's willingness to hold office hours and answer email questions. He is one of the most dedicated teachers I have encountered during my time at Yale, definitely the most generous in terms of offering students his time.",
    "This is the hike to the summit of the CS major at Yale. It's no joke. If you're not going to work hard, don't take the class and save yourself the misery. But if you work diligently and START EARLY, you'll do fine. I learned a lot and feel like my C programming ability grew tremendously. In 223, I learned data structures and algorithms and the 223 PSETs consisted of just implementing data structures and algorithms. In 323, the PSETs take the foundation laid in 223 and demand of you not only the ability to implement a given data structure or algorithm but also the ability to envision how to tackle an engineering problem from start to finish, using data structures and algorithms as basic building materials. All of that being said, this isn't 223. You're getting into the nitty-gritty of modern (or approximately modern) implementations of systems that make computers tick. From virtual memory to parallel processing to concurrency problems to caches, you'll learn how computer scientists have addressed the monumental problems that arise with the ever-increasing demand humanity places on their computers.",
    "Best course ever taken. Rigorous, no doubt, but that comes with being the rite of passage into CS-majordom.",
    "Overall, CPSC 323 is a great class. Professor Eisenstat is a fantastic teacher. He makes difficult concepts easier to understand and is always available for help. The class will continuously challenge you and, as a result, you'll always improve and learn new things. Be warned that the class is a huge commitment. There is a lot of material covered, and the problem sets take about 20 hours on average. Accordingly, I'd recommend that you 1) brush up on C before the class, 2) make sure you have a relatively light class schedule, 3) get started on every assignment as early as possible, 4) use a whiteboard to sketch code before you start working on a computer, and 5) go to office hours or the Zoo whenever you're stuck on an issue for more than an hour or two.",
    "Lots of work, will make you a much better programmer.",
    "If you're taking this class you (should) have already taken 223, so you know exactly what you're getting into.",
    "A bear of a class. An survey of how every part of the machine is involved in computation. Most of your points (and man-hours) involve using C to build your own version of various utilities that the system uses to run programs. Start early and seek help often and you will get through it. Some people are natural programmers who won't need much help, but that certainly isn't me. Use the resources available to you, know that people have done it before, know that Stan wants you to succeed, and be proud of yourself when you're done.",
    "You don't have a choice if you're a CS major, and though the course is interesting the workload makes me wonder why you would even consider taking this course if you're not a CS major.",
    "It is as you'd expect from 223.",
    "Because of this class I no longer have the ability to feel joy. It's required for the CS major so what can you really do? Either you're one of the students who is really good at CS and likes to brag about how great you are and how easy the psets are for you, or you're a student who is decent at CS but has a hard time with the psets and is afraid to ask questions because the former set of students will act like you're dumb for not knowing everything. It's also just... not a great class. You learn some things about computer architecture, which may be useful. But lectures aren't that good and psets will gradually turn your enthusiasm for CS into anger and despair. I don't feel like I became a better programmer at all. LZW was pretty bad. Bash wasn't too hard to do - at least a basic version that would pass public test cases - but had a really tough grading curve. The final pset was a thing of beauty because all the test cases were public and the assignment was actually manageable for once (took under 10 hours instead of the usual 30-40). Basically if you're in CS you have to take this course, and yes it's just as awful as you've heard, so just do it and remember that the semester will eventually end.",
    "If you are a CS major, you will have to take this. If you are not a CS major (like myself) and have the time\/energy to devote to this class, you will become a much better programmer and you will not regret it. Professor Eisenstat is a great professor and probably the best professor in the computer science department. While he may seem intimidating and offputting at first, he truly cares about his students and wants them to do well. I am glad I had the opportunity to take both 223 and 323 with Professor Eisenstat. In terms of the class material, I found the first part of the course much more interesting than the second, but I took the course moreso for the programming than the computer science. The class is as advertised when it comes to the workload. Expect to spend around 20-30 hours on the C assignments (except for LZW) and 10-15 hours on the scripting assignments. LZW was simultaneously the coolest and toughest assignment I had ever done. I think the class average was around 40 hours to completion and it took me over 50 hours. In order to do well, I recommend you start early on the assignments so that you have plenty of time to edge case. I think the main differentiator in performance is the amount of time spent edge casing. Both the midterm and final were fair. I recommend this class, but don't kid yourself and think it will be easy though. This class will consume a majority of your time, so the workload from the rest of your courses should be relatively light or your performance will suffer.",
    "If you are reading these evaluations, you probably already know that you are going to take this class at some point. If you are like most people, you will have ups and downs in this course. Some assignments are significantly more challenging than others and it will take a lot of self motivation on your part to ensure that you start them early. Also, do the readings so you know what is going on. Unlike 223, the spec is not a complete description of the assignment and you will need to do additional work to fully understand what it is you are supposed to program.",
    "Very hard course; only take this if you have a light courseload. Each problem set takes at least about 20 hours to complete but you really learn a lot.",
    "The best and biggest class I have taken at yale. Psets took a combined ~200 hours, and, although not every minute was a joy, they made me a better programmer, and the satisfaction I got from completing them was really incredible. The lecture material was also interesting and engaging, particularly the parts involving Linux. Take this if you want to invest your time in developing your programming skills and understanding how computers work; it is well worth your while. If you liked 223, you'll like this. Although the material is slightly different, it is equally useful. DIfficult to project what this class will be like with a new professor, however, as Eisenstat was (is) a God. How to be a succesful 323 student: Start psets as early as possible. Go to office hours if stuck on a bug for more than 45mins. Write a ton of tests. The only way to do well on the psets is to write a lot of tests. Use vim for text editing.",
    "If you like computer science, you'll like this class. Programming is similar to 223, as well as class structure. Just make sure to stay on top of assignments and test your program for private tests. It is a lot of work, so don't take more than 4 classes and make sure you can prioritize it.",
    "I'd strongly recommend this class. Taking it, you will become a better programmer, and likely pick up a good amount of CS theory on the way (though given the weight placed on the programming assignments, this sometimes seems secondary). However, the rumors are true: this class takes a lot of time. I have a feeling though, that were you to manage your time more effectively than I did, the workload would be relatively manageable. It's really important to start assignments long in advance of the deadline, so that there is time to consult peer tutors or Prof. Eisenstat in office hours (and to realize that Prof. Eisenstat is available for help via email).",
    "Take it, but be sure to have enough time to complete the Psets. Plan for at least 20 hours every two weeks. If Stan is teaching it, this is basically a continuation of CPSC 223, except with two assignments that use a higher level programming language (Perl, Python, or Ruby).",
    "I'm assuming anyone looking at 323 needs it for their major. It's hard, it's time consuming, but it's doable and worth it.",
    "CS majors have to take this class, but fear not! Even if you are not doing CS, this class will be such a great learning experience (with adequate prior preparation like 223). Stan's been teaching 323 for as long as anyone can remember and his 323 is guaranteed to be a great class. You get to implement actually useful utilities (unlike those designed to just practice your data structures in 223), many of which are pretty involved. You will feel so proud of yourself everytime you finish such an assignment and they make good software projects even on a CS resume. Aside from the rewarding albeit time-consuming assignments (I spent about 1.5-2 times as much time on the 323 C assignments as on the 223 ones), you get introduced to extremely important ideas of designing Computers. The format of the class is like 223: lectures and assignments concern, most of the time, separate topics. The assignments are challenging, account for 2\/3 of the grade and require STARTING (at least thinking about them) AS EARLY AS POSSIBLE. The two exams are fair and are only 1\/3 of the grade. Heed Stan's advice about the homework: build your program incrementally, instead of implementing every feature at once. Start early, actively seek help and commit time, you will grow so much as a programmer.",
    "CPSC 323 is a lot of work, but very rewarding by the end. After completing CPSC 223 and 323, you will feel like a better programmer.",
    "An essential class if you're serious about programming. It won't be easy (expect the assignments to take up more time than all of your other classes combined), but you will come out of it a better coder and a better thinker. There are a lot of horror stories about 323, but as long as you're committed to the class and willing to put the effort in, it will likely end up being one of your favorite classes at Yale.",
    "If you're a CS major, relish this opportunity to join the generations of CS majors before you who were baptized by the very same class (like, no joke -- Stan has been teaching this forever). You will spend more time on some assignments than you do for entire other courses, and will become a much, MUCH stronger programmer for it. For this reason it can be beneficial for non-majors too, if you're willing to put in the time.",
    "If you are intending to be a CS major, you have to take this course. Good luck. If you are not a CS major, you need to be willing to devote large amounts of time on debugging a small piece of code, being frustrated that your code isn't working \/ is throwing a million valgrind errors, and generally being a pset-obsessed lump for 150 hours out of the semester. Good luck. Ok, now onto advice. 1. Write a debugging program for LZW that takes in output and spits out where the code goes wrong, and why. I mean it. It saves so much more time than looking at the printed input and making it easier to parse every.single.time. 2. Collaborate with classmates often. If you think you understand the spec, explain it to them; this improves your understanding of the problem and may have the added bonus of finding edge cases. 3. Collaborate on edge case finding, which is where 70% of the points are. As long as you don't take written record of it, it's okay. And if you do this before starting the program, you'll have a better idea of how it should be structured. 4. For the love of all that is holy, run valgrind on all your inputs. 5. Find a coding buddy that you can rant to when things go right, wrong, or just flat out terrible. Makes the course so much easier to bear. 6. Late days are better than failing all of the edge case tests.",
    "CPSC 323 is not as bad as people make it out to be. That said, it's definitely a decent amount of work (I probably spent an average of 15 hours a week). The in class material is mostly about computer architecture and other low level details and unrelated to the problem sets. As long as you start the problem sets early, you will be fine. I especially recommend that you start LZW and Bash early. Overall, CPSC 323 is about the same amount of work as CPSC 223 with Eisenstat.",
    "A hard class, no doubt. Prepare to spend TIME (15-30 hours every other week) on psets. Prof. Eisenstat is amazing, truly an integral part of CS at Yale.",
    "A Yale gem. If you are at all interested in computation, computer architecture, or want to be forced to learn how to develop (simple) software and submit it to rigorous testing, then you have to take either CS 223 or 323 while you're here. Excellent course.",
    "Not really my field of interest, but I found it useful if only to force myself to program in C \/ expose myself to how things work under the hood.",
    "This class is 223 but with longer psets and more complex topics. Whereas 223 really inducts you into the world of data structures and algorithms, 323 begins to reveal what is going on when you do stuff on your computer and everything magically works. Many of the assignments are linux-y or systems focused. The behemoth assignment LZW isn't really that bad -- just don't start it the night before (or the night before the night before). If you enjoy coding, this class isn't going to be a problem, you're just going to have a few more late nights in the Zoo.",
    "Not as bad as 223. Doable.",
    "Definitely. If you liked 223 you'll love 323. It's a jump up, but if you can handle 223 it's no problem- I felt like I actually had an easier time in 323, because there's less of a learning curve (vim, terminal, zoo etc.) than there was at the beginning of 223. Problem sets are no doubt harder, but you're a better programmer. LZW took the longest and Bash was the hardest in my opinion, but these were also my favorites and the ones from which I learned the most. Also cool to learn a scripting language if like me you didn't already know one, and it's nice not to have to deal with non-programming assignments. A lot of time but so worth it, especially if with Eisenstat.",
    "You get way better at programming, but I'm not sure if that's because it's a great class or you're just forced to do a lot of homework.",
    "This is a great course that majors should look forward to. You will finish the course knowing more than you probably even know that you don't know, if that makes sense. However, if you aren't a major, I don't know how useful this would be for you, and it probably wouldn't be worth the work. Don't underestimate the workload. This is the kind of course where one bug could set you back 10 hours if you aren't good at\/lucky at finding it... If you are a good coder, budget at least 20 hours for each problem set, and 40-50 for LZW\/Bash, more if you aren't. Trust me, nothing is worse than feeling like you wish you had more time to invest in 323 but not being able to find more hours, because you will really want to learn this stuff thoroughly. So LEAVE ROOM IN YOUR SCHEDULE. But... you will get through it, no matter the damage to your GPA, then the world will be your oyster. Remember to get sleep, remember that bad grades aren't the end of the world, and remember to prioritize your mental health and enjoy learning for what it is- then this class will be livable and lovable.",
    "This is a terrific course for learning the fundamentals of systems programming. I would definitely recommend this course if you enjoyed 223 at all. While the problem sets are definitely time-consuming, there usually are never any large bottlenecks or fundamentally difficult problems to solve; instead, it is a constant, iterative process of solving little problems.",
    "Chances are, you're taking this because you're a CS major and have no choice. But it's definitely worthwhile beyond that. I didn't really go to lecture (which is kind of a mistake), and that doesn't affect HWs much, but it does make the exams very challenging to study for. The HWs are excellent to learn from, but they seriously take a long time. You MUST be willing to put in the time that this class needs\/deserves. Just go into the semester with that mindset.",
    "If you need it for the CS\/CS Joint Major, take it. Otherwise, unless you're actually interested in the material, don't. There are better ways to improve your programming skills.",
    "Of course, it's probably most everything you've already heard of. Personally, I took 223 over a year before taking 323 (223 in Spring 2013, 323 in Fall 2014) because my freshman year self had little to no work ethic and 223 really screwed me over. I felt terrible and didn't do any coding my sophomore year, but by junior year I wanted to code again and had definitely improved my work ethic. Working like Stan tells you do - starting a week or more in advance, talking to TAs, asking people if you need help, and possibly doing the reading (though I actually didn't really do that this semester), was really just so much better. Definitely, definitely, definitely do all of that, and if you need help finding help - the internet is a great source of course, but go to the Zoo Annex (17 Hillhouse) in the evenings, and there will usually be fellow 323'ers there. Do your best not to be shy and go ahead and ask for help because it helps SO MUCH. Besides that, take good lecture notes for the midterms, and don't be afraid! It's not as bad when you make friends and you spend the required amount of time on this class, whatever that may be for you.",
    "I thought the problem sets were less challenging than CPSC 232, but they most definitely take 2x as long. Tip to getting an A, start early, start early, start early. The biggest failure in CPSC 232 is not getting a hang of things quickly enough. Don't let this continue in 323. Start early. Go to office hours, if you need help. Work in the Zoo. You hear tips and facts about the problem sets you cannot know when working alone. LZW and Bash are the two longest assignments but also the most fulfilling.",
    "You know it's gonna be horrible. Take gut classes with it. START PROBLEM SETS EARLY. SERIOUSLY. The problem sets are never as scary as they first seem. Good to have a study team. Exams are really important!",
    "CS323 is an excellent course. It is definitely not as bad as it is made out to be by some. If you start early, seek out help from Professor Eisenstat, the peer tutors, and the TA's, and spend the time that you need to complete the assignments, you will get a lot out of the course material and your coding ability will improve. In some way, there are two parts of the course: what is taught in class and tested on the exams and the material that appears on the psets. However, Professor Eisenstat does present material that is crucial for implementing LZW and Bash. The first half of the course had more interesting material (machine arithmetic, compression, error detection, basic computer organization, RAID etc.) than did the second part (shell, virtual memory, Pipelining, etc.), but the second half does present very important material that you need to be aware of as a system programmer.",
    "While many may feel that 223 is the litmus test for the major, I would not discount this courses ability to push you to your limits. However, the work and the challenges are of a slightly different kind. It is less about figuring the ins and outs of C and puzzling through the conceptual solutions to algorithmic problems and more about your ability to be a through systems programmer. The vast majority of the problem sets tested your ability to consider every edge case because the public tests are much less probing than the ones in 223; more often then not, they did not even test all the features of an assignment as detailed in the spec. If you can give the assignments the time they need, the course, in some sense, is less complicated than 223. The exams are more straightforward, and there are no non-programming assignments. And of course, this class meets the high standard of quality you can expect an Eisenstat class, so on that note alone, I would recommend the experience.",
    "Yes, this class is awesome. It's not a terrible amount of work (note: this varies widely on your programming skill). The classtime lectures taught a lot about how computers function on a basic level (think caching, memory optimizations, super low level) but I wish they would go a little bit into assembly language so we could see those kind of optimizations. The programming assignments are pretty fun: the scripting ones are fun (assuming you know Ruby\/Python\/Perl well before), and the others are very interesting and teach you a lot. LZW was the hardest by far, but the others took a similar amount of time. Take this class - it will teach you a lot. Also, you'll gain a really good appreciation of 201 because you are looking at the register\/accumulator\/program counter model from a slightly higher up perspective, which is super interesting.",
    "Unreal class. A huge time commitment unless you're a programming genius. You will learn a lot.",
    "This is very possibly the most difficult course at Yale. You will spend 30 hours on each assignment, and when you only spend 10 hours on an assignment you will feel like you did no work on it. If you start to fall behind, you will not be able to catch up, because there simply are not enough hours in the week. The two exams are pretty easy, though.",
    "323 is hard but rewarding. Some really cool problem sets. More difficult than 223 but the subject material is more interesting in my opinion.",
    "I actually found 323 to be less difficult than 223. That's not to say that it required less time. (It definitely required more time for me.) But the assignments were generally less algorithmically challenging than the assignments in 223. The programs were bigger and more complex however. In this sense, the focus of the assignments seemed to be on thoroughness \/ careful programming. The public test scripts were always very light. I had to do a lot of testing on my own (SOOO many edge cases). The only assignment for which this wasn't the case was LZW. Once you get things working, you're pretty much good to go. With LZW, the problem is simply getting things to work. My piece of advice -- add one functionality at a time and test the {4-letter expletive} out of that functionality as soon as you add it! Otherwise tracing the source of problems can become a bit of a nightmare. Since I'm talking about specific assignments, I might as well mention Bash (backend of shell). I actually thought Bash was more challenging than LZW. You have a lot of flexibility in terms of how you tackle the problem, although there certainly are better ways of going about things. Again, every time you add a new functionality, test it thoroughly both on its own and in combination with the functionalities you've already implemented! My other big piece of advice -- DON'T LET PEOPLE SCARE YOU! I promise you 323 is very doable. Especially if you're coming in to the class after 223 with Eisenstat, you're surely a better C coder than you were at the start of 223. Throughout the semester, I was able to quickly find and address bugs with valgrind. And more often than not, I was able to think through bugs very logically. Again, the only exceptions were when I added multiple functionalities without testing each individual one and then found myself unable to track the root cause of bugs, hence my advice from earlier! Regarding lecture, it felt a bit dry at points. As a friend eloquently put, \"I feel like Eisenstat is feeding us our vegetables.\" In other words, the dryer material was necessary nonetheless. I found the lectures on compression and concurrency the most interesting. LZW is actually a very cool algorithm. I'm rambling. Long story short, this is a solid course. Best of luck, I promise you'll make it out okay if you're at all doubting yourself!",
    "Lectures can be somewhat dry, but overall, excellent course. Well-taught as usual, and not nearly as difficult as 223 was. Still very time consuming. Obviously you're going to take it, but don't stress it so much.",
    "Overall, this class was a good introduction to Systems Programming and Computer Architecture. This was, by far, much better than 223 because we were already familiar with C, so it wasn't Stan throwing us to the wolves as much. I enjoyed learning about how different hardware interacts with software, and the architecture of a computer. Nevertheless, I am not a big fan of Professor Eisenstat's teaching style. The first midterm was slightly unreasonable, but the final was better. The programs themselves were pretty good. If you're a comp sci major, you have to take this. I'm glad I took it with Stan for the programs (NOT for his teaching style). Expect to spend 15-25 hours on every program, 30+ for LZW, and depending how helpful the TAs are, 30+ for Bash if they are not helpful.",
    "Hard class. A lot of input processing in C. But you do cover a lot of important topics and it's a well-structured course. Of course it is because Stan teaches it. And Stan's the man. Would not take this course unless you're really into programming."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "323",
  "section": 1
 }
}