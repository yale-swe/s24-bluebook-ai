{
 "crn_code": "10512",
 "season": "201603",
 "legacy_coursetable_course_id": 39118,
 "enrollment": {
  "enrolled": 89,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    0,
    1,
    9,
    23,
    31
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    0,
    3,
    9,
    22,
    30
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    0,
    1,
    10,
    26,
    27
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    0,
    10,
    16,
    20,
    18
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    1,
    3,
    24,
    36
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    1,
    3,
    12,
    48
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "computer architecture, how memory in computers work, parallel architecture, computer science is about trade-offs, how to back end of a shell works and how to program one",
    "I learned how systems work, from how data is stored and retrieved to how error-checking is performed to how shells are written so users can interact with the system. I also learned how to edge-case effectively and make sure my program works as expected, even when given unexpected input.",
    "This class by far has been the most rewarding and challenging course I've ever taken at Yale. I became a much more skilled programmer after taking this course and quickly picked up and became comfortable with system calls and python, two cs aspects I had never seen before. My ease working with the shell and understanding for the computer skyrocketed!",
    "C programming skill Understanding better about the Linux system and computer structure",
    "I learned how my computer works, and everything going on inside it. Great introduction to the low-levels of linux & computer engineering.",
    "I gained a lot of insight into the machines that we work with, the kind of tradeoffs that designers must critically evaluate, and what goes on \"under the hood\" of these machines. I also gained far stronger time management, collaboration, and study skills.",
    "Lots of experience C programming and designing code. I understand mroe about computer architecture than before.",
    "I learned a lot about systems programming and computer organization as well as general programming concepts.",
    "I'd like to think I became a better programmer over the course of the class, but a lot of the points in this class are based off of edge-casing on the problem sets and passing obscure little things-- so I think I became more of a hacky programmer than an efficient one. But the material in lecture was interesting, so I definitely learned that.",
    "I am better at programming, and I better understand how my computer works.",
    "I became a much better coder by taking this course. This was the first intensive coding class I have taken at Yale. I did not learn as much in lecture as I learned by doing the psets.",
    "Without the skills learned in this class, one cannot call himself a programmer.",
    "Higher level understanding of C, Python, and Linux.",
    "My programming skills improved significantly from the psets, because they were a step up from what I'd done in 223 with Stan. Also, during class, we covered the basics of how a computer works, and I have a more thorough understanding of computer architecture now.",
    "I have become a much better programmer through this course.",
    "Shell programming, hardware knowledge",
    "This was the first class to make me feel like I understood, at all, how a computer actually works. The programming wasn't as hard as 223, and the class had less of an emphasis on problems. The work didn't feel like solving problems, it felt like building things. And while I'm better at solving problems, it is importabt nonetheless.",
    "Achieved proficiency programming in C and gained a well-rounded knowledge of systems programming and computer architecture.",
    "I'm not entirely sure. I learned way too much to be able to handle at once, and it was just too much too fast. I got a lot better at coding though.",
    "323 was a lot of programming with C, and by the end of it I definitely achieved a new level of comfort with pointers, structs, and the general flow and organization of a C program. The bulk of the class is the programming assignments, but I also felt like I learned quite a bit about computer architecture and what goes on behind the UI. All in all, I felt like I became a lot more comfortable with my programming skills, and learned a bunch of knowledge about Linux, the shell, and the file system!",
    "You learn many interesting (though not that useful) things about systems. Error detection\/correction, compression algorithms, memory hierarchy, and instruction set architecture are some off the top of my head. It gives you a much better understanding of how computer hardware and software actually work, and how we have made many improvements to get where we are now.",
    "You really develop an appreciation for Bash and fundamental Linux commands\/operations. Covered topics from data compression to implementing basic pipelines.",
    "I learned a ton about how computers\/systems worked, and became a much better programmer.",
    "C programming, Linux system, computer architecture",
    "I became a better programmer, one who understands how a computer is structured. I learned how to debug and rewrite code and tackle big problems.",
    "Learned a ton about computer architecture and systems programming in C.",
    "Much better C programming and debugging skills, and most importantly a much better understanding of how computer systems work",
    "Stan is legendary. 323 is legendary. Take this.",
    "Better programming skills and some basic computer system organization.",
    "Learned more c programming and topics related to computer organization i.e. linux.",
    "I learned about systems programming in C, becoming reacquainted with the language. I also learned about computer architecture.",
    "A lot.",
    "Very technical understanding of operating systems and various aspects of computing. Exploration of low level implementation for modern computation.",
    "I think I became a somewhat more efficient programmer, in addition to learning the material described in the course syllabus.",
    "I really learned a lot about how computers work. I feel like I have a much better understanding of the bash terminal. I have gained a newfound appreciation for programming and what it means to develop a complex program."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "Forces you to do a lot of work and gain programming experience. However, some of the assignments felt very disconnected from the lecture and required little conceptual understanding. Bash was the only assignment that seemed to really require understanding of some of the concepts.",
    "It would have been nice to learn more about how computers currently work in the modern context. This kind of felt like the history of how computers work. I still am unclear on whether the methods we talked about are used today",
    "The problem sets are really well-designed and so were the tests that Stan ran on our programs. The lectures were well-organized, though I think we could have gone into the different concepts at greater depth.",
    "Strengths of the class: 1. Super in depth knowledge of all the topics covered 2. Leave with a great understanding of the backend of the computer and possible a new coding language 3. Good amount of time in between psets. 4. The exams were pretty fair. 5. Many opportunities for help from Office Hours. Weaknesses: 1. Not great 1:1 help (they had no Tutors available) 2. some psets could take over 30hours which doesn't fit into a busy Yale schedule well (i.e. being a president of an org. or in an acapella group, or camp Yale\/shopping period) 3. The psets rarely related to the material in class so you always had to restudy all the material for exams separately",
    "Overall, the course is great. The only weakness is that some materials require much memorization, but less understanding, but I guess that's the nature of the contents, and is hard to improve.",
    "Very complex subject matter can be difficult to understand without lots of work; this means lectures also began to run behind where they were supposed to be. But still a fantastic class. Problem sets didn't always have a ton to do with lecture, but there's honestly no good way to assign coding homeworks that correspond to some of the topics. One thing notably that could be improved was making sure that problem sets that \/do\/ correspond to class material should actually occur at the same time.",
    "Naturally, as you've probably heard, the course sometimes feels like two courses--the lectures in class and then the problem sets, which often cover different material. Near the end, however, when the material started overlapping, (re: designing the Born-Again Shell Environment) it was incredibly rewarding. Stan was helpful, and I enjoyed the course, which was not as difficult as last year. This being said, I would love some more feedback on our code, because that seems like an interesting challenge, to become more meta about the things that we write.",
    "Love this course. Beautifully designed problem sets. Maybe we could do a little better making clear what's going on in problem set 5, because I got lost even though I wanted to do a lot more with it. That said, i CR\/D\/Failed the class, so possibly not the target audience for 100% engagement.",
    "I wish the lectures had more to do with our psets, since it seems as though the psets just advantage students with prior programming background.",
    "Strengths: It's challenging and keeps you on your toes. Weaknesses: It's challenging and keeps you on your toes. This course is a rite of passage in the Computer Science major-- you take it because you have to. Professor Eisenstat has been teaching this course for 30 years, and he's not going to change it so my advice to students is this: take a deep breath and push through it.",
    "I wish the lectures were more related to the programming assignments, or that there was more documentation of the lectures online (pre and after the fact). It sometime seemed like the class was just jumping from topic to topic and it wasn't always clear why.",
    "This course really pushes the students. They must develop their coding skills and spend a ton of time on the homework. The lectures were dry but the notes were not posted so you had to attend course. The lectures did not correlate with the homework except for LZW, which I did not like. The lectures should be more exciting and there should be more resources if you are confused about the material covered in lecture. I do think this course needs to be made easier and other courses need to be made harder. The learning curve was incredibly steep and this course took over my entire semester.",
    "Strengths: The course is well designed, and the topics discussed are very interesting. Weakness: There should be more peer tutors to assist this class.",
    "The psets of 323 are a very strong point of the course. I'm glad Stan makes them rigorous because I feel like completing them improves my programming ability a lot. I've heard the psets have been gradually becoming easier, but I don't think that's a good thing--the more challenging they are, the more I'll gain from the course. Also, I wish Stan would use PowerPoints in lecture. I think we'd be able to cover more material if he wasn't writing everything out by hand.",
    "This class seems to want to be two things. Most of its substantive content aligns with that of an intro operating systems class. However, the problem sets seem more interested in building up software development skills. I am not convinced that those two different focuses make sense in a single class.",
    "LESS WORK. It takes too much time, as too many expectations, and it too hard.",
    "I and many other students found 323 lectures very difficult to follow, and did not understand the material until I started studying for the exams. Professor Eisenstat should use more examples in his lectures and should show us these examples before generalizing so that we better understand the generalizations.",
    "The strengths are definitely in the programming assignments - they will challenge you and frustrate you, but lead to a lot of growth! I think the lectures could be improved, because at times during lecture I felt very disengaged with the class. Sometimes I got the feeling there were 2 different classes going on - one C-intensive programming class, and one more about computer architecture. The unit on bash melded these two together, but the rest of the class for me felt like this.",
    "There is a ton of content in this course, and at times it can be overwhelming. Sometimes Stan explains things in ways that aren't that clear, probably because he thinks it is simple when it may not be for undergraduates.",
    "Course is extremely time consuming (40+ hrs every week) and points feel like it's either all or nothing",
    "I really didn't care for most of the systems stuff. Learning about memory hierarchy and most of the other topics was incredibly dry and uninteresting to me. The problem sets were really fun though and I loved the linux system programming stuff. Unfortunately lectures weren't more focused on this, but I understand that all the topics we covered are necessary to learn.",
    "Lectures corresponded well with psets, but final exam was slightly unfair in that it did not accurately represent knowledge gained over the course of the semester",
    "A lot of the lecture content doesn't line up with problem sets. We go over the problem sets a bit which is always useful, but there's not much motivation in the short term to really engage with the theory lectures while they're happening. A big problem are the TAs. Office hours are (understandably) very busy. TAs don't seem motivated to try and move through students quickly when there is a long queue, and will often stay with one student for ~45 minutes. There were also a couple TAs who didn't really seem to understand the problem sets. They claimed to have not taken the course and thus couldn't help us with planning our code, but would be happy to valgrind with us. After waiting in a long queue to not get real help was very frustrating.",
    "It's difficult, more peer tutor hours would be appreciated. Design grading would have also been nice.",
    "The psets are brilliant, but the lectures could certainly be improved to explain the concepts better and to be more engaging.",
    "Strengths: very good presentation of the information in class, problem sets are connected to the lecture material and are very good at making you think about the implementation of commonly used systems Weaknesses: it's a lot of work but that's intentional and somewhat necessary to the learning; I wish the professor would devote a little more lecture time to discuss the optimal solutions to the problem sets, but I should have been more proactive in going to office hours for that",
    "323 is the Platonic Form of a computer science class.",
    "Extremely time consuming course that's graded on a curve, but the problem is everyone in the class is a super genius. But you know what you're getting into when you take this class.",
    "Strengths are in the psets. I learned a lot from struggling through them, even if they were difficult. I was very unengaged during classes though. I didn't find them particularly useful yet still managed to learn most of the material on my own.",
    "The online assignment-submission system is useful, as is the mailing list. However, if there were a bit more connection between the lectures and assignments, it'd help concepts sink in somewhat better. I don't have nearly as good an idea of how caching works as how shells start programs because I wrote a shell but never had to worry about caching in an assignment.",
    "This course is pretty much perfect. I want to suggest making the class less challenging, but to be honest, I think the challenge is what makes this class great.",
    "Lectures are a bit difficult to follow since the material can be fairly opaque. Overall big picture explanations would be helpful in understanding what the lecture is specifically addressing. Assignments are challenging but really help improve programming skill and abilities.",
    "I would have liked if the assignments focused less on parsing. Many of the assignments were based on an idea that required some interesting code to implement, but generally the difficult portions of the code were described in great detail, leaving little room to discover how to write it on one's own. It felt like a disproportionate amount of the coding time went towards writing mundane parsing code for whatever the input was. I would rather have assignments where the challenge lay in writing the lower level code\/core algorithms.",
    "Strengths: This course really pushes you to be better and it's incredible. Weaknesses: I think sometimes Eisenstat goes a little bit too fast in lecture."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "Yes. Majors have to take it, but anyone who is serious about computer science or even just programming will significantly improve their skills.",
    "Unless you need it for your major; I personally did not find this course interesting. The assignments were non-trivial, but nothing of worth was learned in the long term.",
    "Looking back, I really enjoyed this class. During lecture you often feel lost and confused but by going back over your notes and doing additional reading, you realize the topics covered arent that complicated and are relevant to how you interact with computers. This class is manageable if you start psets early and go to office hours for help.",
    "Yes, this class is a MUST take is you want to think like a programmer.",
    "323 with Stan is fantastic. The psets are challenging, but you get a really clear idea of how things like shells work when you're done with them. Work with friends and start early. It's going to be worth it!",
    "Yes, I would recommend this course only to a student that has the time and passion for it.",
    "It's Stan and it's 323.",
    "Yes, to students who loves programming and wants to understand more basic things. No, to students who just wants to do a little bit of programming to facilitate other things.",
    "You know why you're here. No nonsense. If Stan is teaching this class, even less nonsense. You'll learn everything you need to know and leave the class with your eyes opened to how the digital world around you really works. But you won't really know because there's so much more to learn. Go to lecture, and pay attention in lecture. The readings are very dense and easy to get lost in, because they cover much more than is necessary. Don't start the psets too late. Figure out how early you can feasibly start working on the psets, and then start a few days earlier than that. Expect upwards of *twenty hours* on certain problem sets, if you're good at this kind of stuff. More if not or you don't like gdb. Speaking of: learn how to use gdb and valgrind, right now. Actually, you should have learned in 223, but now it's too late for that. Finally, stay organized, and plan out your work. Some of these problem sets felt like infinitely-spiraling rabbit holes of recursion and linked list traversal. It serves to have a master plan of exactly what you want to do before you even write a makefile.",
    "I would absolutely recommend--if you're thinking about Computer Science or if you know, this is how you can check. I hear that Stan may retire soon, so absolutely take this course with him if you can (don't overload the rest of your classes, but it's not quite a semester than requires guts either).",
    "Not if they didn't love 223. Which they absolutely need to take first.",
    "This is a rite of passage-- you're taking this course because you're a Computer Science major and you have to. So take a deep breath and push through it.",
    "CS 323 has certainly gotten easier than in past years. The one thing to be aware of is that the material covered in class (and tested on midterm, final) is pretty independent of what is done in programming assignments.",
    "I could tell you about the brutal psets, the never-ending hours spent trying to debug LZW, or the Thursday night cram of death every 2 weeks. Or perhaps the hatred you will have of the shell by the time you finish Bash. But you've already heard all that. Chances are if you are looking at this you are a part of the 99% of the class for whom this course is required, so why are you bothering to look at the evals anyway? Are you hoping that some of the evals will you tell you not to worry, to calm your fears and reassure your nerves? Or are you a sadistic bastard, taking pleasure reading over our suffering in this class. One piece of advice I can part to you is this: make (preferably smart) friends early, and edge case the shit out of each pset. I couldn't even count the number of times someone passed the public tests only to get absolutely bodied by the private ones. Ask the TAs for edge case possibilities, depending on the person and their mood, they can reveal helpful info. Good luck.",
    "At the beginning of this class, you are Morty and Stan is Rick. Actually, no wait, you are lower than Morty, you are Jerry. But, just like Morty spends 20 hours a week going on zany adventures with Rick, so will you. Every time you spend an hour debugging LZW, you go one level deeper into the code. And if you think that's stupid, so is your favorite movie. The python assignments are as awesome as TINY RICK and honestly the python assignments took me as long as a rick and morty episode. But Bash.. Bash makes you miss karn SO MUCH. Seriously, this class is as good as watching rick and morty. And deep down, you know you want to be Morty.",
    "You have to take this course to become a good programmer. End of story.",
    "If you wish the become a real CS major, then you have to take this class.",
    "This is a required course for CS majors, but it is also one of the most well taught in the department.",
    "I would recommend this class to another student. It's a great way to improve at programming, because the psets are relatively difficult and force you to write well-structured code. Even if you aren't a CS major, if you want to improve at programming I'd recommend taking 323.",
    "Lives up to its reputation, take it!",
    "As a math\/physics dual major taking this, with very little prior experience with the CS classes at Yale before taking this one, I can at least speak to students outside of CS interested in taking this course. It is by far one of the most useful courses I have taken at Yale, and builds on skills that are absolute necessities for understanding the computational tools used in serious scientific environments. Moreover, it is an amazing exposition into the way that a systems programmer has to think, a type of structured thinking that any mathematician would benefit from being exposed to. I highly recommend taking this course, or its 223 variant if you are a serious physicist\/mathematician aiming to contribute scientifically to your field. Computers and their usage have by now become as integral a part of science and mathematics as Newton's calculus did in the 18th century. More than this, the challenge of this course is fundamentally different from the type of challenges given in other science\/math departments, and any student would do well to learn how to tackle the types problems that Stan gives; they are practical and sure to be faced for any developer in the real world.",
    "This is an excellent course and will make you a better programmer.",
    "Necessary for Computer Science majors, perhaps if you are in STEM with 223 background, and interested in CS you can take this as well.",
    "Absolutely. Best class ever. Not as hard as everyone says.",
    "Yes, I would certainly recommend this course to another student. I found it very challenging, but I think it has given me skills and knowledge that have drastically improved my understanding of computer science and my ability to do meaningful work in the field.",
    "You have to if you are a CS major. Otherwise GET OUT",
    "If you have the choice of taking this course, I don't think you'll gain much from taking this that you didn't already learn in 223 (assuming you took 223 with Stan). The problem sets take a long time (30+ hours for C assignments; 10 hours for scripting assignments) but require less edge casing than 223 assignments.",
    "I would recommend it! It's a quintessential Yale CS course, and I feel besides from getting better at programming and thinking about computers, I got a lot closer with my fellow CS classmates, and it really is a bonding experience. :)",
    "I definitely recommend this course if you are serious about computer science. It gives you a lot of insight into how computers work.",
    "Take it, especially with Stan!! Make good use of the office hours too.",
    "I would absolutely recommend this course, and actually enjoyed it a lot more than 223. It's important to have friends or make friends taking the course as well, as helping each other with problem sets and reviewing for exams. I took the course with 5 credits and max working hours, and it was a struggle, but still doable (I don't think you only need to be taking 3 credits or what the YDN says about this class being hazing). Writing your own test scripts is a super valuable skill that will improve your grades by leaps and bounds, so get someone to show you how to do that.",
    "Yes this is an essential CS class.",
    "Take this class if you are sure you want to do computer science in the future. If you are only somewhat interested in CS, do not take this class as it has a huge workload.",
    "It's required for the CS major. If you take 223 with Stan this class is basically the same thing. The midterm\/final don't count for too much of your grade which is either good or bad. You'll suffer, but you'll be happy. Make friends with your fellow CS majors as you all cry together.",
    "You have to take this course, just do it. It will be a long and rocky path, but as long as you put in the work and try to look back on your problem sets to see what you can improve on, you will end as better programmer. Also, never hesitate to contact Stan if you are stuck with a horrible bug.",
    "Required course for the CS major, but would recommend to anyone who wants to improve their C programming skills.",
    "Yes, 323 is a lot of work, but I also thought it was a fantastic course. The material is very interesting, and professor Eistenstat presents it very well. While it is a lot of work, the horror stories probably aren't 100% true and the workload is definitely manageable as long as you start early and go to office hours.",
    "323 is the Platonic Form of a computer science class.",
    "This course is a requirement for the cs major. The psets are difficult to understand so starting early is a must. The tests are not much of a challenge, even if you don't pay much attention in class.",
    "Yes. While people talk about how much effort it is, I found it challenging but fun. If you know what you're doing, you can definitely finish assignments in much less time than the general reputation of the course would suggest.",
    "Yes! This class is awesome. Stan is a legend. Very good at lecturing and very responsive to questions. The class itself can be challenging but we got two weeks to do each pset so it is very manageable. In the end, what you learn is worth the challenge.",
    "Lots of dense material but really interesting when you understand it. Pretty consistent continuation from 223. Assignments are time consuming and challenging but really push you to improve as a programmer. Definitely not an easy class but is more approachable if you get help from peers\/OHs.",
    "This class is really hard",
    "If you're reading this review, you probably already know what's up with the course. It's everything that you have heard. There are entire essays that are devoted to explaining this course if you Google for it. One thing I will say is that if you ever have any questions or problems, go see Professor Eisenstat. You can email him or set up an appointment with him and he can set you straight."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "323",
  "section": 1
 }
}