{
 "crn_code": "21760",
 "season": "201501",
 "legacy_coursetable_course_id": 31573,
 "enrollment": {
  "enrolled": 72,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC305",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    0,
    10,
    33,
    12
   ]
  },
  {
   "question_id": "YC306",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    2,
    4,
    24,
    25
   ]
  },
  {
   "question_id": "YC307",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    36,
    16
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC304",
   "question_text": "How would you summarize ECON 111 01 for a fellow student? Would you recommend ECON 111 01 to another student? Why or why not?",
   "comments": [
    "Brilliant course. Take it.",
    "Good overview of computer science topics. Weekly problem sets take 6-8 hours. Exams are slightly harder than the practice exams.",
    "This is a good class to take if you are considering CS. People do not like racket because it is not canonical, but it does force you to learn recursion, which is useful. Also, the course has some interesting stuff about hardware and how computers work that seems good to know. This class is also very easy, especially if you have a decent math\/cs background. It is not necessary to go to lecture, but it's not too painful.",
    "CPSC 201 is a fantastic introduction to computer science, regardless of your current skill level. I came into the class thinking computer science was mostly synonymous with programming - Id never thought much about the actual processes within the subject that make it such a complex and amazing field. (The syllabus is all accessible online.) Whether or not you plan to major in something compsci-related, I would absolutely recommend this course, especially if Dana Angluin is teaching again. Angluin really cares about her students, and it makes a sizeable lecture class feel like a seminar. That being said, keep in mind that the weekly problem sets can eat up a lot of time, depending on your previous background knowledge. The professor and the TFs are all very approachable, and there will be someone around with open office hours almost every day. The workload is much more manageable if you start each assignment early and get into the habit of asking a lot of questions. Overall, youll definitely remember the things you learn in this class its very well-taught, and its also an introduction to a subject thats becoming increasingly important in the real world.",
    "I liked CS 201 a lot. It's definitely more about hardware\/computer architecture than about programming. The lectures were very helpful and easy to follow (Professor Angluin uses a chalkboard which slows down the pace) but could get boring at times. The problem sets were interesting and fun to solve. Some course evaluations say they spent about 10-15 hours on each problem set but I found that they only took about 5-9 hours, which is about as much time as she said they would take (on the syllabus).",
    "The problem sets are terrible if you've not had much experience. When you finish them, though, there's this huge sense of accomplishment and it's so satisfying and I feel like I actually learned something - like a whole lot! I think I might even be a comp sci major now.",
    "Despite the frustrations that come with Racket, I understand its value as an instructive programming language, since it definitely made me completely change my method of thinking. As an introduction to computer science, I think the class gave us a good foundation in the field.",
    "If you're considering taking this course, at least shop it. I thoroughly enjoyed the course very much.",
    "I mean, won't be offered in the same format next year, so this isn't applicable. Dana is good. Comp Sci is good. You learn by yourself. I support racket just because it forces you to lose the syntactic sugar and think about the concepts.",
    "Great class for students interested in computer science. Psets take a while but are rewarding, and are broken down step-by-step, which is helpful. Tests are reasonable, esp. if you can do the practice test.",
    "If you're willing to put the work in, it'll be a rewarding experience and you'll learn a lot. The course is well organized, Dana is fantastic, and the material is interesting. Not particularly practical - don't take if you want to learn how to make a website or an app. But a fun and effective way of learning CS fundamentals.",
    "Worth taking.",
    "Great class. Pretty tough at times, but makes you think unlike most classes at Yale.",
    "Solid cs. Took as a non cs major and was very manageable as long as you start psets early enough. Professor is great and help hours are very often",
    "An absolutely fantastic course-- take it. It doesn't directly teach you how to program (not that such a skill would be of great use in a language like Racket), but you learn by programming in the different problem sets. You learn all about different topics in computer science, from computation, to circuits, to computer architecture, to grammars, and every unit is absolutely fascinating. Super interesting, though it is a good amount of work. I'd recommend using the help hours, which are very useful. Overall, you learn a lot about computer science and a lot about how to think and approach problems through functional programming. Also Professor Angluin is absolutely the best person and professor ever.",
    "This is a very solid course. Dana is also an amazing professor.",
    "Great way to learn to think about problem solving differently. Yes I would recommend this class, but only with Dana.",
    "Introductory computer science. Instead of teaching basic programming techniques, this class begins to actually cover CS as a field as a whole. If you wanna do CS, you've godda take this class.",
    "It definitely gives a good overview of various computer science topics and made me learn to think in a more computer science-y way. It was sometimes a bit scary, having never coded before college with only a CS112 background while many other people (it seemed) had been coding for a really long time or were much more involved with the coding scene on campus, but all in all, I think turned out okay.",
    "This class is called an intro class but it's really hard. That being said, it's a fantastic course and the work is totally worth it. I've had very little exposure to computer science before this class, and I really hate long problem sets, but this turned out to be one of my favorite classes at Yale. Definitely worth taking, and Professor Angluin is awesome.",
    "Definitely recommend! Very well thought out class in terms of content progression.",
    "Don't take it unless you are a Computer Science major.",
    "Take this class if you want an introduction to computer science, but be aware that if you have no experience the problem sets will take between 10 and 25 hours every week, and not 6-8 as advertised on the syllabus. The problem sets get really difficult and complicated towards the end of the semester. This is not an easy ride. I liked this class, even though I probably did the worst in it of all my classes. i felt the weaknesses of this class were the disjuncture between the lectures and the problem sets, as well as the range of levels in the class regarding students. I myself was a complete beginner and sometimes needed unto 20 hours on a problem set in order to complete it and still get a 60%, while others did it in 2 hours and got 100%. This can really be demotivating for a student who has to put in a lot of effort. A solution to this would be screening students better before they take the class and make better students take 223 and not 201 as a gut.",
    "This is a great computer science course. The problems sets will take a lot of time, so get in the habit of starting them early.",
    "This course gives a fantastic introduction to recursive programming, to the basics of what a computer actually is and how it operates on the most simple level, and to some of the history of computer science. I would absolutely recommend this course because you leave feeling like every hour you put in gave huge returns in terms of how many new concepts you learned.",
    "Great course. Even though I probably could have placed out of it just fine, the introduction to functional programming is invaluable because it will change the way you think about programming. The exposure to Turing machines, computer architecture, and assembly language was all very interesting. Some of the more abstract language stuff towards the end of the course got a little dry. The problem sets were generally well-designed, although they could feel like busywork at times. They get longer and harder as the semester progresses. One thing I was frustrated by was the fact that after the first couple of lectures, Professor Angluin stopped posting new lecture notes, but didnt mention that the previous years lecture notes were essentially identical and were readily available on the course website. It would have been helpful to know about this resource sooner. At the same time, I dont see why Professor Angluin couldnt have just updated the 2014 notes page and changed the dates so that it corresponded with the 2015 course. It doesnt seem like too much to ask. Professor Angluin was sweet and grandmotherly she conveyed a genuine interest in the wellbeing of her students. I hope to take another course or two with her. The two midterms were unreasonably long given the time allotted. I strongly urge Professor Angluin to shorten them. Some of the problems asked on the midterms also differed significantly from the types of problems on the problem sets, which made the exams difficult to anticipate.",
    "Intro to CS, like most introductory classes, isn't the most enjoyable or interesting. There's a lot to learn, it's very easy to get behind, and it's taught in an archaic language. It's required if you want to major in CS or an engineering, so take it with Dana (if she ever teaches the class again, I hear she's not but she learned everyone's names and had the most class participation I've seen in a Yale class). If it's not required, then it's not worth it if you lack experience. Problem sets can take you dozens of hours and you still might not get a working solution. A lot of the time I felt as if I were in a logic class more so than a CS class. You do get to learn a lot about the inner workings of a computer though if that's something you're interested in. Take this class with friends, especially friends who know what their doing as working together can become paramount to complete problem sets.",
    "I would recommend this class to another if they want to major in computer science because the class gives a good theoretical background for concepts like computability of a problem and running time for different kinds of procedures. It doesn't have a lot of practical application because of the language used, but the ideas are useful. Workload is more than the average class, but resources are available for students to use.",
    "I loved this class. Highly recommended.",
    "I would recommend this class to anyone interested in a rigorous understanding of the very basics of the way a computer works and an very fundamental understanding of what a computer is designed to do."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "201",
  "section": 1
 }
}