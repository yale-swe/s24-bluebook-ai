{
 "crn_code": "20379",
 "season": "201401",
 "legacy_coursetable_course_id": 27990,
 "enrollment": {
  "enrolled": 30,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    3,
    16,
    3,
    2,
    0
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    1,
    3,
    10,
    10
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    19,
    4
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "This is a great class to do as a HU credit if you are at all interested in logic or mathematical philosophy.",
    "Awesome HU credit for the more quantitatively inclined. Definitely worth a look for any Math\/CS major.",
    "Odds are if you're taking this you're a Math and Phil major and have to take it. However, I personally think this class is fascinating, and extremely well taught, and I would encourage others to consider taking it as well. You cover what it means, theoretically, for a function to be computable (using Turing Machines, Abacus Machines, and Recursion). You also prove, at the very end, Godel's fascinating Incompleteness Theorems. Sun-Joo Shin also happens to be an extremely great professor-- she's very organized (with detailed handouts of each lecture, so you don't even have to take notes), very considerate, got a great sense of humor, and she's very accessible.",
    "This is a great class that will get you through the G\u00f6del's Incompleteness Theorems. You'll spend a lot of the semester discussing and proving things about formal models of computation (Turing machines, abacus machines, recursive functions), which can get a bit tedious. However, this all ties into the Incompleteness proofs at the end. Be wary of high enrollment!",
    "This is a great class, relatively light workload, and very interesting stuff. I could probably have done with one more problem set, because there were only three assignments: a presentation, an oral test, and the problem set at the end. It was all fun, though.",
    "First, you learn all about Church's thesis and computability. Then you learn abt. Godel's theorems and Church's theorem. You do Undecidability of First Order Logic in two ways and incompleteness proofs for arithmetic Godel's proofs in two ways.",
    "The first part of the course pertains to computability and the second part to the incompleteness theorems. Sun-Joo is great and the material is fascinating and important, so it is definitely worth taking. I took both First Order Logic and Mathematical Logic before this course, and although they are not required I do feel like they helped me understand things one level deeper. One thing to note is that the class seems like very little work in the beginning since there is actually no work. However, basically after spring break the increase in work load can be very surprising. Also be careful -- Professor Shin is not afraid to ask very difficult questions on the Oral Exam.",
    "YES !",
    "Computability and Logic is an extremely interesting course with a light workload, although that doesn't mean it's easy. The course starts out with a little mathematical history and set theory, then turns to the notion of \"computability\" for the bulk of the time, describing different attempts to characterize what can be computed and what can't (Turing machines, etc.) and proving that they're equivalent. Finally, using some of the concepts we've picked up in examining computability, Godel's Incompleteness Theorem's are proven. For most of this time, there is no explicitly required work at all, but expect to devote three weekends to intense studying near the end--first for a group presentation, the second for an interview to make sure you understand the material, and the third for a take-home final. It can get a little dull in the middle, but for the most part the course is fascinating, and the professor is fantastic. I highly recommend it.",
    "For me it was a required course, but I would definitely recommend it to others if the material sounds remotely intriguing. In particular, if you don't need to take Math Logic and are interested in the same field, this course is a great choice. It's definitely technical but very philosophical at the same time. If you do end up taking this course, do yourself a favor and please please please stay on top of your work. Since there are no weekly assignments and the material is not easy, it can be very easy to fall behind. I know I did and was hit hard on the oral exam. But definitely take the course if you're interested!",
    "This was a fascinating course on more advanced topics in Logic. I enjoyed the material on Turing Machines and the rigorous proofs for many topics in computability. The use of student presentations to go through the equivalence of Turing Machines, Abacus Machines and Recursive Functions was quite effective. At times, Sun-Joo asks you to work without her help on challenging proofs, but this proved to be a worthwhile learning exercise. The final take-home exam was very fair.",
    "Lectures, a couple of individual assignments, and a professor who really cares that you learn, even though she doesn't do too much to force you.",
    "For a CS major, this is a great way to fulfill one of your elective requirements. It's a nice break from all of those programming problem sets, and is probably taught better too. If you're not a CS major or not trying to fulfill a major requirement, I would be more hesitant about this class. While it appears to be a seminar (it's an an hour and fifty minutes one time a week), it is taught like a lecture. It makes sense for the material, but can be pretty hard to sit through.",
    "If you like logic and have taken Mathematical Logic and liked it, take this course. Otherwise, start off with less demanding courses and work your way up to this first.",
    "Computability and Logic covers interesting material. It doesn't focus on the Incompleteness Theorem (which is the most famous result from the course) as much as you might expect -- it spends most of the time on proving the equivalence of three computation devices (Turing Machines, Abacus Machines, and Recursive Functions). It's still interesting though. I recommend this course. Even though it's not strictly necessary, I recommend taking PHIL 267 first. The workload is low; there are only a few assignments, but they can be pretty tough if you don't follow the course material carefully throughout the semester. Sun-Joo Shin is very nice and is a helpful instructor."
   ]
  }
 ],
 "extras": {
  "subject": "PHIL",
  "number": "427",
  "section": 1
 }
}