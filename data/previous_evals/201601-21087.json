{
 "crn_code": "21087",
 "season": "201601",
 "legacy_coursetable_course_id": 36625,
 "enrollment": {
  "enrolled": 68,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC305",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    1,
    3,
    20,
    28,
    6
   ]
  },
  {
   "question_id": "YC306",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    1,
    7,
    26,
    15,
    9
   ]
  },
  {
   "question_id": "YC307",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    44,
    12
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC304",
   "question_text": "How would you summarize ECON 111 01 for a fellow student? Would you recommend ECON 111 01 to another student? Why or why not?",
   "comments": [
    "I would recommend it. After CS50, it felt nice to take things slow and spend a week to learn one concept and one concept alone. I feel I know the inner workings of a computer much better and understand how code does what it does. It's a good step to take if you're going to major in Comp Sci.",
    "If you are a CS major, you have to take CS 201 regardless. You probably will not have to take it with Slade, which means you should count yourself lucky. The course needs to be restructured to be in a more useful language, but the professor was the greatest weakness.",
    "This class does a great job teaching you core CS concepts and ideas. It is true that Racket might not be the most useful language to learn, but it certainly made me comfortable with functional programming and cemented some of the most elementary concepts of how computers work in my mind. I would recommend this class to anyone who is even remotely interested in how computers work.",
    "Introduction to Computer Science, a lot of recursion, important class",
    "If you're a CS major, absolutely. In addition to it being a requirement, it gives an important base-level understandings of CS concepts. Otherwise, meh, the class is clearly designed for CS majors and not for people just wanting to learn some coding skills to apply to other areas. Also a pretty high workload as psets take forever, but that's always true of CS classes.",
    "Recommend mainly for people planning on doing the comp sci major, or taking it as a pre-req for another class. Not just for fun because Racket is a useless language in the real world",
    "This is a required course for the major. If you have taken CS50, it will be a new style of coding, but feel easy in comparison. I would recommend taking this course if you are interested in majoring in Comp Sci or if you have an interest in gaining a better understanding of computing, which is a valuable\/necessary skill for any field.",
    "Absolutely.",
    "Good class for learning recursion. 8-12 hours of work a week. Slade is helpful and gives hints for how to work out the psets. Material is interesting if you like the low level stuff about how computers actually work.",
    "I'd definitely recommend it. I came in with literally no programming experience and honestly it was fairly straightforward. The homeworks aren't particularly challenging: they took me roughly 5 hours a week max, and the average wasn't much higher. Tests are exactly the same as the practice exams, so straightforward. Just know that the class has more to do with computer science concepts (Booleans, computability, circuits, that sort of thing), than actual programming. My only gripe is that the grades in this course are ridiculously high, so the curve will be brutal I'm sure. Slade is a great guy, occasionally funny, but lecture is more or less optional.",
    "Take CS201 if you can, even if you're not a CS Major. You will learn so much about how computers work, and will be amazed by everything that you come through. Professor Slade is a great person, but to be honest, he is not a great instructor. I would recommend reading all the notes that are posted online instead of going to lectures to save your time.",
    "It was really hard and not for anyone not completely sure about majoring in Computer Science. It can be a lot of work depending on how well you understand\/can teach yourself the material.",
    "Intro to breadth of CS. Opportunity to learn Scheme variant.",
    "Weekly sets take about ~7 hours",
    "I really enjoyed this intro class. Slade was an enjoyable teacher whose tests were fair. It's a nice intro to some more theoretical computer science topics.",
    "CPSC 201 is a good intro CS course that focuses on theoretical concepts, not necessarily how to build an app. It teaches you how to think in a CS way, which is good for life experience. Psets are also pretty fun.",
    "The major point of this class seems to be understanding recursion well. Other than that, there isn't much to it. You get basic knowledge of circuits, Turing machines, and how computers work, but you could also just google those things to the same degree we learned about them.",
    "CPSC 201 covers a lot of very interesting topics in computer science, although only at a surface level. The problem sets are enjoyable and the content of the course is cool, but not immediately practical. I would recommend the course to another student who is interested in pursuing computer science or learning more about the field, but not for a student who needs highly practical skills (besides Unix).",
    "CPSC 201 is a great class at learning basics, however you don't learn how to code with a useful language",
    "Nice introduction to topics in computer science, and a great way to determine if this is a field you want to study further.",
    "Great class - material is very interesting and focusses on some theoretical aspects of CS that one might not cover in another class. Also, professor Slade is a great professor.",
    "So this course is not a programming class. You won't learn any useful languages or techniques for industry. This is the first course in a major that is heavily leaning towards research in the computer science field.",
    "CPSC 201 is not a good class unless you've pretty much decided on majoring in CS, in which case it's a mediocre class. I took CS50 the previous semester, where I learned vastly more material in the same amount of time (albeit with slightly more effort) -- to anyone split between the two, I would highly recommend CS50. The problems with CPSC 201 are numerous, starting with the fact that you go through the middle half of the course at a snail's pace, which makes it well-nigh impossible to pay attention in class. A more fundamental flaw is the fact that much of the class has to do with the lowest levels of computer science and computer architecture (e.g. Turing machines, booleans, truth tables, logic gates, circuits, and assembly languages), but there is no hardware component to the class (nor should there be). That means that you end up writing simulators to the things that hardware does in real life. In my opinion, the interesting part about these elements (e.g. circuits) is that we can build things that physically implement them (hardware). The logic of these elements on the other hand, which is what simulators emphasize, is neither complicated nor terribly interesting, and computer scientists generally just take for granted that they exist thanks to electrical engineers without worrying about their implementation. So in trying to do both (talk about hardware without dealing with hardware), I think CPSC 201 fails to provide a compelling introduction to computer science. (The main exception to this is the assembly language problem set, which, low and behold, IS a computer science topic and can be implemented meaningfully in code.) Zooming out, this course isn't a ton of work and it won't ruin your life if you choose\/need to take it. But (with the possible exception of CS majors) it's definitely not the most interesting thing you could be doing with your time.",
    "This was a pretty good class. There's a lot of really interesting material, the problem sets were always doable and interesting, and Professor Slade is very knowledgeable on all the topics. He's also pretty helpful if you have any questions. Lecture was not always super engaging. You might have to put in a little extra work at the beginning to learn basics, but after that it's not too difficult. Overall it's worthwhile (and probably requires) if you're interested in computer science.",
    "Would recommend only if you're a computer science major, mostly because Racket isn't a particularly useful language (although it does help you understand the science of computers).",
    "CS201 is a strong intro computer science course. You survey all the important CS topics that you will dive into later on in a CS major. You do so by simulating computing structures (turing machines, boolean functions, circuits, assmembly code, compilers), within a Racket framework that is fun and elegant (you'll learn to love recursion!). The exams are similar to the practice tests, and there is never a huge curve-ball thrown, which is nice. If you work hard, you can accurately predict that you will do well, unlike many other courses. Slade, the professor, is an endearing guy who takes the class on a rigorous yet comfortable learning curve. I would recommend this course over CS200 for anyone at all serious about computer science.",
    "Take this class if you have a prior basic understanding of programming and would like to understand the fundamentals of how computer languages (and computers themselves) work. The psets are quite interesting, and you end up building some pretty cool programs. Workload was one 6-10 hour pset a week, and exams were all very reasonable. As a non-compsci major, I really enjoyed this class; don't be scared off by the weird computer language (Racket) or the intense-sounding topics. The class builds upon itself very linearly, and I think it was quite straightforward for most people, including myself.",
    "CPSC 201 was a fantastic course, which gave me a tantalizing taste of of the basic principles of computability, recursion, sequential logic, machine code, and linguistic processing. It is an overview in computer science, not programing, and don't expect Racket to help you accomplish anything outside the class. That said, Professor Slade does helpfully focus on Unix command line, which are useful tools for programming. Make sure you read the lecture notes carefully.",
    "Solid intro, very fun problem sets, clearly presented and interesting material. Lectures are dry and follow the lecture notes.",
    "A great Computer science class, not a programming class. Took a lot of time, and as a non-major it was hard to put all the time in.",
    "Great course! Highly recommend even for non-majors. Racket is perfect for learning recursive behavior and is very noob-friendly. Slade is clear and methodical in lecture.",
    "I would recommend CS201. Several warnings: it is not an intro CS class, it is an intro computer architecture\/computer logic class. If you want to learn about how RAM works at a fundamental level or solve Turing machines, take this, if you are looking for a functional CS class go for CS50 or skip directly to CS 223. Also, Slade is not a great professor. He is neither inspiring nor particularly good at explaining things. Going to class is a waste of time and you will gain more from reading the lecture notes on your own time. All that said, the material in the class is fascinating, the lecture notes are very well written, and the p-sets interesting and you feel like you learn a great deal. If you are ok with the non-standard class format, then this class can be a lot of fun; despite all the issues it ended up being one of my favorite classes of the semester.",
    "The psets for CPSC 201 were really fun. Coming in from CS50, I feel like 201 psets are less technical\/practical with random googling. Instead, a lot of them are like fun riddles you have to solve. Overall, I think that's where the main weakness of this course, though I personally thought the material was really interesting (looking back). It isn't really practical and instead you're exposed to a lot of different topics such as booleans, turing machines, regular expressions\/dfas, etc which I don't feel like will explicitly come up later that often during the major (I might be wrong). You do get really comfortable with recursion in Racket which will probably be helpful. Another thing is the lectures can be kind of dull and since the lectures are posted online, it can be a challenge to go to class. It's a weird class in the sense that it's hard to take notes since so much of the content is posted verbatim online. Also, each week's pset goes along with a unit, so the psets aren't too bad if you read through the only html lecture notes.",
    "CS 201 was a great course. It really piqued my interest in Computer Science. I had come into it thinking that Racket (the not-so-widely-used programming language we had to learn) was going to be a drag, but I really found it quite intuitive and it has given me a much better understanding of other more widely-used programming languages. In the class we not only do programming but we talk about Turing Machines, circuits, 0's and 1's, and how it all has to do with the computers we use today. It was really fascinating. Professor Slade was a good teacher and very humorous. He knew his stuff. There were resources available everywhere to help us study for exams and the class was just in general very nice and organized. Also you don't have to go to lecture because there are lecture notes and transcripts for every class. If you have any interest in Computer Science I would definitely take this course. It's a pretty smooth ride and you learn a lot!"
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "201",
  "section": 1
 }
}