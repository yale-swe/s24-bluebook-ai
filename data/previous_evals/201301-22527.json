{
 "crn_code": "22527",
 "season": "201301",
 "legacy_coursetable_course_id": 20855,
 "enrollment": {
  "enrolled": 51,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    4,
    4,
    24,
    10
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    1,
    4,
    15,
    18,
    4
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    26,
    16
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "CS 201 is a lot of fun at some points and huge pain at others. For the first quarter, lectures were pretty interesting and easy to follow but later on it became pretty confusing. The midterm and final are both extremely difficult, not necessarily because of the content but because they had to be completed in 50 minutes.P-sets are on the whole extremely difficult. I had to go to office hours for 3\/4 of them. Lectures do not necessarily give you enough skill to complete them.",
    "I would recommend this course to those thinking of majoring in computer science.",
    "This course was excellent. It made me think about computer science from the ground up, and it did so in a very logical and compelling manner. The problem sets expanded my knowledge (rather than drilling skills I had already learned) and the lectures were engaging.",
    "I absolutely recommend this course. After taking it, you will not only be much better at thinking like a programmer, you will understand how, really, you interact with the computer (on a theoretical level, of course) and you will understand the fundamentals of how the computer works. This is a very interesting course for anyone, and an essential course for those who need a base in computing.",
    "It's a really good class because the material is fun, and the problem sets are absolutely addictive. But don't take it with Prof Rushmeier. She is just not a very good teacher, and I felt like she deliberately set people up for failure in this class. The exams are basically IQ tests: they're super-long and you have to answer as many questions as you can, so if you don't know all the answers instantly, you're toast. The whole thing is basically a way to force a bell-curve by making sure only the geniuses do well. Oh, and the first problem set is the hardest. Start it early! I generally spent maybe 10-15 hours on each problem set, but double that on the first one. The last problem on that first set is basically a population control mechanism.",
    "This class is fun and rewarding but challenging. If you want a challenge, it's really useful and important stuff to know. It gives you an appreciation of the elegance of computers and how computer science built up from simple systems to the complex computations we have today. Beware of taking this with 4 other classes. Start the problem sets the day you get them. Like CPSC 112, it's challenging but it pays off and you'll be glad you took it.",
    "A thorough introduction to the concepts of computer science taught on an even playing ground in a language new to all students: Scheme. While Scheme isn't really useful in the real world, it provides great visualization and simulation potential for standard computer science concepts. The workload wasn't overly intense, but it was significant. The problem sets were addictive and stimulating.",
    "I would recommend this class to anyone interested in going further wish computer science. It gives you a good base of what is needed to go further. It's not about writing code as much as it is about learning computer concepts - such as memory, algorithms, and booleans.",
    "This was an extremely interesting and well-taught class, and I found it useful even as a senior political science major who may never take computer science again. The lectures were clear, the problem sets were actually fun. I did think that the exams were weirdly different from the rest of the class, but they weren't too stressful. I would recommend this class.",
    "The course was a great introduction to computer science, and I would definitely recommend it to students with a solid computer science background. The topics covered are very interesting and Professor Rushmeier was extremely kind and engaging. She makes an effort to know every student personally, and by the end of the semester, knew us all by name. You use Scheme for the assignments, which is a great learning experience, but, at the same time, can be extremely frustrating and difficult to use. Prepare to spend a lot of time debugging and working on problem sets. There were 7 problem sets this semester and they took anywhere from 8 to 20 hours. Ultimately, if you're genuinely interested in computer science, definitely take the course.",
    "It is a useful class. Don't expect it to be like 112 though. Though programming is a large part of the Psets, the curriculum is aimed more at introducing you to the theory behind computers.",
    "Problem sets are fun and manageable, maybe somewhere from 5 to 8 hours each. Lectures, however, get quite tedious.",
    "This class is very time-consuming, so only take this class if you're really interesting in Computer Science. Although the problem sets are supposed to only take \"5-8 hours\" (according to the syllabus), they can take 15 hours on average a week. I really enjoyed the problem sets though. You just have to be willing to commit to this class - debugging can be a huge pain and time-consumer. I thought it was a rewarding class overall.",
    "It is a wide ranging introduction to computer science and many topics about the fundamentals of computing. I would recommend to take it in the fall with Angluin who is clearer",
    "The psets were fun (a couple were a little stressful, but most were fine); the debugging wasn't nearly as bad as for ENAS 130. Definitely go to the Zoo and work with people and use the TAs at least for the first couple psets so you know you don't have to freak out about them.Prof. Rushmeier is nice, but her lectures are kind of boring. I've heard Prof. Angluin is amazing, though. Maybe try to take it with her instead.",
    "What a great course. Very thorough and interesting lecture notes are posted online, so you can take the course at your own pace if you're more into reading than going into class. Exams and homework are straightforward and fair.",
    "This is a great class. It's extremely interesting. It is not programming. Basically you learn about the following topics: recursion, turing machines, boolean values and circuits, computer memory, basic computer programming in binary, languages, object oriented programming, and algorithms. The tests are not very programming heavy; these test you on the above concepts. This is very much a computer science course. The way Scheme comes into play is because you use these concepts in the homework and pretty much write simulations to mock the topic you are covering, and you do this in Scheme. Scheme can suck, but I think it a very cool way of thinking, and the recursion concept is necessary. The class was 1\/3 homework, final, and midterm. The tests are curved to an A- at the median. The tests are pretty much extremely hard; they are meant to have 70 averages, medians. But it is actually okay because partial credit is thrown everywhere, and the class is curved. BE WARNED: the homework can be extremely hard. I know some people finished them pretty quickly but I struggled with this class and had to start starting the homework 4 days in advance to finish them because the TAs are NOT as helpful as they were in CPSc 112. Also, I think Holly is a good teacher. She wasn't too approachable (although I never checked out her office hours), but I thought she taught the concepts fine. One last thing: don't let this class discourage you from further computer science study.",
    "Yes, I would recommend taking this class. It\u00e2\u0080\u0099s not a great class to just learn programming because you use Scheme which is a useless and annoying language, but you learn a lot about the fundamentals of computer science and how computers work, which is very interesting. There was one problem set that was very difficult and one that took a long time, but the other five were very manageable. The two midterms were difficult and you are under incredible time constraint, but they were graded on a pretty generous curve.",
    "Only take this class if you are gonna major in CS. Not worth the trouble otherwise.",
    "Do you wonder how computers work? If you have an ounce of curiosity in your soul, you should, and so you should take CS201. In this class, you will build a computer--not out of wires, but out of ideas (and a few lines of code). If that sounds like fun, take the class.",
    "Absolutely, I took it after taking Math Logic and Computability and Logic in the Philosophy and found there was some overlap, but takes a much more practical look at the material.",
    "The course is an introduction to some important ideas in computer science, and the students practice the material through psets using the Scheme language which is a little hard to get used to at first. But don't get frustrated in the beginning, since the last problem of homework1 is probably the hardest of all homework problems (though probably not the most annoying). Professor Rushmeier is very kind and accessible. She and the teaching fellows offer plenty of help. The 2 exams have a lot of problems but only 50 minutes to do them, especially the second (final) exam. If you are interested in CS, you will have to take this class, and you will probably enjoy it.",
    "This class is a HUGE jump from Intro to Programming. Scheme is a much more difficult language to work in, the concepts are a lot larger, and the tasks are more intricate. Just because you were good at Intro to Programming, it does not guarantee that you will do well in this class. However, on the flip side, the curve is very generous.",
    "This is a good course. It provides a decent overview of the topics of computer science and the organization of computers\/languages from top to bottom, as well as teaching Scheme. Its weaknesses are that it seems pretty impractical (for instance, I have heard Scheme is never practically used due to its over-consumption of memory, and the whole course is very theoretical) and vague (we covered a lot of material in a really shallow way such that we did not have to really understand any of the topics to do well. I found that although I was succeeding in this course, I had not learned many basic topics when discussing them with others from different schools.) The method of forcing us to learn a lot of these topics had to do with our implementing them in Scheme, but I felt that this often turned into a lesson in Scheme rather than in the concept (for instance, when learning assembly language and machine code, we never had to write a program in either of those for homework.) Perhaps due to thissomewhat disjointed nature of the course, I felt that many of the topics were not taught in an organized manner during class. The notes seemed rather scattered and some of the lectures could have really benefited from the use of power points during class (for instance, when discussing the actual make-up of the parts of a computer.) However, despite all of this, the course was interesting, and I think I did come away with a theoretical overview of the topics covered in computer science. Also, really helpful notes were posted online--use them!",
    "For people who want to learn how to code but not major in CS I dont recommend taking this course. 201 provides you a foundation in the techniques and theory of computing to prepare you for more advanced treatment in later courses. However, on its own 201 is largely useless. Instead you should learn independently through a site like Udacity or Coursera. The Psets also take a very long time so its a significant work investment to learn a language like Scheme--which no one on Earth actually uses.",
    "CPSC 201 is the department's primary intro course that surveys a number of key topics in computer science while working to conceptually build a computer from the bottom up. The use of Scheme for the course may at first seem frustratingly random, but be patient and the language will grow on you. Once you understand how to use recursion, the course is completely manageable. I recommend the course to those with logical minds bent on puzzle-solving. This course was probably my favorite this semester because I found the psets to be quite fun and not terribly time-consuming. I did notice that certain psets made more sense for some people than for others so the key is to start each one early enough to allow for a buffer.",
    "A great intro course if you want to understand how computers actually translate words into instructions and the how logic gates solves problems.",
    "This is a very interesting class but also takes a lot of time. If you want to take this, make sure the rest of your course load allows for approximately 15 hours a week of work on problem sets.",
    "I would recommend not taking this class if you are not considering majoring in CS.However, this class will tell you if you want to major in CS or not. The problem sets are generally a lot of work and cannot be done in one night. Scheme is difficult to work in, and not entirely intuitive. Good luck."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "201",
  "section": 1
 }
}