{
 "crn_code": "23111",
 "season": "201701",
 "legacy_coursetable_course_id": 41798,
 "enrollment": {
  "enrolled": 80,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    1,
    12,
    23,
    20,
    4
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    3,
    10,
    16,
    21,
    11
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    1,
    5,
    13,
    22,
    19
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    2,
    2,
    17,
    24,
    15
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    5,
    19,
    25,
    8,
    3
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    7,
    29,
    17,
    6,
    1
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "I learned how to code in C++.",
    "I did not learn much because I had already taken many CS classes. I only took this for my major",
    "tbh didn't learn much",
    "C++ Matlab",
    "Basic computer science skills. We focused on C++ the entire semester with about a week of MATLAB at the end.",
    "I had already had a decent amount of experience coding in python. This class really introduced me to C type language and filled in a lot of my general programming gaps.",
    "It was very cool learning how to code for the first time.",
    "C++ and MATLAB, mostly the former",
    "I gained a solid base in C++ and some introduction to Matlab. I feel confident that I could expand my knowledge on my own now.",
    "I learned the basics of C++ and Matlab. The course is not very in depth, but you do get a broad overview. You will not learn how to code like an expert, but you will learn something and gain a first look at code. That being said, the curriculum is very similar to AP Comp Sci so if you already have a coding background, maybe take a harder class.",
    "coding!",
    "I learned how to code in C++. The course was supposed to also cover Matlab, but we learned very little.",
    "Learned intro to C++",
    "Learned how to program in c++ on cloud9. The course is really great at helping you learn to problem solve and approach coding problems from different angles.",
    "Lots of coding in C++!",
    "I developed a lot of basic coding skills in this course. I became fairly proficient in C++ and learned a bit about Matlab.",
    "I learned essential programming language skills and in the fundamentals of machine language.",
    "I learned the basics for coding in C++ and elementary matlab.",
    "I learned the coding languages C++ and a limited amount of MatLab. Basic intro level logic surrounding computer science was taught as well, but this was review for me.",
    "How to learn very hard subject matter exclusively from the textbook and the TA's.",
    "Really got a good intro to C++... even if i wasn't that good at it myself",
    "To start, I learned a great deal about computer programming. I had almost no experience coming in and found ENAS 130 to be a wonderful intro class. We learned c++, which I've heard from my CS friends is a pretty commonly used language as well as MatLab, a language which aids my data analysis skills as well. I would recommend the class to anyone interested in an intro to computer science.",
    "I definitely learned more from the psets than I did during lecture. The class was useful, be didn't go super in depth.",
    "Basic coding in C++, syntax, loops, functions, classes, structures. Logical thinking.",
    "I gained insight into how to use C++ in order to complete simple-intermediate level tasks (i.e. sorting, analyzing data, employing algorithms, etc.). I also learned a very basic level of MATLAB.",
    "I've never done computer programming before, so this class was my introduction both to the language of C++ and how to code, in general. I learned C++ syntax and I learned how to think about problems logically in order to come up with a way to solve them using computer code. I also learned just how much time and effort it takes to write, compile and run working code. I experienced the frustration of code that repeatedly doesn't work, and the intense ecstasy of code that runs properly.",
    "I came away with a basic knowledge of programming and of C++, which I am very pleased with.",
    "In this course, I learned the basics of C++ and how to go about learning MATLAB. Most of the course was spent on learning C++ and how to approach computer programming, especially for calculations. This is a great class for beginners, I'd never programmed before and thought it went at a really good pace, and there was a lot of support. A couple days were spent on MATLAB, but this part was taught by a TA and wasn't as interesting, and we did less with it. Sometimes I was worried that I was falling behind, but with all the support, it was easy to catch up. I was never frustrated with this class, and felt confident with the work.",
    "This course helped serve as an introduction to C++ and Matlab, which additionally serves as an introduction to programming in general. With this course, I was able to learn the basic mechanics of programming, computer science, and its applications to engineering in general.",
    "Learned how to think like a coder. It was really helpful to think logically and to learn how to write code. I think it set up a good foundation for further study in CS and I feel less intimidated by coding now.",
    "I learned a bit of C++ and a bit of Matlab! It was almost entirely self-studied using StackOverflowExchange, and the help function of Matlab.",
    "I primarily familiarized myself with the jargon of high-level coding languages (namely C++); while the course was introductory, I feel like I will be able to learn the syntax of new languages thanks to the grip on coding terminology this course provided me with.",
    "I learned about C++ and I changed my mind about Computer Science-- I used to be afraid of CS but now I'm really interested in it!",
    "Basic C++ coding (syntax, structure, etc.), and a little of MATLAB. Having learned the basics of other coding languages before ENAS 130, I can say that the material learned in ENAS 130 is very basic\/fundamental and can be easily applied to other languages that are similar (Python, Java..)",
    "Having never coded before, I was introduced to C++ and the nature of coding.",
    "I learned how to code multiple problems in C++. I am now able to visualize a solution to a given prompt that might involve sorting, opening and closing a file, and performing multi-step mathematical operations.",
    "I learned basic programing structures in C++ and was introduced to coding in MATLAB",
    "We learned C++ and a little bit of Matlab. A good introduction which starts with the fundamentals of programming theory.",
    "Developed coding skills",
    "Even though I had previous experience with C, I learned during the course how to use specific features of C++. However, I believe the approach was not the best for a large lecture and we didnt have time to explore Matlab and Mathematica."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "I would have liked if we were able to spend more time learning matlab.",
    "I came into the class with no coding experience and I was worried I would easily fall behind most others in the calss. The help sessions and curriculum enabled me to fully learn the material.",
    "This is a very easy course if you already know how to code",
    "The exams were good as they were taken on a computer (in a computer programming course). The Matlab section felt rushed and a little bit of a waste as the help section for Matlab is very user friendly as it is.",
    "I though this course was great at being a true introductory course to computer science. It felt very manageable and I feel like I truly understand the things that we learned. It would have been nice if the course picked up toward the end of the semester, it felt like we were moving pretty slowly the whole time. I think we missed out on learning some concepts that are pretty essential.",
    "Although it was great that we did a lot of the psets in class, I think we could've gotten more out of the class if we did other exercises or went over the methods more in depth.",
    "Plenty of resources to learn the code and well structured course.",
    "The course was a little too easy and I often did not have to pay attention during lectures and I did not come in with that much programming knowledge.",
    "The class was fun and relaxed. Professor O'Hern is a really nice guy. However, the teaching was mostly through examples not through explanations of the logic behind coding. Thus, depending on what kind of learned you are, this may or may not be a good course for you.",
    "lengthy lectures, but good practice",
    "Professor O'Hern definitely does a good job of explaining the coding concepts in class. I found his lectures to be far more useful than the book. I think the course was very well set up to teach C++ to beginners, I just wish we had learned more Matlab.",
    "Strength- problem sets were useful in learning concepts Weakness- lecture was not so helpful, didn't really cover some important topics like pointers",
    "The course is enjoyable but it's hard to learn everything you need to know (especially for the psets) in the lecture. You need to take time to learn and practice on your own to do well. The professor and TA's are all amazing. They're very helpful and helpful and made learning the material more enjoyable. They're also very dependable. A weakness though, is that there was probably more room to learn topics more in debt. The course might also be better if when topics are introduced, the presenter writes out the code and explain the process in front of the class instead of having the code already written and then reading through it.",
    "Great lectures and lots of office hours. Loved it",
    "This was a great course. It wasn't too difficult but also we learned a lot--not too many psets, plenty of time to complete them, we did a lot of the problems together in class, but we learned a lot and really mastered the skills. My only real criticism is that Matlab seems actually more useful than C++ and I wish we had gone into it more.",
    "I felt it was a great introduction to the coding and understanding how a computer really works. The class was designed in such a way that I felt I gained practical skills that will help me in the future no matter what discipline I pursue.",
    "It was a fairly easy course since I had background coding knowledge in Java, and C++ is similar. I feel like we should have spent more time on Matlab.",
    "I wish this was more geared toward engineers as the course name suggests. Perhaps spending more time on other languages such as MatLab would help.",
    "I think the pretense of doing Matlab wasn't great--it took time away from C++, but not enough time that we actually learned any. A great strength of this course was the fact that class time was structured around helping with the problem sets. I actually think this was very conducive to learning coding, which is a skill you kind of have to *do* to understand. I also thought the help sessions every weeknight went the extra mile to help us get the material.",
    "During lectures, it would be better to walk through how to write each code, rather than just expecting us to do it on our own. Considering that the professor said it was a strictly beginner class, he should have walked us through it more, but I think he thought he didn't have to because a lot of the kids in the class had a lot of coding experience so they didn't need the step-by-step explanation.",
    "there was a good mix of lecturing and doing in class exercises",
    "I liked this class and its structure a lot. I particularly liked the format of the midterms, mainly that we were allowed to test our programs. A test on pen and paper would result in a syntax test, a set of skills far less important than testing knowledge of logic and structure. I wish we had more time to spend on MatLab. I would have been fine with more intensive P-Sets in order to finsih c++ faster if that gave us more than one week to spend on what it a very useful language.",
    "The strengths are the psets, practicing writing code was the best way to learn. I think the biggest weakness was the format of the lectures; it was difficult to pay attention and sometimes the entire lecture was just used to go over the pset questions which was kind of a waste of time if you'd already finished the pset.",
    "This class well-run, there just wasn't enough of it. For example, there was only a homework assignment every 2 or 3 weeks, so it was hard to test out your skills on your own, and sometimes the professor did the homework in class for us. The teaching was clear, but the order in which things were taught was confusing. I also do not think we covered enough material. I am concerned to know that people graduate from Yale with Engineering degrees with this class as their only coding experience. However, I would like to emphasize that Corey was very approachable and for the most part very clear, and the TAs, especially Alex and Jennifer, were fantastic!",
    "I absolutely loved this course and would venture to say that it's probably one of the bet introductions to programming at Yale. Professor O'Hern was extremely nice and generally explained concepts very well (the course went relatively slowly, but it enabled me to really understand the concepts and see lots of examples). I felt like I certainly gained a good, working knowledge of C++ and would feel confident at implementing a variety of simple-intermediate programming projects (and would also be able to learn some of the more advanced concepts on my own). The workload was also really not too high (most of the psets were worked on in class as examples, and exams were open book and very reasonable) which made the course low stress while still being really worthwhile. The only weakness that I can think of (besides the 9am start time) is that we only got in one week of MATLAB. I don't really feel as though I got that much for the MATLAB segment of the course as it wasn't really long enough to become at all confident with the software. I think there would be two possible ways to fix this: 1) Just make the course entirely in C++ and just go over some more advanced concepts in the last week or 2) Find a way to shorten the C++ portion by a week or two and then spend 2-3 weeks on MATLAB.",
    "Strengths: The most helpful part of this class was when the TAs taught class, or when they held help sessions to go over problem sets or concepts from the course. The TAs were truly excellent and their attitude of helping students learn to code by doing, answering questions along the way, helped me the most in understanding how to code. Having help sessions almost every day of the week, and having the TAs and professor constantly on hand by email, made it rather easy for me to get frequent help when I needed it. Weaknesses: The lectures were not that helpful--not because the material presented was irrelevant, but because the professor's habit of putting up sections of code on the projector and going over it (rather quickly, I thought) did not really give me enough time to absorb or understand the material. The result of that was that when he had us do in-class exercises, I often had trouble even knowing where to begin, because I didn't yet understand the new skill he was having us learn. I wonder if it would perhaps be possible to post the code we are going over in class online before, rather than after, class, so that students could follow along better during lecture and annotate the code on their own computers while the professor explains syntax and logic. The lectures I found most interesting were the ones in which the professor worked on problem set problems with us, because usually in those sessions I had already had a chance to think about the problem on my own, so I was mentally better prepared to receive his feedback\/comments. Also, I wonder if p-sets could be due at a different time, like Fridays instead of Wednesdays each week. Sometimes I felt like I needed just a few more days after lecture to absorb the material and apply it to my problems.",
    "The strengths of this course is the professor, who makes sure the class goes at a reasonable pace and is very patient with explaining concepts to the students, the majority of which haven't programmed before. The TAs are also very willing to help and are really dedicated to getting students to understand during the office hours (which happen Sunday-Thursday each week). The tests are fair and the practice tests prepare you for them; there are no surprises and you can really feel secure about what you learn in the class! The one weakness is that when we learned MATLAB it didn't really feel like we were taught anything substantial, only how to use the search feature in order to get a guide on how to code.",
    "I think that a major difficulty with this course is that it is a computer science lecture course at 9am, which is not particularly conducive to attendance and engagement during the course. Prof. O'Hern does a good job of encouraging a problem-based lecture rather than a notes-based lecture, which is more applicable to the work that we were doing. Additionally, the textbook used for the C++ portion of the course was very easy to follow, so as we were doing problems in class, following along in the textbook was very easy.",
    "I liked the C++ portion! I learned so much! And Prof O'Hern made everything easy to learn for people like me who have 0 background. Wish we learned MATLAB better. It was taught really quickly and I don't feel confident in it at all.",
    "This class isn't taught well to beginners. I had a bit of coding experience from taking AP computer science, which was also true for about 2\/3 of my classmates. If you hadn't coded at all, the basics weren't covered well. The conceptual framework of methods, classes, reference variables, etc wasn't explained very well. Maybe check Khan academy or code academy for some tips? I haven't actually watched those videos but I have friends who found them really helpful. Some concepts also could have done with rehashing, like stringstream. Took me a while to get that. Strengths are that the professor and TAs are all wonderful people, and really great at individual help! Thank y'all so much",
    "The course was excellent for beginners- it certainly started from the ground up, building fundamentals. I wish that the problem sets were a bit more challenging.",
    "I enjoyed the class and would not suggest any major changes.",
    "The strength of the course lies in its material -- the course is an introduction to computing, so most students were able to understand and apply the material without difficulty. Another strength lies in the fact that Help Hours (TFs\/TAs\/Peer Tutors would come to a room in 17 Hillhouse for 2 hours a day from Sun.-Thurs.) existed. A lot of my peers were able to finish their problem sets at the help hours, especially those that attended early on in the week. A weakness of the course comes from the odd\/off-beat lectures we'd have. There were 3-5 lectures the entire semester where we'd be working on the week's problem set IN CLASS. New material was not presented -- students would just sit in DL 220 at 9 AM and work on a problem from the problem set, as Corey or a TF walked around to answer questions. There was even a lecture where a head TF explained the previous week's problem set in detail. That was one full lecture. I found this to be a waste of time, and it proved to be when we were only able to cover MATLAB for one week and not get to Mathematica.",
    "While the professor made an effort to gear the class towards those who had never coded before (something which I very much appreciated) I think it could be even more focused on students new to coding. Having office hours pretty much every day of the week and extra help after midterms was incredibly helpful. Expanding even more on this and starting more from the basics of coding would make this class even better for students who have never coded before.",
    "This course did a good job of balancing the amount of material covered with practical coding examples. Additionally I felt no shortage of examples and practice problems (posted on Classes v2) so that I never felt lost in terms of the material.",
    "The course was taught very well. My main criticism is that I believe the course was a bit too slow-paced. We ended up only having 6 problem sets throughout the entire semester, most of which took a fairly limited amount of time. Given that this may be the only computer programming class I am taking at Yale, I wish the course would have been a bit more serious. I learned the basics well, but I am not sure if I know enough yet for me to code something useful.",
    "Very accessible, tons of resources made available, professor and TAs focused on us learning. However, I feel that the course was not challenging enough.",
    "I didnt like the approach of spending some classes just showing simple coding examples and other classes just to discuss the homework. Furthermore, instructions for the homework (and help pieces of code) were only uploaded closer to the deadline instead of when the homework was released. I believe these could be improved if we could work on harder and longer examples during class (as we did right before the second midterm) and if all the resources for the homework were released with the homework."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "If you're looking for an introduction to programming, this is a good class. If you're already very experienced in C++, this class may be too easy for you. It is a good class for beginner to intermediate levels of programmers.",
    "This is a gut if you know how to code in almost any language.",
    "only if you've taken coding before. professor (corey o'hearn) was a great guy but he didnt actually teach the course. most definitely not a beginner intro level course. but of course, like most classes at yale, eveyrone in this INTRO course already knew how to code (snakes) so it was easy for them. if you've never taken coding before this class will be lit impossible cause no one teaches it. lectures super pointless",
    "Yes, similar to compsci 112, it is a strong introductory course to programming.",
    "Yes, I thought this was a great first computer science class. I did not think I would like it, but ended up really loving it!",
    "I would recommend this class to a stem maior that wants to learn coding for summer internships.",
    "If Ohearn is teaching, absolutely take this class. You'll learn a lot, especially if you are new to programming but you won't be so stressed out that you hate code st the end",
    "Yep! Great intro to programming, and especially C++",
    "Yes, if you need to take this class for your major know that its not too hard and you will learn something from it.",
    "Yes! Professor O'hern is great and fun to learn from - he made learning C++ easy (to me) and definitely provided plenty of help on the problem sets when needed. I really enjoyed taking this class with him and feel like I was able to learn a lot",
    "I would recommend this course if you have never coded before and are looking for a more relaxed introduction to coding than CS50. I would not recommend it on its own necessarily, but it is a nice pre-req that is fairly easy to get out of the way. Definitely an into course, but not an overwhelming one.",
    "Yes! Take it with O'hern! He's nice and engaging,",
    "I would definitely recommend this class to other students if they are new to coding. If you already have significant experience, its probably a waste of time and you'd be better off taking a higher level course.",
    "Yes; not too much work, teaches you CS skills that you can develop later",
    "Yes. Take this course if you want to learn a bit of c++. it gives you the basic platform for expanding on c++ language since it doesn't cover everything completely.",
    "Yes. You learn a lot and can keep up with material",
    "This is a great intro CS course. Definitely take it with prof O'Hern--he made it very useful, we learned a lot but workload was very manageable. If you are a STEM major and need an intro CS take this.",
    "Absolutely. If you're someone who has never programmed before, this is an amazing introductory course that is stimulating but easy enough to follow that I never felt lost or behind, even in a class of people who had programmed before.",
    "Yes, because it is required for Mechanical and Chemical engineering majors.",
    "I would recommend this course to anyone who has no prior experience with computer science or programming. As someone who took AP Computer Science in high school, this class was pretty easy.",
    "If Corey O'Hearn teaches it, and you're mostly looking to get a solid background for coding rather than to become a tech wizard, then this is LITERALLY THE PERFECT CLASS--low work but you learn what you need to.",
    "No, unless you have to take it. If you are a beginner, you will struggle in this course. It is definitely not designed for beginners, as the lectures move at a pace assuming you already know how to do much of the code, which is not true if you are not a beginner. Unlike most STEM classes, there is no curve in the class because of the high volume of kids who already knew how to code and yet chose to take a beginner coding class.",
    "if you're looking for a basic intro to c++ take it but if you want something more in-depth in multiple languages you should take a CPSC class",
    "Yes, I would recommend this class to anyone looking for a good introduction to computer science. We got a very comprehensive overview of a popular language, providing for a wonderful experience.",
    "If you'd like a pretty basic class to help you get the basics of programming, sure I'd recommend it.",
    "If you are an engineer trying to get coding out of the way, this class is not too too much work, and is a pretty good way to get that requirement done. I've heard it is easier than CPSC 112. C++ is a really really fun language and I really enjoyed it. The one thing is this class doesn't really give that much work, which is fantastic on a day to day basis, but not so good because you have very little way to check yourself and your understanding. We only had 6 psets the whole semester. Another big plus of this class is there is an amazing support system-- TAs Alex and Jennifer are amazing and there are office hours 2 hours a day 5 days a week!",
    "I would strongly recommend this course to another student. It is a great way to get an introduction to programming with a lower workload and more individualized attention than other intro. CS courses.",
    "I would recommend this course to students adequately prepared for what they were getting into. Even though the class is ostensibly designed for people who have never programmed, it is stocked with a fair proportion of students who have coding experience, and that tends to make the curve on exams and problem sets a little difficult for first-time programmers. You should also be prepared to invest a lot of time on problem sets: even after you have written out the code, getting it to compile and run correctly requires a lot of testing time. Be prepared to read the textbook and go to help sessions--these are enormously helpful with understanding the material (much more so than going to lecture).",
    "I would absolutely recommend this course to someone who does not know how to program aready. It is fun and challenging in the right degree.",
    "If you haven't taken computer programming before, or if you need an elective for an engineering major and don't know which to take, I recommend this class! There's a lot of resources for you if you don't understand, but it's taught well enough that you often just need to do the problem sets for it to be good! I also enjoyed it, and I was glad to find a computing class that didn't stress me out!",
    "Honestly, this class is geared towards engineering students trying to fulfill the computer science requirement, but this course works well as an introduction to C++ and Matlab. Expect the course to be mostly in C++ (the Matlab portion is quite limited), but it serves well as an introduction. I haven't taken CPSC 112, but I feel like this might be a comparable class.",
    "Yes! Great for learning C++ which sets you up with a great foundation to learn other languages. Workload is not bad at all. I learned a lot as someone who had 0 CS background.",
    "Yes! It's also a good class to take as a gut if you've done a bit of coding before. Also, it's a good class to take with friends, so you can help catch eachother up on the little details you might have missed in class. On PSETs\/exams, they give extremely specific instructions, which can be a little disappointing if you want to be creative, but also makes them really straightforward. They also never ask you to code for edge cases, your code literally just has to run what they explicitly tell you.",
    "If you've never coded before, this is the class for you! An excellent, consistently-paced introduction to C++ and the terminology of coding. It's not a particularly challenging course but certainly peaked my interest in coding and problem-solving through coding.",
    "This class is a great intro to CS! I used to be afraid of CS but after this class, I want to learn more. The lectures were interesting and the psets were manageable and taught me a lot, and i always felt like a hackzor genius when my code compiled and worked! I often had to go to office hours for help, and the TFs and peer tutors were super helpful and nice. Professor O'Hern is a funny and engaging lecturer.",
    "I would recommend this course for those who need it or want to get a some-what easy QR credit. If you've never coded before, this is a great intro course to programming languages.",
    "Yes especially because Professor O'Hern adjusted it for beginners more and many engineering students have to take the class for their major.",
    "This course is a good introduction for programming (C++) for someone who has never programmed before. The course presents the information clearly with many in-class practice examples and readily available help. Additionally the class presents the material at a decent pace so it does not feel slow or pedantic.",
    "Take this course if you need to for a pre-requisites. It is well taught and introduces you to the basics of programming. If you're looking to really learn to code, however, take a computer science class instead. While I feel like I learned a lot in this class, I am not sure if I know enough yet to code anything useful ...",
    "Yes, it's a great foundational course with a manageable amount of work and it teaches practical skills.",
    "Unless you need that fifth class, or are rusty with coding, don't take this class if you know how to code. It will be too easy. If you don't know how to code, and are a scientist\/engineer\/someone who just needs the mechanics and doesn't care about computer science theory, then take this course. You'll learn how to get started coding with C++ mostly, and a bit of MATLAB.",
    "I would recommend this course for someone that has no experience with programming and wants to learn C++. If you dont have experience with programming and doesnt have a specific preference regarding the language, I would probably recommend another class (C50 or CS112). And if you have experience with programming (especially C), I would not recommend this class. The homework is not that challenging for people that already have experience and the lecture doesnt go deep into specific features or longer programming examples."
   ]
  }
 ],
 "extras": {
  "subject": "ENAS",
  "number": "130",
  "section": 1
 }
}