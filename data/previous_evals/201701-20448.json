{
 "crn_code": "20448",
 "season": "201701",
 "legacy_coursetable_course_id": 41457,
 "enrollment": {
  "enrolled": 155,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    0,
    5,
    19,
    42,
    46
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    2,
    4,
    17,
    41,
    49
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    1,
    4,
    6,
    51,
    51
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    1,
    13,
    24,
    47,
    28
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    3,
    16,
    46,
    47
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    1,
    0,
    20,
    55,
    36
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "SO MUCH of everything. How to write proofs rigorously, how to think like a mathematician\/grapple with advanced concepts in a more sophisticated way, how to enjoy getting consistently rekt, knowledge of algorithms (greedy, dynamic programming, divide & conquer, flow, approximations) and related concepts (graph & tree properties, minimum edge cuts & max flow, proving that problems are NP complete), etc. This course was a Lot.",
    "Understand some fascinating algorithms and how they could be applied in real problems.",
    "How to write rigorous proofs, broad knowledge of useful and ingenious algorithms, appreciation for the beauty of algorithms, etc. Wonderful course.",
    "I gained a new appreciation for the mathematical side of computer science and a new way of approaching problems.",
    "I learned techniques for proving the correctness, and the computability of algorithms.",
    "I learned a great deal about useful algorithms for solving diverse problems, and also about applying our knowledge to come up with our own algorithms.",
    "I don't think I can even list all of the skills I developed from this class! I learned how to think in a new way. I solved problems I thought were impossible and gained a deep understanding of how to analyze, develop, and approach algorithms. 10 out of 10 am far better off for having taken the class.",
    "Learned some good algorithms, how to write proofs.",
    "I came into this class without knowing how to do proofs, use Latex, or describe algorithms, and improved immensely on all three areas (and became much more confident in myself and my ability to tackle and eventually solve difficult problems).",
    "I learned so much. So. Much.",
    "Learned how to think through complex problems and break them down.",
    "I learned about various \"standard\" algorithms, the motivations for coming up with such algorithms, and method to prove these algorithms yielded the desired results.",
    "A pretty decent introduction to different approaches to designing algorithms. Most of the class material could be learned through a relatively careful reading of Kleinberg and Tardos though. At the very least, it requires you to take a systematic, mathematical approach to solving relatively important and not terribly abstract problems.",
    "Learned major algorithms in computer science",
    "How to solve problems, how to wring proofs, importance of algorithms in computer science",
    "You learn how to come up with better algorithms, which is essential for computer science. It shows how important it is to think about a good algorithm before implementing the first one that comes to mind.",
    "A lot of skills concerning proofs and algorithm design.",
    "Learned how to write rigorous proofs of algorithms.",
    "Writing proofs",
    "I learned a lot about new algorithms and new ways to think about solving problems. I didn't have much of a math background so I also learned a ton about proofs and latex!",
    "This course did a great job covering the major algorithmic concepts in computer science.",
    "This was one of the best Cs core classes I've taken at Yale. I learned how to solve problems efficiently that are relevant to the real world!",
    "Learnt about the major classes of algorithm, algorithmic thinking + analysis",
    "Ability to write better proofs and an ability to come up with and analyze algorithms for correctness and time complexity",
    "Knowledge about algorithms. Learned how to write proofs.",
    "Having just a math background, with only self-taught knowledge of computer coding, I learned a considerable amount. A grasp of some basic data structures, previously unfamiliar to me, was a nice bonus.",
    "Thinking of algorithms proving them, analyzing them critical thinking and creativity thinking of all possible edge cases and determining if your algorithm will truly work in all cases",
    "Certain algorithms and problem solving techniques. Learned new approaches to computer science problems.",
    "Writing proofs that are word-based rather than equation-based. Insights into the process behind designing algorithms.",
    "I learned so much about algorithms!",
    "As the name of the course would suggest, i learned a lot about how to design and analyze algorithms. I also learned how to make a proof thorough withoug being unnecessarily complicated.",
    "This course provides a solid introduction to many different types of algorithms, and does a good job of teaching both the general techniqurs (which provide a natural organization for the course) and the specifics of each problem. It taught me how to make proofs about algorithms, which I had never seen before, and also how intuition can sometimes lead to a successfully algorithm, or sometimes lead you astray. Generally, I think I thought improved my problem-solving abilities.",
    "I learned so much about different techniques to solve different kinds of problems, how to reduce most problems in computer science to problems we are familiar with, and how to prove that our algorithms are correct. I never thought thought that coming up with algorithms was going to be so fun. I loved this course!",
    "I got better at writing rigorous proofs, and learned more about common problems in Computer Science and how to solve them. The material before max flow was redundant at this point in my education.",
    "I learned how to think about algorithms, using techniques such as Greedy Algorithms, Dynamic Programming, and Divide and Conquer. We also covered more theoretical topics such as network flow and complexity analysis.",
    "Gain familiarity with foundational algorithmic techniques, from Dynamic Programming to Graph algorithms to understanding the significance of NP Hard\/NP Complete, experience with using Latex.",
    "I learned how to better manipulate algorithms.",
    "I learned about the basics of algorithms and how to analyze them.",
    "How to design and analyse algorithms",
    "You learn a bit about developing some algorithms, but I would say that you learn more about writing proofs and actually proving that your algorithms work as well as you claim.",
    "Although 202 begins to touch on this, 365 *really* teaches you how to think about algorithms formally and theoretically. For me this was great, because I love CS and I love math and this is the perfect class for that. In terms of specific knowledge, you will learn about pretty much every general category of algorithm (greedy, dynamic, randomized, flow, NP stuff, D&C). Spielman also effectively forces you to learn & use LaTeX.",
    "Designing and analyzing algorithms, different algorithms and their runtimes, knowing whether a problem is solvable in polynomial runtime or not, etc.",
    "Learned some stuff about greedy algorithms.",
    "Improved algorithm design skills. Also generally improved understanding of how important things like search engines and maps run",
    "Training for algorithm analysis and design. Good review on discrete math.",
    "I learned a lot about algorithms and proving things in general. One nice thing is that Algorithms covers a lot of algorithms that I had encountered previously but avoided thinking about because they seemed too hard. Algorithms made me like thinking rigorously about difficult things.",
    "I learned about different ways to solve problems, and the importance of formally specifying what the problem is before you try to solve it.",
    "Analytical Thinking Precision",
    "Knowledge: CS 365 does breadth and depth. The first half is an overview of the most important techniques for solving problems: greedy, dynamic programming, and divide and conquer. You start thinking about graphs and runtimes, two major themes of the course. In the second half, we focused on the most important and nuanced technique: turning one problem into another (reductions). We were introduced to this through the widely-applicable max flow \/ min cut problem. Next, we developed the beautiful theory of NP, showing NP-hardness for ~20 problems that are the foundation of the theory. Finally, we learned some techniques for handling NP-hard problems when they're forced upon us: approximation techniques and randomization. Skills: I have taken four math courses at Yale, and CS 202 and CS 365 were far better experiences than Math 120 and 225. CS365 in particular is mathematically rigorous, asking you to prove correctness and runtime of algorithms as well as proto-algorithm properties of the problems we care about. This course asked me to completely step into the computer scientist headspace. CS 365 will be the course I point to and say, \"this course inspired me to become a computer scientist.\" Insights: First, it's hard to overemphasize the profoundness of NP theory and a demonstrated fundamentality and commonality among a huge class of seemingly distinct problems. Second, although the course was statedly easier this year than last, it was nonetheless very rigorous (hardest class I've taken yet), and it gave me the confidence I'll need to carry me through the major and beyond.",
    "This was my first real course in algorithms so I honestly learned a lot. Problems that I would have first thought were very hard to solve now seem to be a bit clearer. I was also exposed to many techniques that I was previously unaware of.",
    "Strong understanding of algorithms and proof based reasoning",
    "How to design and analyze algorithms, algorithm types (greedy, dynamic programming, divide and conquer), some complexity theory (NP-completeness\/hardness)",
    "This class vastly reshaped the way I approach problems, both computer-related and not. I found myself using basic dynamic programming algorithms in my casual games as well as planning my schedule. Although I dreaded them at the time, the ability to develop and write proofs has vastly helped me cut corners and think about efficient solutions to problems across the board. What's more, since it was our very articulations that were graded, I'm fairly certain that I've gotten better at explaining things.",
    "I learned a huge amount about the fundamentals of theoretical computer science. Taking this course is like taking calculus for the first time. You're suddenly acquainted with a new branch of math that lets you describe more powerful concepts.",
    "Learned a lot about how to formally develop and prove algorithms to accomplish a variety of different tasks.",
    "This class gave me a very solid understanding of algorithms, how they work, time complexity, implementation, and much more that is definitely helpful in software engineering.",
    "Survey of many different topics in algorithms (divide and conquer, dynamic programming, NP hardness, etc). A lot of practice writing proofs (entire class is proof based). Developed ability to write proofs for algorithms and also evaluate runtimes.",
    "Learned a lot. I am not a computer science or math major, so learning this type of thinking was pretty new\/cool for me. I also enjoyed learning some graph theory along the way. Was also helpful for improving my proof writing."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "Strengths: Dan (!!! his enthusiasm is contagious), the incredible and whip smart ULAs, the collaboration policy, everything Weaknesses: sometimes Dan goes too fast in lecture (at least for me. maybe other students are able to hold on) -- one time he proved 4 problems were NP-complete (or NP-hard -- I don't remember) in about 30 minutes. I was very lost, especially since some of the reductions were tricky and I didn't think they were explained rigorously enough (partly due to the time constraint) for me to reach an understanding. I also thought we spent too much time on NP. Grading is also very slow, but the ULAs are completely swamped, so it is very understandable. It would have been nice to have more psets back before the 2nd midterm, though.",
    "The professor is great. All Stem students should take the class to learn problem-solving skills.",
    "Good class, well-taught and interesting material. I personally would have benefitted from a more challenging version of the class.",
    "I liked the course a lot with the exception of the exam, which I think were pretty unnecessary to the course - I'd rather see them replaced with problem sets.",
    "Feedback needs to be more constant. I can't know how to improve on my proof if most of my psets are not handed back by the time of the exam.",
    "This is a great course! Dan explains each topic in a clear and engaging way, illustrating concepts with helpful diagrams and examples.",
    "Spielman is the strength of this course. He is an incredibly talented lecturer who is cares about his students. For example, he noticed in past years that women tended to be boxed out of work groups and changed the policy to make things more even! Spielman told us that he took a different approach to psets this year, and I don't know what they were before, but I had a blast working on them, even though they would sometimes take me over 28 hours to complete. Given the rigor of this course, I think one change can be made: quicker turn-around for pset grades and feedback so that we can improve our skills!",
    "Strength: not as much work as 323 (thank god), good psets that make you learn, usually a lot of TAs at office hours, Prof. Spielman is very receptive to feedback and is a good lecturer. The course follows the textbook a lot so it's very easy to figure out what's going on if lecture was confusing. Weakness: The course was easier this year, so I didn't feel as accomplished. Some TAs were also much better than others, and the grading is a little slow at times. It also took an inordinate amount of time to write up some problem sets. The tests seem also a little silly. While I learned the algorithms very well, it was really just memorization and I didn't think I got much out of it.",
    "It was hard to figure out what standard of proofs we should've used: the write-ups often took many many hours (and solving the problems took long enough). The solutions given in class were often far shorter than the solutions that I produced, but it was difficult figuring out how to cut down. If possible, a mandatory meeting after the first problem set to discuss the actual process of writing up the proof would've been nice. A strength has to be the incredible Dan Spielman, whose smiles, goofiness, and intellectualism and curiosity carried us through difficult materials.",
    "Strengths: You learn some super applicable things, but also learn to appreciate their beauty. Weaknesses: Not enough TFs\/ULAs at office hours.",
    "The course did a good job sequencing the algorithms that were taught. The logical progression of the course made the sense and made the topics easier to understand. I would have appreciated more challenging problems as well as solutions that focused on reflecting creativity to solve the problems rather than detailed-ness of write up.",
    "Dan is an extremely good professor, so there's that. The textbook is quite solid so while class is relatively worthwhile, it is not strictly necessary to always attend. Problem sets were relatively easy if you have any sort of analytic\/mathematic background (not necessarily math major experience) and really understood what was going on in class. Tests were quite straightforward, just taken from class and problem sets. As far as weaknesses, the collaboration policy probably should be changed; I honestly think people should learn to do these problems on their own. Ideally, people could collaborate by discussing problems as I personally find that quite helpful, but I doubt the collaboration that goes on currently is pedagogically sound.",
    "Strengths- Dan's a great lecturer Weaknesses- ULAs are tough graders; I always felt like I understood and had solved the problem, but then I'd lose points on my proof, which was discouraging",
    "Dan is an excellent lecturer, and the content of the course was great. Lectures at times felt a little slow, but most of the time it was at a good pace.",
    "Overall, it's a well structured course. You learn primarily from the problem sets, which are very challenging. The problem with this is that since it's such a large class, you don't get feedback on your problem sets until much later. However, the TAs and professor are all extremely open to questions and are incredibly helpful.",
    "Course material really interesting. Professor is engaged and passionate. No late days for homework.",
    "This course was apparently dumbed down a little this year, and I clearly felt this in some of the psets. While the material covered is very good, and Dan is an excellent instructor, the pset problems could have been a little more original sometimes. Also, I see no reason why the standard CLRS textbook is not used - I feel it is clearly a better alternative to Kleinberg and Tardos.",
    "In terms of content, the class is a good class. Dan is a great teacher who is clearly passionate about the subject material and cares about his students. However, the grading structure of the class is set up very poorly, in my opinion. There seemed to be very little differentiation between kids who knew what they were doing and kids who didn't, and it was easy for those who clearly knew what they were doing to end up with a poor grade. Partially, this is due to the inconsistency of the graders, but a lot of it can be attributed to the fact that the median grade on problem sets and midterms was almost always 95+%. I feel like personally I was not pushed to my full potential because of this, as the tests and problem sets were always too easy.",
    "Grading is a weakness",
    "Too hard, too little guidance. You're expected to teach yourself basically all of the material and it's just oh well if you don't get it.",
    "I think one way to improve the course would be more tutor office hours, since they are probably key to most of the students' success in the class. Dan's lecture notes are also usually very good, but slightly hard to piece together sometimes so making those clearer would be helpful for studying for tests!",
    "I thought Spielman was a great lecturer and I learned a lot from going to class. I feel like the main weakness with this course was that it could not have any more classes, as I would love to learn more about the implementation of the algorithms.",
    "Strengths -good last pace, Weaknesses - the weekly homeworks were difficult to keep up with,",
    "Well structured, but having more references to how the lectures fit into the bigger picture of the course would be nice -- it felt like I learnt different things every month\/week. Other than that, great course and lectures. The collaboration policy needs to be tweaked though.",
    "Strengths: well structured, psets complement content well Weaknesses: Psets are a bit too easy, exams involved rote memorization instead of application of content",
    "The TAs did not take their jobs seriously. The grading of the assignment had problems such as huge delay in feedback, the comments were incomprehensible and wrong grades assigned. One of my assigned grades was off by 30%.",
    "Dan is a cool professor who's very approachable and often sympathetic to students. The course material itself is quite challenging and lectures can be a bit fast to follow at times. Psets can be very time consuming. I often start off feeling like a helpless little puppy but finishing the psets gave a sense of fulfillment. Office hours are super helpful and so is working with friends.",
    "Perfectly sized and spaced problem sets allowed plenty of time for actually talking to the professor and TAs at office hours. Many classes in my experience give so much work that you have no time to ask questions, but this class was not one of them, to its credit. That being said, feedback on assignments was rather rigidly based on a rubric; even when explanations were given, they were entirely in text, which made it hard to convey visual explanations.",
    "Maybe discussing very briefly some new techniques in machine learning algorithms?",
    "Good lectures but most of the information is fully explained maybe even more clearly in the textbook for the class.",
    "The lectures are very clear. I would have preferred it if slides were used. Problems sets are clearly worded also.",
    "The problems are helpful and interesting. It would be nice if either the late penalty were less stringent or the lowest problem set were dropped.",
    "It's hard to think of weaknesses of the course - it is superbly organized and taught, and covers interesting material. The encouragement not to collaborate was extremely valuable for me, and made doing problem sets longer but more fulfilling. If I had any suggestions, I suppose I would have liked it better if we went more in-depth, or returned to the level of difficulty of previous years. But this may not have been a good choice for the class as a whole - it's hard to say.",
    "The lectures were simply fantastic. Dan is extremely clear and always stops to answer questions very patiently. The material he covered was very engaging, and I liked how he put everything in perspective of the current research. The grading was very slow -- by the time we were to take the second exam, we'd only received feedback on 1 of the 4 problem sets that were relevant to the exam material, so we didn't really have a whole lot of feedback on our understanding of the proofs. Also, the exams pulled questions exclusively from the problem sets and from lecture, which encouraged people just to memorize proofs and specific steps instead of actually understanding them.",
    "I think most people have already learned about greedy, divide and conquer, and DP algorithms by the time they get to this class, so that part of the course could be condensed. I also think since the problem sets are short (2-3 problems), I spent much more time on the syntax of my proofs then on problem solving. Also, though you could choose to work through things on your own, the collaboration policy made it easy for people to share answers, and then grading ended up being about how well-written your proofs were, which is mostly a matter of who you're friends with.",
    "Grading was very harsh. Honestly, this class had a mild case of grade deflation, which is rare to see at Yale. I dropped one problem the whole year, which I assume will drop me to an A- (91 is an A-). There's not much room for error; the only way you can get something wrong and still get an A is if you just get some small things wrong, like edge cases. Otherwise, one variable wrong or one step wrong in your algorithm and you drop the entire problem, and you're one letter grade down.",
    "Content is extremely dense. We missed one lecture because of snow, and I think it put us behind schedule for the homeworks.",
    "The strengths are that the material is taught very well and it is extremely interesting, the weakness in my opinion is that it is difficult to see the application of the algorithms and remains quite theoretical.",
    "I think the course could be better structured by having a slightly harder series of exams.",
    "Interesting content made all the more better by Spielman but tests and exams were perhaps a bit too easy, so averages were too high and the grading did not discriminate as well as it should have.",
    "I know there is a lot to grade, but getting back feedback on the homework assignments sooner would be really good. So you know what you are doing wrong sooner.",
    "Absolutely fantastic course, so I don't think I need to enumerate the strengths (there were way too many). Weaknesses were few and far between: homework grading was slow and sometimes not very specific (but could always be resolved in office hours).",
    "Great instructor, explains stuff really well. Weakness: only writing proofs. There should be a version of the class where you actually implement the algorithms in code as it is a CPSC class. Extremely easy midterms and finals, no real differentiator. All questions were those that have already been solved in class or in homeworks.",
    "Bad grading scheme for tests. Tests are straight recall\/very easy, so they punish careless mistakes\/arbitrary judgments of quality instead of not knowing the material. Some of the easy questions on the PSets had the same effect, but overall the harder questions on each PSet were interesting.",
    "Strengths: necessary for CS education. Weakness: student engagement varies",
    "I liked the class, I don't have any suggestions.",
    "The class itself was very interesting before Exam 1, when the things being taught were real life problems. But then after that, it became extremely dry and boring when we moved on to abstract things like NP hardness.",
    "Strengths: Dan Spielman is one of the best lecturers I've had; he is very clear and moves at the right pace. He structures the class in a way that demonstrates his stated love for this course. The problem sets were fascinating. We showed results that went far beyond a first algos class. Weaknesses and Improvements: First, Dan is very approachable, and I mostly blame myself for not getting to know him better. However, if there could be more ways to interact in small groups with such a fascinating character (becoming brilliant in the presence of brilliance), that would be amazing. Second, I really enjoyed the problem sets and I thought they were extremely challenging. However, hearing they were easier than in the past strikes a certain insecurity in me. If Dan would like to keep the \"easier\" style of the course, perhaps he could give non-credit \"challenge\" problems that give a taste of genuine difficulty. Third, Dan should understand the huge range of commitment levels from students. I took his advice and allocated 5-10 hours per problem of fiddling before I sought help (this happened to always be enough time for me to get the problem). However, my impression is that was not the time allocation of other students in the class. Not sure if there's a normative point here, just something to be aware of. Making the tests harder is often a way to differentiate the women from the girls - those who are willing to be spoon-fed pset answers from the TA's.",
    "I became frustrated with the undergraduate graders throughout this course. Every week it seemed like I had to submit regrade requests and most of the time I got a lot of points back (on average 5 points). While I understand that it may be hard to grade homework's, it was very time consuming for me to have to look back again through my homework's and convince myself that a mistake was made and have to argue this back to the grader. Is there a way to improve this for the future?",
    "The course moves quite slowly and exams are ridiculously easy, coming directly from the class work. Small silly mistakes become quite costly.",
    "I would say the two biggest strengths of the class are the material and the professor. Although that encompasses everything, what I mean more specifically is that the field of algorithms is extremely engaging and very applicable to many aspects of computer programming\/science and Prof. Spielman's lecture style was very informative, understandable, engaging, and inviting.",
    "A huge amount of mental effort must be invested but the payoff is large. Spielman is a god. There needs to be more TAs though. The weeknight homework sessions sometimes feel like the sinking Titanic with not enough lifeboatsthere is a special kind of despair in putting your name at the end of a 50-person queue, and then the beleaguered TA has to leave before they can get to you. Luckily, the students are each other's best resource. Whatever the official collaboration policy is, most of us would not stand a chance on our own. More feedback on exams and problem sets please!",
    "I thought the class was very well structured and Dr. Dan did a great job at explaining complicated concepts.",
    "Lots of important contents covered. Detailed examination of many proofs for algorithms that you've probably heard of already. The weekly psets get really stressful and the slow grading makes it so you never really know if you're doing a good enough job writing a proof. Could be improved by faster feedback. Lectures were well planned and also well documented in notes online. Psets were also great questions and contributed a lot to my understanding of the material. Tests were very fair.",
    "Office hours are understaffed and frustrating, the course is FANTASTIC.",
    "I think adding some more of the practical questions dealing with applications to real life on the problem sets makes them more fun and easier to think about. I also think the expectations of the problem sets needs to be clearer. Often his answers will assume things that I thought had to be proved."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "Yes. but plan your entire schedule around it. here are some tips: START EARLY like Friday (the psets are released on Thursdays for the most part). Go to weekend office hours\/Dan's OH to get a starting point if you need to, then work on the pset a LOT over the weekend so by the time Monday rolls around, you have intelligent questions to ask at office hours if you need to go to them, and if it turns out you solved a problem completely wrong, you have time to backtrack and redo it without panicking. Budget time for typing solutions up -- it's time consuming.The midterms are also just memorization of class notes\/pset problems. It's a little annoying, but it forces you to review class notes. Do the reading. The book is very helpful when doing psets\/clarifying concepts. ask questions -- that is what the ULAs are there for. It is better to clarify any doubts you have, even if you think the question you are asking is elementary\/silly, than to lose like 10 points on a problem set that is only out of 30 points.",
    "Yes. All Yale college students should take this class some point in life to learn problem-solving skills.",
    "YES. Take this class. It's a very challenging class, but I developed a lot in terms of my understanding of algorithms, their complexity, implementation and the problems they attempt to solve. It also restored an appreciation for the beauty of math that had slowly been drained out of me from high school leading up to MATH 115.",
    "Dan is a wonderful lecturer, and he works hard to make this class engaging and challenging. If you have mathematical (proof) experience, you will find this class somewhat easier than those who only have computer science backgrounds. Good excuse to learn LaTex.",
    "This is a really great course for anyone interested in CS or math. Note that you probably don't need 223 to take this.",
    "Definitely. You'll learn extremely cool stuff.",
    "I'm thankful that Dan finally eased his collaboration policy and added more regular office hours. The course was still a lot of work, but not as onerous as in previous semesters from what I've heard. It definitely gets easier in the second half of the term once you finish network flow. My biggest frustration was determining when to focus on the textbook exposition and when to focus the lecture notes, since they are both hit-or-miss. Although the problems Dan covers in lecture mostly align with those in the textbook, his solutions and notation tend to be substantially different. Sometimes that's great, other times it's unnecessarily confusing. For example, I found the book's explanation of Ford-Fulkerson (7.1-7.2) much clearer than Dan's lecture notes, as his notation during this set of lectures was hopelessly confusing and counterintuitive. I also felt that his lecture on randomized divide-and-conquer was too sketchy, whereas the book's explanation (13.5) is excellent. Although I don't like condoning piracy, Kleinberg-Tardos is expensive enough that you're better off searching for a PDF on Google. Make sure to get started on the problem sets early, go to office hours, and plan to spend up to 15-20 hours a week on this course so that you don't need to stay up too late the night before the problem set is due.",
    "Algorithms with Dan is a great course! The material is fascinating and I loved solving the problems that Dan gave us. Very useful for coding interviews too.",
    "This class is a LOT of work, but very rewarding. CS majors have to take it, but if you are interested in algorithms or other types of theoretical math, you should definitely try it out! Know that it will cost a lot of hours, but hearing the magical Dan Spielman lectureis more than worth it.",
    "Yes, take it for the major, or take it even if you're not a major. It's a good course that really helps you think algorithmically. I felt like I got a lot out of it because I took it after 223, so it was cool knowing that I could code up the algorithm in xyz way. If you take it before or concurrently with 223, you may miss out on some of that. Spielman runs a very good course though.",
    "I would highly recommend the course: if you come from a mathematical background and are willing to put in the work (and it's a lot of hours), then I'd say that Algos left me with a changed way of looking at problems. Not for those trying to just learn to code though: this is some pretty theoretical CS.",
    "Wholeheartedly recommend to anyone that wants to think. Really think. Great for math majors that are looking for a \"fun\" class.",
    "Yes! I would recommend taking this course with Professor Spielman for sure. He is a wonderful and engaging lecturer, and the psets really help reinforce the methods you learn in class.",
    "I would recommend this course to those who want an introduction to the world of algorithms and theoretical computer science (minus cryptography) in general. It definitely motivates people take take more advanced algorithms and complexity classes in the future.",
    "I'd recommend it to anyone really, and certainly to non-CS majors. Arguably it might even help if you aren't CS; in normal CS courses, you can probably keep trying different things until you pass the public cases without much thought. Here, you can't do that; you just have to be very systematic and cognizant of what is actually going on. Overall, a good intro to greedy algs, dynamic programming, network flow, NP-hardness, and approximation. Dan is an extremely helpful and talented lecturer, not to mention extraordinarily bright, so is overall a great guy. Problem sets might be a bit hard; the more math background you have, the better. I thought grading was pretty fair if not quite slow, but I think others had some qualms. Tests are pretty easy as they're basically memorization of class material. All in all, a worthwhile course for anyone.",
    "Useful to know these algorithms! Tough grading on proofs, though.",
    "Very important class for being a valuable programmer of any kind.",
    "This is the best class I've taken at Yale. It is a lot of work but finishing the psets make you feel really smart. It is an intellectually challenging class that you get a lot out of. Take it with Dan because he is an amazing instructor -- his lectures are actually interesting and engaging",
    "If you are serious about CS, this is an essential course. I almost think it should be taken earlier in our Yale careers, since algorithms are just so important.",
    "Definitely worth taking, challenging but worth the time",
    "This is an incredible course and I HIGHLY recommend it, even if you aren't a CS major. You will learn so much especially from Dan, who is an incredible professor. This course will push you like no other course has, and it is entirely different from anything you have ever taken before but in the end it is so worth it because of how much you learn. It is hard, that is undeniable. All the rumours you've heard about the course is true, but you become such a better CS person, proof writer, whatever by taking this course.",
    "If it's required for the major.",
    "Yes, take it if you love proofs and problem solving. If you're a CS major, this may be one of the best classes you take, given that the syllabus is not watered down further.",
    "Yes, but only if the grading becomes more transparent. If you don't want to worry about grading, take it with pass\/fail.",
    "If you are a CS major you're taking this. Don't if you don't have to.",
    "Definitely recommend to anyone who wants to learn about algorithms in computer science!",
    "I would definitely recommend this class to any student at Yale, not necessarily a computer science major. I think the problems we did in this class were cool and because implementation of the algorithms was not necessary, a background in math was the only thing essential to the course.",
    "Yes completely!",
    "Take this class early and with friends if you can -- requirement for CS, Spielman is a great professor.",
    "Yes, if you're interested in getting a taste of theoretical CS without delving into the nitty-gritty details of a specific programming language.",
    "Yes! This is a great course, well designed and organized, taught well and can benefit students a lot.",
    "10\/10 would recommend",
    "If you're a CS major, then you have to take this course. It's a rite of passage in some ways. I can also see how this course would appeal to non-majors as well. Psets are weekly for the most part and are quite challenging. In case someone hasn't mentioned this yet, if you're looking for a gut QR then this is probably not the course for you.",
    "Yes. In my own case, I took it because I loved graph theory and it seemed cool, and I got out of it even more than that. I really felt like I had learned a lot by the end of the semester.",
    "If you are interested in the topic and willing to spend time thinking on problem sets - absolutely. Spielman is a gem",
    "Required course but definitely is interesting and you will learn new concepts.",
    "Yes, I would recommend. Useful content taught in engaging manner. Not overly time-consuming either.",
    "Way too much stress for a course that woukd normally be fun. The material is super interesting but there is harsh grading that makes you lose all interest in it. Collaboration policy also penalized people who prefer to work alone. Some TA's were exceptional but there were also some who were no help at all and clearly did not prepare for the office hours... not even reading the problem sets in advance.",
    "Possibly my favorite class i've taken so far at yale. Definitely reccommend to anyone who likes either math or computer science.",
    "I would recommend this course to another student! Not only are algorithms useful in a ton of fields, but it's one of those courses that strikes the perfect balance between relevant and easily understandable problems, and clever\/hard solutions (but that it feels like you have the ability to figure out). It is superbly taught, and will probably be one of your favorite classes you take at Yale.",
    "TAKE THIS COURSE. Whether you are a CS major, a math major, or just an enthusiastic problem solver, this class will challenge you and you will have a lot of fun. It is a lot of work, but it's worth it.",
    "This is a great class. Spielman really cares about pedagogy and it shows. Grading was harsh though, and sometimes even though they were \"consistent\" it felt a little unfair at times.",
    "Yes",
    "Fantastic class, very interesting topics. Dan Spielman is a great professor, and Yale is lucky to have him. Would definitely recommend this class.",
    "CS majors have no choice, so this part won't affect you. For the non-cs major, take this if you have any interest in data science \/ foundational methods in computational thinking that will endure no matter what programming language you use to do your work- it's a very different way of thinking about problem solving, and it feels very rewarding when you figure things out!",
    "Yes",
    "Yes, this is a core course in CS that is critical for any further studies.",
    "Yes. Algorithms is fun and not too difficult if you're comfortable with mathematical reasoning, and you'll learn a lot as well.",
    "It is required for cs so not much choice. If you are a math major, watch out because from what I have heard is that you have to be far more thorough in your proofs than you might expect",
    "100% would recommend. I took this class as a CS major but I know a number of math majors, etc. who took it just for kicks. Spielman is an amazing lecturer (easily the best STEM lecturer I have had at Yale), algorithms are amazing, and the class isn't too difficult. You will need to think but 365 won't kill you. That is: it's not the (comparatively) easy ride of 202, but it's not the (perhaps enjoyable) insanity of Eisenstat's 223 or 323.",
    "Yes, you gotta take it if you wanna major in CS.",
    "Yeah, definitely interesting material (and required for CS majors).",
    "I found this to be more time-consuming and harder than 323. But very interesting and stimulating!",
    "I would definitely recommend. The lectures and content are interesting, and while the parts can be challenging, they are not unreasonable, and you do generally get a sense of accomplishment upon figuring out an algorithm.",
    "Great course, must take!",
    "I feel like this is an essential class for anyone interested in computer science. Dan said that he made the problem sets easier this year, which could have been true. I never had to spend more than five or so hours each week working on them, and they were always fun problems to think about. Lectures are fairly interesting but attendance is probably not necessary (the same material is covered in the book for the most part).",
    "'THIS COURSE SHOULD REALLY BE CALLED \"PROBLEMS, AND HOW TO SOLVE THEM\"'. AND YOU SHOULD ABSOLUTELY TAKE THIS COURSE IF YOU WANT TO KNOW HOW TO SOLVE PROBLEMS (the kind that's not personal or political). This year Prof Spielman said the homework was easier than usual... he also makes a conscious effort to reduce things like gender bias in his class.. it's a great class, take it. The most valuable things are the asides that he sometimes throws out in class.",
    "I really enjoyed algorithms this year. It was my first proof based class. I am a CS major and Professor Spielman made it easier this year due to the size of the class, but I still found that the weekly psets took me pretty long time. I would start thinking about the psets on sunday and would work on them every night and was still up late on wednesday night(the pset was due on thursday). After attaining the answer, the proofs took a pretty long time to write up. I have heard that if you are a math major you might find this class easier though. Overall great class though, take it!",
    "A must take for those who are at Yale for a reason. Obviously crucial for CS, I have also found field-specific gaps in the knowledge of friends who haven't taken the course, like in pure math (some very important results come from algorithms - why does a Gaussian elimination similar not exist for higher orders?) and physics (particularly if you like quantum computing - how widely applicable \/ impactful is Grover's quantum search algorithm?). This adds on to the more general point that statistics and CS are two languages anyone looking for success in STEM (life?) must speak. You will learn to think about a range of problems (those for which an input -> output structure can be mathematically defined) in rigorous and novel ways. For CS majors like myself (I declared midway through the course, due to the course), you should look forward to taking it and be prepared to squeeze as much out of it as you can. In my experience, your marginal takeaway does not diminish with how much effort you put into it; plan an otherwise light load.",
    "Algorithmic thinking is very important for any mathematical or computing field so i would definitely recommend this course to my quantitative friends.",
    "Despite how amazing Dan is as a teacher, it was probably a mistake to take this class when I already knew just about all of the material going into it (duh). If you aren't familiar with algorithms, however, definitely take this one.",
    "Any class by Daniel Spielman should be recommended to others. Very interesting material and engaging lectures.",
    "Spielman's the best!",
    "I absolutely would! Of all of the requirements for CPSC major, this one makes the most sense in terms of the skills learned from having taken it and the way it teaches you to think. I am so glad I took the class and I would\/will recommend it to other students.",
    "This is like CS 223 or 323 in workload. You have to put in the hours early and budget your time, or you will not make it through. If you invest in it you will reap the rewards of a new understanding of the various classes of algorithms. This is not a course where you can figure everything out on your own. Other students and TAs are your best resource. Go to all the homework sessions, and if you're struggling, talk to Dan at his Friday office hours.",
    "If you are a computer science major, this is a core class and it is very important to absorb the material in this class. If you are interested in algorithms, prepare to put hours in weekly(ish) psets and starting and proofs for a long time. If you are interested enough, you'll get a lot from this class.",
    "Solid part of the core curriculum, but might be more stressful than 323 for those who are less familiar with proofs and more comfortable with coding. Overall good material but you need to be willing to really get into the nitty gritty part of many proofs, so you don't get to spend a lot of time appreciating all of the content and algorithms. Overall a good course.",
    "TAKE TAKE TAKE. TAKE THE DAN VERSION. This has been my favorite CS class, also my favorite class at Yale. Dan is incredible. Take take take.",
    "Yes. Take it. A wonderful course to take credit\/D if you are a non CS\/math major. You will learn a ton and just start looking at problems in different ways. You will also expand your knowledge of Graph theory along the way. The course also introduces you to a lot of the current problems in the field so that you can start to understand CS research at a higher level, and this is helpful if you are involved in computational work in another field. Taking the course has many rewards, just don't expect it to be easy. You will still do a lot of work."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "365",
  "section": 1
 }
}