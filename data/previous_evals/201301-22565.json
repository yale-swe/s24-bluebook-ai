{
 "crn_code": "22565",
 "season": "201301",
 "legacy_coursetable_course_id": 20861,
 "enrollment": {
  "enrolled": 36,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    9,
    17,
    5,
    2
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    1,
    13,
    13,
    4,
    2
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    30,
    3
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "I feel stupid for saying this about a course titled Algorithmic Computer Music, but there's too much music in this course and not enough CS. You learn a bit about programming in Haskell, but if you took CS 201, you won't be learning anything ground-breaking here. This is a course best left for Computer and the Arts majors. There are no exams, and the grade is based entirely on the weeklyassignments (usually programming, but there was one assignment of inductive proofs about Haskell code) and the final project.",
    "Great material; Prof. Hudak is one of the creators of Haskell, and the textbook is his own work in progress. Nice, easy, and relaxing weekly problem sets. Lecture was basically just taking up problem sets and reading through the textbook. Be warned that the course is more about Haskell and learning to use a sprawling Haskell library than about algorithmic computer music. Highly redundant with 432. If you were to pick one, take 432; the signal stuff was better suited to functional programming.",
    "Haskell is a very cool language (I hated it at first, but grew to really appreciate how it worked), but lectures in this class are horrendously boring. The software and textbook we were using were being updated as the class went on (which is kind of cool and kind of janky...), and the applications of Haskell to generating computer music is not very well suited. It's cool as a proof-of-concept, but not really to actually make music\u00e2\u0080\u0094that's best done by humans. The psets took a lot longer than I expected, but really made you learn the language, so that was good.",
    "Absolutely take this class! Really I think this class should be called something like \"Functional programming with applications to music.\" Most of the class is really learning about Haskell and proof by computation, which is truly a pleasure. Prof. Hudak is one of the people who designed Haskell, so he's really good at conveying what's so cool about the language. Basically, the language is declarative rather than imperative; instead of programming with sequences of instructions, you simply declare what you'd like to be true, and the compiler figures out the rest. I think anyone remotely interested in computer science should take this class. The lectures are somewhat on the slow and boring side, but Hudak's (free!) book, Haskell School of Music, is awesome. The work consists of pretty enjoyable weekly problem sets, and a final project where you're basically free to do anything cool involving Haskell and music.",
    "Only take this class if you are willing to look past a buggy and frustrating programming environment.",
    "Take it if you want to experiment with functional programming and you don't mind doing math with music in mostly tedious assignments. The material isn't very interesting, but you can do some fun things musically in Euterpea.",
    "A below average class. For a cs class, it is not a ridiculous amount of work. That said, I never really felt like I had a good grasp of Haskell. The hardest parts of the assignment was not the algorithm, but figuring out how to do really simple things like divide two numbers or read an input. This made class REALLY frustrating. The textbook was also HORRIBLE. I learn more useful information from the back of a cereal box than I learned from the textbook. If you don't understand a concept on a pset, you will have a long night of googling ahead of you.",
    "I would recommend this class to any computer science major looking for a fun, low-stress elective. The workload isn't terrible, although one problem set more or less destroyed the whole class. You end up learning more Haskell than music composition, but it's worthwhile since Haskell (for great good!) is a very fun programming language to work with. For some problems, I'm convinced you can't do better.",
    "I'd recommend this course\u00e2\u0080\u0094I learned a lot and had a lot of fun doing the homework and final project. We learned some really cool concepts about functional programming and computer music.",
    "This course uses Euterpea, a library Hudak wrote for Haskell, to mess around with music. I'm a CS major and musician, so I thought this course would be perfect for me.I foundout that the musical component of the course is pretty small\u00e2\u0080\u0094little musical knowledge is required, and it's hard to do anything creatively interesting with music since most of the results of our code sound like three two-year-olds at a keyboard. Euterpea is a little buggy, and code often doesn't really run that well on student laptops or Linux machines in the zoo. That's a problem when 25 students are trying to use the three windows machines the night before a problem set. Last, the TF was incredibly unforgiving on problem set grading and overall very unpleasant to interact with. Know what you're getting yourself into. The first problem set (assigned during shopping period) is a good indication of how the course will go.",
    "A good class for learning functional programming in Haskell through the context of algorithmic music. It was more a Haskell class than a music class by far.",
    "It's an alright course overall. Its focus is more toward Haskell than Computer Music, so keep that in mind. The difficulty of the weekly assignments varied pretty greatly, and the strict lateness policy was a bit annoying. Just make sure to start the assignments early and ask for help if you need it-- you'll save a lot of time overall on the assignments.",
    "I say stay away from this course. The professor just goes over the textbook in class. The textbook (written by the professor) needs a lot of improvement before it can be of substantial help to you in the coursework. I didn't really learn haskell and I didn't really learn anything substantial about algorithmic music, except for the final project (which of course was learning separately from the course). Problem sets are 80% of the course grade, so I spent many a nightup until 5am stuck on the stupidest problems that weren't addressed in the textbook.",
    "This is an introductory Haskell course with applications in music--not the other way around. Take it to learn functional programming.",
    "I found the weekly problem sets to be very manageable, and the material in the first half of the course was very enriching to learn \u00e2\u0080\u0093 generating music from code \u00e2\u0080\u0093 especially since I had never used haskell before. The second half of the course did not cover topics I was interested in, but the final project let me aim more in the direction I was expecting. I feel like there is a whole lot of unopened potential in the field of computer music, and this course, even if not the most incredible one you'll take at Yale, is a good place to get started if you have any interest in this area.",
    "Prof. Hudak is such a warm, intelligent teacher. Haskell is also a surprisingly intuitive language. Aside from the first problem set, the assignments were quite manageable, and the final project was fun. Unfortunately, Prof. Hudak speaks quietly and he teaches right out of the textbook, so the lectures are quite boring.",
    "It's an incredible course in functional programming, and you learn a couple cool applications of computer music. This class is a lot more compsci than music, but that should be expected since it's listed as a 400-level CPSC course and full of CS majors.",
    "This is a good class if you are trying to balance out your work load. The class wasn't so bad, but I didn't feel I learned all that much.",
    "The course is pretty interesting, but overall I wouldn't have taken it. It was the least interesting of my CS electives so far (Robotics, Wireless, Database Systems).Strengths: 1. Interesting field of use\/study; 2. Very clear, great textbook;Weaknesses: 1. Lectures were really plain and boring, just repeating textbook; 2. Didn't really go as far past the subject matter covered in 201 as I would've liked (e.g. Monads, a complicated but essential topic wasn't really covered); 3. Problem Sets are not as exactly specified as they could be for straightforward input-output problems, leading to weird grading",
    "I'm not sure I would recommend CPSC 431. If you want to learn Haskell and make music come out of your computer (which, admittedly, is pretty awesome), without a huge workload, it's a good course for you. However, I didn't learn a lot more than that, and learning Haskell dragged on a bit.",
    "This course claims to teach you about algorithmic music composition--an astonishingly interesting subject--but instead ends up not really teaching much except beginner Haskell. Don't take this course unless it dramatically improves or your real interest is in function programming languages (like Scheme, which are cool in their own right). Lackluster lectures don't help.",
    "An interesting class, but some organizational issues. I learned a good amount about functional programming in Haskell which is useful in that it gives you a new way to think about programming, but the topics were taught in a somewhat haphazard way. The weekly psets varied drastically in difficulty, but generally represented a substantial week-to-week time commitment. It seemed like Professor Hudak often underestimated the difficulty of his own psets, since the solutions are often very simple, but conceptually require a lot of thinking.",
    "It's an interesting course, I would recommend it to those with some background in music composition. While such a background is not officially required, a number of the assignments are difficult to complete without it.",
    "I would recommend CPSC431 to another student, particularly someone who was musically inclined because making music with Haskell was really cool. I had no music background, which was unnecessary for the course. If you're looking for a chill CS elective, take it!",
    "An interesting class taught in an interesting language that is plagued by being very poorly organized. An average workload, but poor lectures and an exceptionally poor TF in Donya Quick.",
    "Lots of functional programming. Haskell is difficult because of the types, so start the first assignment early and ask for help. Once you've learned Haskell, it gets much better, but at the beginning, it is painful. Take the class if Dan is TAing!"
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "431",
  "section": 1
 }
}