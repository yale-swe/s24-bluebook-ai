{
 "crn_code": "10683",
 "season": "201903",
 "legacy_coursetable_course_id": 52934,
 "enrollment": {
  "enrolled": 132,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    2,
    8,
    24,
    32,
    27
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    2,
    16,
    32,
    34,
    9
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    5,
    9,
    28,
    40,
    11
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    17,
    25,
    29,
    16,
    5
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    3,
    15,
    50,
    26
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    0,
    9,
    31,
    52
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "I developed some coding knowledge. Fair amount about C and pointers, some things about architecture, and ways to organize data.",
    "I feel like I've gained a lot out of this class. Going into it with almost no programming or cs experience and coming out of it (although that being a terrible idea for your health and grade), I felt disappointed with my performance obviously but happy with how much I've learned. I feel confident writing in C and being able to implement very basic data structures as a result.",
    "How pointers work and how to properly allocate\/free memory in C, important data structures (e.g. lists, hash tables, trees, graphs), some algorithms (e.g. Dijkstra)",
    "C programming, the annoyances of not having a garbage collector, pointers, data structures, runtime, dynamic memory allocation (and worrying about freeing it).",
    "I learned some c i guess. data structures!",
    "Learned the conceptual ideas behind several useful data structures and their algorithmic run times in different implementations. Became more comfortable coding in C and coding in general, and with debugging my code. Learned about how data is stored in computers and how that data can be used\/interacted with.",
    "Good foundational knowledge of basic data structures, in depth knowledge of C, basic problem solving techniques that help with future coding problems",
    "How to program in C. Arrays, structs, files, dynamic memory allocation, stacks and queues, trees, linked lists, hashmaps, graphs.",
    "I learned a lot about data structures and how to efficiently implement them.",
    "I learned a lot about C and the basics of various data structures: stacks\/queues, trees, graphs, etc.",
    "- how to program in c - data types in c - arrays - using pointers - linked lists - hash tables - queues - binary search trees - avl trees - red black trees - splay trees - heaps - graph data structures - breadth first search - dijkstra's algorithm",
    "I learned a significant amount about programming in C, and how to pick up the tricks of the trade in a short period of time.",
    "Data structures and programming in C. Learning how to deal with frustration. Making sure I pseudocode really carefully before I start writing! Debugging with gdb (haha) instead of print lines :')",
    "Becoming comfortable programming in c, and creating data structures with varying strengths and weaknesses as well as analyzing their runtimes",
    "I learned various data structures and familiarized myself with good programming practices in C.",
    "Data structures such as graphs, trees, as well as some algorithms such as BST and Djikstras.",
    "I learned a lot of very useful concepts about common data structures (trees, hash tables, etc)",
    "I learned a lot about how to use pointers in C, and about coding large programs. I also learned a lot about how to draw trees and the theory behind creating effective data structures (hash tables, trees, graphs) for storing large amounts of data.",
    "Various data structures: arrays, linked lists, hash tables, binary search trees, graphs. Also how to manage memory and running time of programs.",
    "C",
    "I learned all about data structures in this course.",
    "An undertanding of various data structures in C implemented as ADTs. We also spent a lot of time learning about types of binary search trees.",
    "I learned a substantial amount about programming techniques and data structures. I feel like I now have a decent grasp of programming in C.",
    "Coding skills in C, understanding of basing Data Structures, basic understanding of computers as a whole",
    "This class will teach you how to program and how data structures work. It is an essential class for being able to program effectively. I became a better programmer and now have a much deeper understanding of how to manipulate data structures to optimize for various operations.",
    "Data structures amongst other things. Learned how to code in an academic setting",
    "Confidence in writing solid code to solve complex problems.",
    "Data structures and programming in C. Oh the pain of programming data structures in C...",
    "We learned about data structures and Glenn really talked a lot in class about how to use C",
    "I learned about lots of data structures. Binary trees, queues, linked lists, hash tables, and various other data structures. I also become very comfortable \"thinking in C\" and I understand a lot more about how to implement programs. I also learned to make makefiles.",
    "I learned to code in C, and about different sorts of data structures. I also gained skills on how to build custom data structures and functions for a certain application.",
    "I developed a pretty deep understanding of the C programming language and how to implement some of the most basic and important data structures from scratch. This course also taught me how to manage the work of some challenging problem sets.",
    "I learned how to write larger programs and efficiently structure them for easy maintenance.",
    "This year, Glenn failed to cover everything he intended to in the syllabus, and I was pretty disappointed as a result. We didn't go over dynamic programming and rushed very quickly through 4 tree data structures in the last 4 lectures. I got much better at C programming and programming in general and I felt like my debugging skills got much better over time, I just wish we had more data structures to study, as we skipped\/skimmed a lot of important ones that I feel are necessary for students going into industry and preparing for their technical interviews.",
    "C, data structures like trees, queues, hash tables, etc.",
    "I have learned about programming, problem-solving, data structures, and implementation in C.",
    "Learned lots of different data structures, how\/where to implement and use them, and some basic programming style.",
    "I developed a deeper understanding for data structures and lower level programming due to the use of the C language. Psets taught us a lot about memory allocation and concepts that we would otherwise not consider in other easier languages like Python and Java.",
    "Knowledge on data structures: arrays, hash tables, trees, graphs",
    "Programming data structures in C.",
    "This class taught me a lot about C and effective use of it. I learned how data structures can be leveraged to write more effective code",
    "Knowledge of data structures and programming techniques in the C coding language. By the end of this course you will not be scared of any programming challenge, but it is a very time intensive course.",
    "I learned a lot about data structures. I learned how to debug effectively. I learned about computer memory allocation.",
    "Programming in C and major data structures. Exactly as described.",
    "Data structures and memory allocation",
    "I learned the concepts of key data structures and how to implement them.",
    "My C programming skills were greatly improved. I learned how to effectively use valgrind, gdb, and how to write makefiles as well.",
    "Data structures and algorithms. Trees, a lot of them. Abstract data types. Programming in C.",
    "How to code properly, how to use data structures",
    "I learned a lot about different types of data structures: binary search trees, undirected graphs, hash tables, queues, structs, ADTs, etc. Also learned about state machines. I became a much more efficient and critical programmer. I learned how to write MakeFiles and implement opaque structs. I learned about dynamically allocated memory, runtime, functions, and arrays. I learned about the breadth-first and depth-first search algorithm. I learned a lot about the C language.",
    "This course taught me to think and code in c using multiple types of data structures.",
    "I really got a great fundamental survey of data structures. I especially learned about pointers, hash maps, trees, etc. While it is of course a tough class, I do feel like I learned to code.",
    "I developed an understanding of data structures used in computer science and the algorithms associated with them.",
    "I learned how to code programs in C. I learned how to use online resources to supplement course lecture.",
    "I developed an understanding of pointers, memory, data structures, some algorithms, and time complexity when it comes to creating and running programs in C.",
    "Fundamental knowledge about computer programing",
    "How to program, the technical skills for c, how to do efficient programming",
    "Learned important programming techniques and algorithms in C, from hash tables, to various ADT implementations, to binary search trees, to graphs. Great for teaching core computer science concepts that is useful for anyone in a STEM-related field.",
    "I learned how to code different data structures in C including hash tables, arrays, linked lists, trees, and graphs.",
    "Knowledge of C, creating software using different data structures",
    "You learn the (more advanced than high school for me) basics of data structures and how to get around in C. I also found it cool that we really learned how C works at the computer level with memory and all.",
    "Knowledge about the benefits of different data structures and achieving better runtime.",
    "I really learned a lot. We discuss different algorithms and data structures that are seriously interesting and helpful, and I think it improved my coding ability and efficiency a lot.",
    "Data Structures (linked lists, hash tables, arrays, binary trees, graphs)"
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "This class felt like it was made harder than necessary. I really wish there had been lecture slides that could be reviewed later--the way the professor did a stream-of-consciousness illustration of his lecture did not really help me, since if I was trying to write something down I would miss what he did next. I also wish that grades had been posted more promptly and that there had been more clarity about what scores mapped to what grades. Obviously if you're a CS major, you're stuck in the course anyway, but for those of us who aren't, it would be nice to be able to make a more informed decision regarding credit\/d.",
    "Professor Glenn really tries to teach and starts literally with the basics, which is appreciated, even if his teaching style didn't work for me or anyone else I knew. Weaknesses include how much he asks for in his assignments and his teaching, but strengths include his enthusiasm.",
    "Strengths: rigorous course which teaches you very useful concepts in C programming and data structures useful in the industry. Weaknesses: not experienced this personally, but this course dives into C very quickly and some students may fall behind.",
    "strengths: engaging psets weaknesses: moved too fast some times, psets took a long time",
    "The course does a good job at making you figure things out in a practical sense after having gone over them in a general\/theoretical sense. It makes you get better at coding basics and pay more attention to little things, debugging, and memory storage\/manipulation. The psets are challenging in a way that forces you to figure out how the data structure works to be able to implement it well, and upon completion, the psets sometimes did some pretty cool things (like planning a trip!). Prof. Glenn is good at explaining the concepts, though it is sometimes hard to fully absorb\/interact with the details of a concept in the huge lecture format. For me, the main weakness of this course was that, beyond lecture, the main place where the learning can take place is in office hours. But usually, the wait to get help from a ULA in office hours would be about 3 hours long, so if you got stuck in the pset or needed help understanding a concept while your peers worked on their own problems, it would take a lot of frustrated waiting and time before you could get helped.",
    "Strengths: James Glenn!!! His memory diagrams were really helpful for understanding pointers, memory allocation, and data structures. I think that his notes were a bit hard to read at times, but they were overall useful for completing the problem sets. The problem sets were really challenging but they really forced you to engage with and understand the material Weaknesses: We didn't receive our grades or feedback on the problem sets for a super long time. So you couldn't improve any subsequent problem sets because you never knew what you were messing up in past homeworks. It may also be helpful to have some sort of staff solution that allows us to see how we could have improved the efficiency of our algorithm in order to write better code next time. Also, the beginning of the course is really hard to follow if you have never taken a CS class at Yale or have no knowledge of C. Slowing down a bit in the beginning so that people can understand the basics of C and how to even run\/compile a program on the zoo would be really helpful.",
    "There are way more students in this class than properly allocated resources for students. More thought needs to be put into structuring the help hours. ULAs are scrambling to get through insanely long queues of students, who are waiting 2+ hours to be seen and receive rushed feedback.",
    "Problem sets help you understand material. Lectures are not as useful.",
    "I disliked the grading emphasis on handling edge-cases. A program that implemented the correct algorithm but did not check if 'abc' is an integer scored worse than one that edge-checked inputs and used an inefficient algorithm.",
    "The problems sets were great. I learned a ton doing them. I learned less during lecture itself. I think more time in lecture should have been spent on high level analysis of the data structures. The code on the board could be hard to follow and I did not always feel like I had a strong intuition for some of the data structures. We usually learned through example, which I did not like. I would have like a more conceptual overview following more analysis with an example.",
    "The strengths were in the quality of the psets, and the material covered in them. The weaknesses were oftentimes in the understaffing of the TFs. Also, the lectures were not exactly engaging, and rather unstructured. It felt like each class was just a continuation of the previous one, with no distinct lesson plan. So if you were to miss one class, you were kinda screwed for the next one. I find that lectures should be less like complex TV in this way, and more like old-fashioned drama shows where missing an episode does not destroy your enjoyment (or comprehension) of the next, but watching an episode does obviously enrich your enjoyment of the next.",
    "I am slightly concerned: half the class rarely shows up to lecture\/office hours and still does really well on the assignments and exams...? Personally, I thought lecture was effective and attended both class and office hours regularly but still felt frustrated with several of the topics due to lack of background (I guess?) in computer science. I would really appreciate a better office hour systemduring peak hours it was difficult to be helped within 2 hours of arriving, but I understand that could be solved by starting the assignments earlier",
    "Strengths: psets were very well designed to enforce many concepts and edge cases, resources on 223 website were helpful Weaknesses: sometimes what you had to do in psets was a bit vague, lectures were thorough but lacked urgency",
    "The material was good, but the pacing was too slow.",
    "Useful and practical material",
    "This course is extremely time consuming. Be prepared to spend 20+ hours on the biweekly psets. However you do learn a lot and it feels like all the work is worth it. This course would have been impossible without office hours so make sure to attend those as often as possible. The fact that this class is taught in C makes it so much harder but it also makes you a more disciplined programmer.",
    "I enjoyed applying what we learned in class in the psets. The psets were the main chunk of learning for me, so I do wish that the psets were more frequent, and were broken up into smaller parts that could be tested. Often, I think the psets were tested in ways that many parts had to be completed, so I think it made it hard to know if you were on the right track. The lecture notes were on the course website, but because Prof. Glenn wrote the notes in class, it was hard to be able to use them outside of class. I think the Piazza page was nice and very well kept.",
    "The course was pretty well balanced. Thought the exams were fair and psets were spaced well. Perhaps less worrying about error checking and more on the actual implementation. Also being able to see the private test cases or at least a longer description, because I often did not know why I would fail the cases.",
    "Strengths: - Developed a rigorous understanding of C Weaknesses: - Instructor was a terrible lecturer - Problem sets were unnecessarily tedious and had more to do with edge-casing than actual topics - Graded problem sets were returned extremely late",
    "This course could be improved by having more problems sets that are a little bit simpler. I would have a better understanding of more data structures if this were the case.",
    "Lectures are weak but do often help with the problem sets. It would have been nice to have gotten feedback on our style of code-writing. Office hours are bad, there are not enough TAs and they are poorly run. It would have been helpful to have an office hour session that generally addressed how to approach a pset, lecture style, instead of always having to wait an hour or more to get 1 on 1 assistance.",
    "Strengths include varied lecture material and varied problem sets. Weaknesses include large class size and less problem sets than previous semesters.",
    "Class is engaging, and decently interactive. Problem sets are usually a little tricky at times, but always very fun. I thought it was a particularly nice touch how the last problem set called back to an earlier one, so we could see how much our programming skills have improved over the semester.",
    "Strengths: assignments are difficult and really require engagement with the material.",
    "Honestly lectures were very ineffective.. so easy to just skip class and just catch up with all the available resources online. class didn't even help with midterm\/final because when things were taught in class they were usually taught poorly. Shout out to ULAs Kevin and Jau for literally saving my life during the problem sets.",
    "Lectures never seemed to be quite helpful for most of the homework assignments. I would say only the lectures on hashtables and graphs were directly helpful, and that came at the very end.",
    "We didnt get grades back for a long time, but the grading scheme was generous. I also felt like psets were too large a part of our grade for my personal taste. Not sure if this is a strength or weakness but I took half of this course with another professor in the past and dropped the class and there wasnt that much overlap. One class was more algorithms based with less instruction with C and the other was very informative about C and data structures but we never covered the algorithms.",
    "The biggest strengths are definitely the problem sets. They challenge you to think critically about the program you are writing both in terms of actual implementation and when edge casing your program. Another strength was lecture. I think a big problem was that so many people stopped going to lecture and then couldn't do the problem set but having gone to lecture and stayed engaged I would say it was a great help to being able to approach the problem sets. Another strength was piazza; instructors always responded quickly on good questions. A weakness I would say was office hours. I stopped going after the second pset since they got waaaayyyy too full so it was better for me to google specific problems I had or just try to figure it out myself.",
    "This course really teaches students about data structures, basic Big O analysis, and how to program using a low-level language like C. The main issue I had though was the lacking number of ULAs considering the difficult nature and size of this class. There where some days in office hours where I could sit there for over two hours before I got help because of the long line of students ahead of me.",
    "Strengths: Interesting problem sets with appropriate difficulty. Weaknesses: The course material did not seem to have been structured.",
    "The most frustrating thing I found about this class was that the previous assignments were not returned before the next ones were due. This was frustrating, as students were not able to learn from their mistakes from previous assignments and could repeat mistakes (which would result in a loss of the same points) in future assignments as well. Also, given that this is the first class that requires edge casing at Yale, I would have liked some guidance from the ULAs\/Professor Glenn on how to approach this.",
    "Glenn is a great lecturer. He's clear and concise and explains the reasoning for the structure of data structures well so that it becomes intuitive. He lectures with a OneNote notebook that he projects onto a screen and honestly this turned out to be a good way to teach C and data structures as he color coded his presentations which made everything really easy to understand. I found his lectures useful, but not absolutely necessary to attend as he posts his color coded notes online, which was nice. I felt like Glenn spent way too much time on simple stuff like arrays and pointers and we didn't get to linked lists until after the first midterm!! I felt like the pacing was simply too slow and unnecessarily thorough at the beginning, which eventually made it so that we didn't have time for some important data structures at the end. As a student intending to go into industry and needing to prepare for technical interviews for internships, I felt like Glenn failed to adequately prepare me. I sure got good at C, as he spent a really long time explaining the basics of the language, but I missed out on important data structures that I now have to study on my own time. In the last 5 lectures or so, Glenn raced through red black trees, splay trees, binary search trees, kd trees and priority queues, and we only spent a week on Graph algorithms such as Dijkstra's algorithm and breadth first search. For this class, we only had to implement a 2-D tree and only had to implement a basic breadth first search for tree data structures and graph algorithms, and I felt like this was not enough. An oft-repeated reason for why data structures at Yale is taught in C is that you get to understand how the data structures really work under the hood, and I firmly agree. This, however, because of Glenn's pacing, came at the cost of covering less data structures. If this class was taught in some higher level language like Java or Python, then we probably would be able to get to work with many more data structures during the course.",
    "Strengths: Glenn was very fair in assigning psets (like he gave us the .h file for a pset which saved massive amounts of time) and his tests were also very fair. The psets were pretty cool, but definitely time-consuming (but I see why that was necessary). The ULAs were immensely helpful!! Weaknesses: Lectures were boring and I stopped going to them in October.",
    "The programming assignments were a great way to implement the data structures from the lectures. However, the lectures often seemed pretty unorganized, the notes were very hard to read and follow, and it seemed strange to use another professor's notes as my main guide for homework.",
    "I took the class as a first year, and the psets were much more difficult than I expected. Memory allocation was something I had never done before and it counts a lot in our grades\/results so I ended up not doing as well as I had hoped. I would recommend starting early on psets and communicating with ULAs and other students to try to figure out edge cases. One issue with the class is that it takes a while to get back pset results.",
    "Although some of the topics on the syllabus were not covered, the topics that were covered were engaging and relevant.",
    "One way to improve this course would be to have more opportunities for feedback from the professors or from the teachers when it comes to our assignments.",
    "Class was very challenging but because of this taught a lot of creative thinking and solutions I would not have expected",
    "Strengths of this course is that you will learn a ton from the problem sets, both about some useful topics in computer science theory and many techniques for programming. Lectures are relatively well structured and presented. Office hours are a huge plus and the ULAs are extremely helpful. This is mostly on me, but this course could perhaps be improved by being more clear about expectations for grading at the beginning of the course. Professor Glenn did hint at the fact that the private tests he uses for grading are much harsher than the public tests that he gives you for writing your programs, but most students such as myself didn't realize the extent of this until after we were most of the way through the semester. To this end, it would've been nice for it to be more clearly explained in lecture that passing the public tests only gets you to around a B- grade, and that further testing is needed to move the grade up from there, and it would also have been nice for the ULAs to have similar information with regard to this (since two that I talked to told me not to worry after I began passing the public tests). Again, this is mostly on me, but it would have been very nice to have this understanding from the beginning.",
    "I think the class is taught very well. Lectures could be more engaging.",
    "This course does a good job of forcing students to learn by doing. The PSETs are incredibly important as they help you build confidence in the topics discussed in class. As such, the class does a good job rewarding hard work on the PSETs. That said, the class was inconsistently paced (we moved too slowly the first half and too quickly the second half), forcing us to skip over some material and run through the most complicated material of the course rather quickly. Moreover, the PSETs could have been more tailored to the critical material. For example, a long PSET might take 25 hours to complete\/test, but only half of that relates to the data structure at hand. The other half relates to other elements that are good to know, but no essential (e.g. input\/output). Professor Glenn aptly noted that a few of the PSETs in the middle of the course were getting a bit long and cut down some of the later ones. However I recommend that PSETs throughout the course be more tailored so that they remain a manageable length while still teaching us the necessary elements.",
    "I procrastinated on the assignments way too much",
    "The professor is great, very knowledgeable and approachable. The office hours get crowded though.",
    "This is a solid core class for the CS major. I liked the pacing of the assignments this semester (as opposed to the previous semester), and prof Glenn does a great job coding in class for us to see. Prof Glenn also draws great colorful diagrams and uploads a lot of helpful notes to the course website.",
    "Strengths: fantastic problem sets, fantastic lecturer, and fantastic exams Weaknesses: lecture sometimes seemed unrelated to the course material and problem sets",
    "The problem sets are very challenging and rigorous. I enjoyed coding them--the programs we wrote seemed very applicable to the real world. The workload was extremely heavy but thus felt very rewarding. The lectures weren't great, but they were very practical and definitely helped with the psets. I never went to office hours because they were way too overcrowded and hectic. That was definitely a weakness. The lectures could be improved by being a little more organized--a lot of them were just Glenn scribbling on a notepad for 75 minutes. But I understand it's difficult to prepare lectures about coding. Another strength was that a lot of time was given for each problem set, although it was hard to allocate that time well. One other weakness was that the test results were often hard to understand and inputs for private cases weren't shown.",
    "This course was difficult for people who had never coded in c because learning the language was a long process that took multiple problem sets. All the assignments took a large amount of time and could have been more enjoyable shorter and would allow more time to be spent on other classes or sleep.",
    "It is just a really tough class. I wish we didn't have problem sets while we were supposed to be preparing for big exams. It added way too much stress. Also wish we had talked with more depth about hash tables. I also needed more comprehensive notes from class. Glenn is a great professor and likes visual learning. But when he coded in real time, I had trouble keeping up and following the nuances of what he was doing.",
    "The psets are sometimes very long and poorly explained. You oftentimes has to wait hours before someone saw you in office hours, which meant you were better off just figuring stuff out on your own anyways.",
    "The lectures were not very helpful for the course. While the course notes are excellent, the lectures were not focused and often covered extraneous, tangential information rather than necessary course material.",
    "Strengths: programming assignments Weaknesses: lecture notes are relatively disorganized",
    "The gap between homework assignments was immense. The material we learned in class did not prepare us for new assignments.",
    "I think some strengths of the course include its slow pace. I believe it did a very good job of providing some fundamentals first and then moving forward to more complex implementations. However, a weakness of the course was its limited cover of algorithms.",
    "Not a lot of instructor engagement but that is natural for this type\/size of course. Pluses are professor Glenn still seemed to know many of the students which was much appreciated. He's very kind and fun to talk to. Perhaps thought some of the problem sets had confusing instructions for what was acceptable output and caused me to lose some easy points.",
    "More help",
    "The main strength of the course was definitely in the material that it taught. I really felt that I gained a deeper understanding of computer science by taking the course. The problem sets, while good at reinforcing the material discussed during lecture, weren't particularly interesting to me, although they did force me to practice and learn the material on my own. Professor Glenn's lectures were pretty dry as well, and it was hard for me to maintain concentration throughout the duration of the lectures. One definite improvement that I think could be done is to somehow decrease the amount of time it takes for our problem set grades to be returned to us. I remember that it took a long time to receive any feedback from PSET 3, 4, and 5, which makes it difficult for students to know where they stand in the class.",
    "The class is great because the material is interesting and the assignments, although taking many hours, teach you a lot. Lecture could definitely be improved on though. I have been to Professor Glenn's office hours and they were super helpful and he was really good at explaining concepts, but somehow in lecture with the live coding and switching between screens, sometimes what we're learning is unclear and it's very hard to pay attention. I think if Professor Glenn started each lecture with an outline of what he was going to talk about that day, that would help a lot with understanding what's going on often times I'd have no idea what we had learned in class until starting the assignment.",
    "The lectures are kind of scattered and their relation to the psets are not always clear, overall the organization could be improved a little",
    "The main strength is just giving you a lot of work. You come out better for it, and the class is clear and well structured. No real weaknesses I can think of, just know it's a fair amount of work (but manageable).",
    "There seems to be a disconnect between the class and what happens at office hours. For example, in class code is written on EMACS but the vast majority of students and TAs code on sublime or visual studio. I know it's not a big difference but it just makes the learning curve that much higher when you have to go to office hours to get a walkthrough on how you should get set up to take the class because the professor does something different. Grades also came out way too late. It's kinda embarrassing that I did not receive a grade for homework I did in November until I was at home celebrating Christmas. That could certainly be improved so that you can more efficiently study for exams. A big strength though is how much you learn. I definitely walked away from this course with greater confidence in my programming ability."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "Not really. Glenn is a nice guy, but I don't feel like he explained things clearly. As a non-CS major, I can't offer comparison with other profs. But I wish Yale, illustrious and renowned educational institution that it is, would excel... I don't want fair classes, I want top-notch ones, and I feel like I could've gotten just as good of education in CS at my hometown state college.",
    "I would recommend taking this class after gaining some real programming experience. Cpsc 201 as a prerequisite for anyone who does not have experience with programming langauges is a bad idea. I know because this was me and the start was miserable. I would also suggest knowing C going into this class to save suffering.",
    "As a non-CS major, I wasn't the biggest fan of this course nor was I really interested in the material, but I feel like in this day and age, every STEM major should know data structures. Glenn is an interesting lecturer although most of the time his voice is pretty monotone. Try to stay ahead of schedule; office hours the few days before assignments are due are overcrowded. Assignment 3 will probably be the most difficult one, so as long as you get past that you will be fine. For the last few assignments, he gives pseudocode of the algorithms you need to implement so they aren't that bad. Some of the private test cases were exceedingly impractical and felt like \"gotcha\"s. I do admit that I learned a lot from this course, and overall do not regret taking it.",
    "if you have to take it for the major, then yeah lol. otherwise, no.",
    "Brace yourself for the grind in this class. If you're excited about coding and want to learn more fundamentals and useful concepts for writing code, then this class's content will probably be to your liking. But it's hard work. I wouldn't recommend taking this without either a decent background in coding\/logic\/math or a strong desire and will to improve your coding chops. The assignments were sometimes rewarding (getting the code to work is cool), particularly if you have a proclivity for aviation or trip-planning, but they were sometimes frustratingly difficult to the point of misery. Prof. Glenn is pretty fun and good at explaining the concepts and is generally very Spock-like. Though lecture can get a little tiring\/emotionally distant, it had its moments, i.e. churros > cheese, the squirrels and deer are the problem because they never know to avoid the sticky grass, and featuring the most impressive collection of memorized airport codes you could ever imagine.",
    "Probably not worth it if you're not thinking about majoring in CS because it's pretty time consuming.",
    "Yes because you do learn a lot of essential information that will help you later in your CS endeavors.",
    "Only for the major",
    "I would recommend this course! You learn a lot from coding the psets. You will feel comftorable breaking down big problems into a lot of small problems. You must be comfortable learning by doing.",
    "Yes, it teaches you how to grind, how to fail, and how to teach yourself things you don't understand and that feel over your head. All these skills will be invaluable to me later in life.",
    "Yes! I didn't have fun taking this course, but I grew a lot taking it. I spent 20-40 hours on each assignment, which worries me a little bit, but I think I came out of the class with a good understanding of most of the data structures we covered. Debugging for so long helped me understand C and pointer stuff too",
    "For those of you who can take this course for a major as an elective, do it if you are a solid logical thinker and don't mind coding sometimes for hours on ends. For everyone else I suggest taking an intro CS course to gauge your level of comfort with programming.",
    "I think data structures is a must learn, so yes.",
    "Yes, it had useful information for computer science majors and those interested in programming",
    "Yes, if youre trying to learn the CS you need for the real world, Id recommend taking this class. Super helpful foundational knowledge. Make sure you figure out what kind of note taking style works for you - Prof Glenn is actually a really good lecturer but you do have to pay attention for the full 75 minutes and you do have to take notes. I found that paper notes were soooo much better than taking laptop notes (honestly sitting there and soaking up the lecture without taking notes also works well).",
    "I would recommend taking this course if you have an interest of getting better at computer science. This is certainly not an easy course, but I do think I improved at coding over the course of the semester. This course also facilitates long psets, so only take the course if you enjoy taking the time to really think deep into problem sets.",
    "Great class to improve your programming skills. Psets can be long but are generally manageable if you start ahead of time.",
    "No",
    "Yes, If they are interested in computer science, they should take this course.",
    "Yes, it's a good course and you will learn a lot about C just by completing the homework. The lectures aren't great, but the tests aren't too hard either, so it's fine. Psets take between 10 and 20 hours over two weeks.",
    "Yes, I would recommend this course.",
    "I would recommend this class. It can be tricky and frustrating at times, but lectures are clear, exams are fair, and the problem sets are very fun. Compared to 201, you will learn much more in terms of programming as a whole.",
    "Take the class, but know what you are getting into. I spent ~20 hours\/pset, which are due every 2 weeks. You think it's 10 hrs\/week but in reality you do nothing for the first week and cram the whole thing in the second week. It's If you want to work in software engineering, you have to know this material. If you are majoring in CS you have to take this class. In general, I would take the class if you are interested in taking a deeper dive into CS than CS 50 or 201 and are willing to put in the work. Of course this class quite bearable, but it is still a reasonably hefty amount of work compared to your average Yale course. Now that it's over, I am glad that I took this course, and if you can manage the time, I would advise taking it. Yes, it's a lot of time invested, but you really come out with tangible skills and applicable knowledge.",
    "If you gotta do it you gotta do it. No two ways about it. I hear this is easier than stan's so might be the lesser of two evils.",
    "Yes, it is worth it. Definitely not as bad as people make it out to be.",
    "Only if they need to.",
    "I would if you are a computer science major or a related major. Its hard work and there were MANY times that I wanted to give up, but Glenn was very helpful and kind when I spoke to him about my concerns.",
    "Yes! Definitely take this course. Honestly, the difficulty has probably been overhyped. Just go to lecture and start early on the psets and you will be perfectly fine. The exams were extremely fair and going to lecture helped immensely. As someone who started with CS50 as my first cs course this was completely doable and partly review for the first twoish lectures. I feel way more comfortable in my ability to tackle larger project or programs and I feel like knowing data structures has helped me think of better methods of constructing frameworks for projects. Basically, don't be scared. Its good for you!",
    "Yes. You gain important skills in programming and debugging and writing efficient code.",
    "I wouldn't recommend this course to someone unless they were taking it with Glenn and they had to for a requirement. It's pretty time consuming, especially if Eisenstat is teaching it.",
    "Yes; it will help you solidify your coding fundamentals. Being forced to code in a language strict in typing\/memory allocation made me much more aware of the inner workings of my code.",
    "This class is very emotionally taxing. If you aren't a CS genius and usually rely on office hours for guidance, you should be prepared to sacrifice your wellbeing and social life.",
    "Yes, because I felt that I learned a lot about data structures in C. Also, definitely take it with Glenn if you can! I took Eisenstat's 223 last semester and I dropped because it was unmanageable, but Glenn was much more reasonable.",
    "Yes, I would recommend this course, but it is important to know ahead of time that a lot of the material may need to be self-taught outside of class and that all the assignments will be fairly time-consuming.",
    "Yes, it is interesting and applicable subject matter. I enjoyed Glenn, he is an interesting character and puts in the effort to be funny. That is all I ask for in CS. Also, I didn't think it was as hard as some people hype it up to be, but I didn't have Stan.",
    "Yes, I would recommend this course to anyone who is interested in computer science \/ programming.",
    "Yes, if you're a CS major or interested in gaining robust skills in coding. This class is a huge time commitment, so a) make sure you allocate the time for the course and b) make sure you actually like the material. I took it as a non-CS major and my only background in CS was from CS50. The course was hard, but if you go to office hours and start the psets early and pace yourself, it should be ok.",
    "Only if you know why you are taking it. Don't take it because you feel like you are supposed to. Take it if you know why you want to develop the knowledge and skills that it will force you to gain. It is a course that will totally change the tone of your semester unless you already have a lot of programming experience. You do learn a ton, but be ready to work. Start your psets early.",
    "Yes, i would certainly recommend.",
    "Sure, I'd recommend it (and not just to CS majors). This is likely my last CS class at Yale, but it feels nice a nice ending point. It gives you a different lens to think about the world and how we structure data, and that is incredibly useful. Moreover, this class really makes you feel more comfortable in your computer science skills and is essential for SWE interviews. That said, the class is a bit of a grind and definitely could be improved. Make sure it's a good fit for the rest of your schedule, but if you are interested in the material, go for it!",
    "It is necessary for anyone pursuing computer science",
    "Yes, the concepts taught in this class are fundamental in the computer science world.",
    "It's a great course for those with strong programming backgrounds. It's difficult, but one learns a lot in CPSC 223.",
    "good class for CS majors.",
    "Yes, absolutely! Take this if you want to get up to speed with your CS abilities. After this class, you'll know how to code well and effectively.",
    "Yes, I'd recommend it if you want to learn a lot about the core data structures that make up a lot of computer programming. You'll learn a ton about coding in C and optimizing program runtimes, and you'll learn a lot of cool algorithms. The workload is extremely heavy, but it pays off. The tests are rough--a lot of them are private and remain private, so this course will force you to think critically and outside the box. 100% recommend, but don't take it with a heavy workload. Make this class your main focus for the semester.",
    "I recommend this course because you do learn to code in c and find new ways to think of certain problems. However, if you have no previous c experience I recommend asking lots of questions and spending some time on this course.",
    "Yes. It is a fundamental CS class. You need it to really have basic coding skills.",
    "If you want to learn how to code intensively then yes, but definitely dont take it for fun.",
    "Data structures are very important in computer science, and learning C was also a bonus. However, any student taking this course should be aware that lectures are not helpful, and most of the material must be self-learned. It does fulfill requirements, so I would recommend taking the course for those requirements, but the course material on data structures can be much more efficiently learned by not taking the course.",
    "Yes it gives you an understanding of data structures.",
    "I would definitely recommend this course to anyone interested in seriously engaging in computer science. It taught me a great deal and was fun to get to understand a fair bit about how all this works.",
    "Yes, you learn a lot",
    "Yes because you learn good technical skills",
    "Definitely, if you are interested in really learning computer science. The intro courses are good at teaching some basic concepts, but 223 is the first one that really allows you to implement ADTs in code. The problem sets certainly take a while (probably ~20 hours on average, every two weeks), but they are rewarding in the sense that they force you to learn the material. The lectures aren't very engaging however, and I feel like, towards the end of the semester, I learned most of the concepts on my own outside of lecture. Exams aren't too bad (first one is straightforward, second one is harder)--people did pretty well overall, in part probably because the practice materials given beforehand serve as good preparation for the actual exams. This year it took a long time for students to receive any feedback from the later psets, so be prepared to not exactly know where you stand in the class by the last week of classes.",
    "Yes, if you're interested in hardcore coding then it's definitely worth it. You learn a lot. I took it without taking 201, which was hard, but definitely doable.",
    "If necessary for CS credit, but other cs electives are more interesting since this is a very fundamental class",
    "I would. If you want to learn the essentials of programming then take this class. Obviously, if youre in the CS major, also make sure to take this class.",
    "Yes, I would. It's not as difficult or intensive as its reputation leads you to believe, and you really learn a lot of practical skills and improve as a coder. Strongly recommend to those with coding experience.",
    "Highly recommend it if you have time and wanna learn about computer science! This is THE cs class to take. You can definitely claim to have programmed by the end of the class."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "223",
  "section": 1
 }
}