{
 "crn_code": "10682",
 "season": "201903",
 "legacy_coursetable_course_id": 52933,
 "enrollment": {
  "enrolled": 99,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    1,
    5,
    27,
    27,
    9
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    2,
    7,
    27,
    21,
    11
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    1,
    5,
    12,
    32,
    19
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    0,
    8,
    18,
    31,
    11
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    6,
    19,
    36,
    8
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    5,
    29,
    32,
    3
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "I learned about graphs and reviewed a lot of other classes. Honestly, this class is the introductory proof class that the math department never had for me when I took linear algebra.",
    "I learned about many different topics in discrete mathematics and linear algebra.",
    "Basic skills for mathematics needed for CS in general.",
    "Skills in many different mathematical topics relevant to computer science",
    "A mixture of content from set theory, number theory, combinatorics, linear algebra, and other fields of mathematics. Basically a grab bag of basic topics in mathematics that everyone in a computational\/quantitative field should know.",
    "Logic, linear algebra, probability, counting",
    "A lot of math. The course covers basic intros to a lot of different topics (logic, probability, linear algebra, graphs, etc...) and some of the chapters are somewhat unrelated. The textbook and course outline are very clear and while some chapters are more conceptually challenging than others, the course staff do a great job at helping out if you're willing to put the time in.",
    "I learned a lot of basic skills in logic, set theory, graph theory, probability theory (very basic), linear algebra (the most basic intro), number theory, combinatorics, stuff like that. It was a very good and thorough basic-level intro, but the material in any of the areas was not advanced, which I thought was nice, because then we can determine later which areas we would like to pursue further.",
    "I learned a little bit about a lot of different areas of math. I feel better equipped, now, to read mathematical texts and equations, to think logically through problems from one step carefully to the next, to prove logical thought progressions (particularly in terms of mathematical concepts), and to see the beauty in the art of math. I particularly enjoyed graphs, predicate logic (the first week!), and Gauss-Jordan elimination.",
    "Dana was great at teaching the very ambiguous curriculum of this class. I learnt probability, graph theory, proof by induction, logical problems, run times and much, much more.",
    "General intuition about algorithms, logical thinking",
    "Basics of discrete math: propositional logic, sets, graphs, number theory, probability, linear algebra, writing informal proofs, induction",
    "I learned the basic theory behind computer science (graphs, bijections, etc.) and how to do basic mathematical proofs (inductive, structural).",
    "This class exposed me to a lot of different fields including set theory, number theory, graphs, probability theory, and linear algebra, and it was great to get a taste of what each of these fields was like. I had never taken a class that required proofs before, but this class was a perfect introduction to the many different proof methods. I feel more confident now in approaching a problem from many different angles to reach an answer.",
    "Discrete math at a manageable level. First time doing proof-based math.",
    "I learned a lot of mathematics that were brand new to me. It was interesting to start from the basics and build up over the semester.",
    "General introduction to discrete math (counting, sets, graph theory, etc) and some linear algebra. Some limited proofs.",
    "I learned discrete mathematics primarily, with some introduction to probability theory and linear algebra. The course was a good sampler of the math used in CS, but note that for more theory-heavy and technical concentrations such as ML, you'll probably want to take separate probability theory and linear algebra courses that actually dive in depth into those topics.",
    "Logic, relations, sets, number theory, combinatorics, graphs, proofs, probability, and very very basic linear algebra.",
    "I learned a lot about various topics in discrete mathematics such as set theory, number theory, graph theory, combinatorics, and linear algebra, along with writing proofs.",
    "You gain an introductory understanding of several mathematical fields including set theory, induction, lots of proofs, runtime, probability, linear algebra, and more. But the understanding isn't very deep nor is it intended to be. It simply gives you a quick introduction so that you can understand the very basics and so you can know if there is a topic you would like to dive deeper into in another course.",
    "I learned a lot about techniques in discrete math and how to apply them in computer science.",
    "Problem solving techniques, proving claims, discrete mathematics",
    "Learned a lot of more abstract mathematical concepts used in computer science. Learned how to structure proofs and reason with logic.",
    "logic and developing mathematical proofs",
    "Discrete math",
    "I got some fundamentals skills in linear algebra, probability, set theory, etc. Did not learn how to think in any new exciting way. We did a lot of inductive proofs which I had never done before. I found them very formulaic and while challenging, not mentally stimulating.",
    "I learned a lot about mathematical proofs and approaching different types of problems.",
    "Learned a lot about logic, induction, and writing simple proofs for complex problems",
    "Gained important mathematical maturity needed for further study in Computer Science. This course helps you think logically and thoroughly.",
    "I learned about propositional logic, functions, set theory, number theory, graph theory, probability, relations, induction, and linear algebra. I learned how to write proofs using simple and strong induction. I learned how to think outside the box in order to prove things. I learned how to think about discrete math and hypotheticals. I learned how to use mathematical notation. I learned about Euclid's GCD algorithm.",
    "The course goes into the basics of a lot of logic and discrete math concepts in a proof-based manner. The theory-heavy lectures balance out well with the practical problem sets. The course covers logical induction, simple\/strong inductive-style proofs (which are used throughout), time complexity of algorithms, number theory, set theory, probability, and linear algebra.",
    "I learned numerous skills about the mathematical tools that underlie computer science. The Extended Euclidean Algorithm remains one of my favorite techniques!",
    "The basics of discrete math; thinking in a logical manner.",
    "Moderate knowledge of discrete math, introduction to a broad range of theoretical computer science topics."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "The lectures were quite dry and the homework would reflect much harder questions than were ever gone over in class. The pace was always too slow for the homework because we would learn about a topic just two days before questions on that topic were due.",
    "We learn a lot through lecture and psets.",
    "Strengths: a big breadth of topics, get a little bit of everything Weaknesses: you don't get very deep into any one topic",
    "Dana was fantastic at teaching concepts and engaging the class. ULA help hours were also very helpful in completing the problem sets, or just in asking clarifying questions about concepts!",
    "the exams are weighted way too heavily. psets are long, but not worth much of the class.",
    "Strengths- the textbook is great (and free!) and super helpful for the psets, the exams are fair, there are a lot of office\/help hours, the topics are hugely relevant to CS classes at all levels and they do a great job of applying the topics to coding, and it really doesn't assume prior knowledge of math by starting at the VERY bottom and building it up Weaknesses- it might be a bit slow if you've taken previous proof based math classes before, but there aren't really any weaknesses",
    "Dana Angluin is a true gem. She's not teaching any more after this, which is a pity for everyone who won't get to take her class. She is so smart and explains things in a way that people will understand. She's also one of the best professors at fielding questions. To whoever teaches this next, please keep it as simple and crisp as she has.",
    "Prof. Angluin is clearly very seasoned at teaching this class. It was organized super well so that every lecture had plenty of new content but had time for additional explanation (if needed) and step-by-step walkthroughs to each conclusion that we ended up with. In a bigger picture sense, the course covers A LOT of different topics, which means that we didn't go too in depth into any of them but still got a yummy taste of each, just enough to pique interest!",
    "dana was a really caring professor who seemed genuinely interested in the material and well-being of her students. unfortunately, I was not as passionate about the material and found lectures a little boring. I think having some real life examples of applications of class topics would have been useful. Also took a while for problem sets to be returned",
    "This class was well taught and organized. The one downfall i believe is that without any experience in discrete math, i did not feel as though this was a true introduction to the topic. Most of my classmates had experience with the topic in high school and the textbook and lectures were hard to grasp without prior knowledge. I wish there was a developmental class in the cs major before this one.",
    "Learned a lot, great lecture, great notes. Loved it",
    "Awesome class!",
    "The strengths of the course are definitely the TAs, who were really helpful at guiding students through problem sets and making sure they understood everything. The weaknesses of the course are 100% the lectures and the exams. As someone who does not intuitively grasp high-level mathematical theory, I thought Dana did a good job of trying to explain concepts clearly. That being said, lectures were rather dry and dull at times, and I felt that the exams in particular were just too high-level to complete within the allotted time frame. There's a big gap between what is covered in class and what is on the exam, especially in trying to solve them. Unless you're coming in with a strong mathematical background, you'll likely struggle in this class even though you might do well in less theoretical computer science classes.",
    "The strengths of this course were the amazing lectures by Dana and the relevant problem sets that encouraged taking lecture material and thinking outside the box sometimes to reach an answer. The class might be improved by allowing for more time for the last two topics: probability theory and linear algebra. These sections felt a bit rushed, and I really had to cram for the final.",
    "Homework was always consistent, lectures were helpful, and good structure overall for the course.",
    "The course was well organized and well paced. I felt we spent adequate amounts of time on all the topics. The course also had very open, frequent, and helpful help hours. I think the course could be improved by there being more preparation in terms of problems and review before exams.",
    "The course is really fine as it is. It's not horribly engaging but that's the nature of a required math course in a non-math major. The material is necessary and I think the structure of the class is sufficient for teaching it.",
    "The course is ambitious in that it attempts to cover many topics, and I wish there was more time to cover probability theory in detail. Dr. Angluin was terrific and always scheduled help hours, problem sessions, and review sessions for her students.",
    "Professor Angluin is a great lecturer and does a great job of introducing proofs to those who have not done mathematical proofs before.",
    "This class was not the best in my opinion. You really have to teach yourself how to do proofs and its essentially a survey course of various discrete math topics. SO MUCH is covered and you never really go in-depth in anything.",
    "The strengths are in the intended design of the course: here are the mathematical topics you need to be with familiar with for further study in computer science. But the weaknesses are that many of the units are far too theoretical for an applied field like computer science the amount of general\/abstract proofs makes the material feel very distant from the situations to which we will apply it in later courses.",
    "I thought the class was taught well and the problem sets helped a lot for understanding the information.",
    "Practice exams were a big help, but help hours were often scheduled at a time where I couldnt make it.",
    "Had trouble following lecture unless Id already done the readings. Tests were pretty hard but the homework was fair and there was plenty of help through office hours and ULAs.",
    "The course is wayyy to abstract and formulaic. It rarely pushes your mind to think in interesting ways. Instead, it shoves jargon and notation down your throat while teaching you some surface level skills in each topic without ever going deeper. The course needs to be restructured entirely. The problem sets take too long and aren't worth enough of your grade (each is only 2%).",
    "Strength: The material was presented very clearly. Dana is a fantastic professor who made the class engaging and fun! Even if you don't have the strongest math background, this class is very doable if you put in the time and go to OH regularly. Weaknesses: Really can't think of any.",
    "Dana is amazing, she goes above and beyond for her students to succeed. I loved learning in this class and I wish we had more time to spend on the different topics.",
    "The professor does a very good job of explaining the lecture material, though Dana can be kind of dry sometimes. In time, you get used to it, but if you pay attention Dana does a very good job of motivating the proofs and definitions so that they are intuitive.",
    "The best thing about the course was the office hours. There were a lot of them, and collaborating with other students to think things through both helped me make friends and helped me do the problem sets. The problem sets were another strength of the course--they were really challenging and made students think outside of the box. The often took a long time to complete. Lectures were okay--really boring and just a long string of notes. I felt that one weakness of the course was the textbook--it was super dense and overly complex (notation-wise, at least), and I never read it. I also felt that not enough time was given for the midterm. The course would be better if lecturing techniques were spiced up a little with more interesting visuals, instead of just 75 minutes of scribbling on a chalkboard every time. The workload was rather heavy for this class, too, with problem sets due every week. Another weakness was the problem solving sessions--they didn't really help much; a lot of them turned out to just be a restatement of the problem descriptions.",
    "Dana is definitely the courses greatest strength, so I cant say for sure how itll be when taught with a different professor. She does a great job of explaining concepts very clearly, providing examples, and all-around being a kind person who genuinely cares that everyone is learning and enjoying the class. Occasionally, as all classes do, the class gets a little dry, especially with some of the concepts that are covered for longer than others. However, lectures are overall usually pretty engaging. The exams are quite fair given the class material, problem sets, and especially the practice exams. Dana is also very generous about allowing late problem sets, and office hours are very helpful, so the class isnt nearly as challenging as some of the more time-intensive CS courses, but I still feel like I learned a lot.",
    "I believe that this class was excellent. I think that the excellent lectures were definitely a strength, though I wish there were more opportunities to collaborate with other students.",
    "I wish the textbook and the class corresponded more closely together (in terms of notation for example). I also thought that the class could be taught at a a higher pace.",
    "Weekly psets were helpful",
    "Most of the topics had no real relation to each other. We mostly just memorized the problem solving method for each topic weekly. I thought it was mostly interesting, but very dry. I think I could explain what each of these things are."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "If you have to take it for the cs degree or if you want a slower and more introductory class in writing proofs then take it.",
    "Yes, you can practice and improve your mathematical skills related to CS.",
    "Yes, I did not enjoy it much but it teaches important skills.",
    "It is a good overview of a lot of topics, and the workload is definitely manageable. The problem sets are challenging, but not impossible, I'd say the work amounted to about 4-6 hours per week with the readings taking 1-2 and the psets taking 3-4 hours each week.",
    "Yes! I took this class instead of 244 because it covered a wider range of topics, and with a greater emphasis on applications. Dana always made it a point to connect the concepts we were learning about back to computer science. This was really important in making me feel like what I was learning was useful.",
    "if you have to take it for the major, then yes. if you're not really into math, maybe. otherwise, no.",
    "Since this class is required for all computer science related majors, I don't think most people in one of these majors have much of a choice about taking it? But it definitely is a great course for CS majors- I took this at the same time as CS 201 and even though I think most of the students in my class were at a more advanced CS level, I think it definitely helped me with my understanding of CS in other classes.",
    "Yes! As an Applied Math student, I thought this was an awesome intro. You should probably shop 244 too, and that one might've been a bit more in-depth; this one was certainly very intro level. But that said, AMTH is a tough major, so sometimes an easier class helps. If you have good mathematical reasoning skills, you should have no trouble succeeding in this class.",
    "If you have limited background in proofs and\/or non-calculus math and are interested in seeing what else is out there, this is a great option. The psets are not too strenuous but give a good idea of what each topic consists of. It goes at a manageable but quick pace. Note: I can't imagine this class without Prof. Angluin (a LEGEND), so I hope they find a good successor for her.",
    "only if you're majoring in CS",
    "No, but CS majors have to take it so oh well",
    "Yes. Its challenging and very interesting for mathy people. If you are a mathy person outside the ca major, I would still recommend.",
    "Yes",
    "Great introduction to various topics in math. Sad that Dana will no longer be teaching!",
    "Unless you love computer science theory or are a computer science major, do not take this class. There's a reason that Yale's CS department is known for being theoretical, and this class is it. I felt that it was really difficult to grasp an intuitive understanding of the theoretical content covered in lecture, and going to help hours was only helpful for the problem sets and not the actual content of the class.",
    "If you're deciding between 202 and 244, I would recommend this course to you if you have never had a solid foundation in proof-based problem solving. I think this course did a great job in giving students problem-solving tools that they can use in other classes as well.",
    "If needed, yes.",
    "I would not necessarily recommend this course to another student unless they are planning to major in Computer Science or are highly interested in CS related topics. This is because I think it arches over a lot of topics that are probably covered more deeply in other courses.",
    "If someone is interested in the material, it is probably best to just take the corresponding math course (244 I think?). This class is really just for CS majors that need it and I think it fills that role well.",
    "If you're interested in CS, this is a nice intro to the math-y side of it. If you're a CS major, this course is required, and I'd suggest taking another probability course and another linear algebra course afterwards if you want to go into ML\/AI.",
    "Yes, especially if you are interested in cs\/math and have never taken a proof-based math course before. This course dedicates time to teaching how to do proofs, and then eases you into more and more complicated proof techniques.",
    "I wouldn't recommend this to most people, especially if they've never done proofs. There are much better courses that introduce you to proof writing.",
    "Yes, it provides solid fundamentals for proofs and gives insight on the mathematical component for various computational algorithms. The Teaching Assistants are also very helpful, and provide a lot of support and insight on PSETs. Jeffrey Zhou, for example, was one of my favourite TAs because he extremely patient and was even willing to go beyond his scheduled office hours to help students out.",
    "If you are a CS major, you have to take it. But if you are like me, and simply wanted to take the course to allow yourself to take\/be better prepared for cool upper level CS courses, you may consider finding a way to learn some of the material on your own and avoid this course. Many of these higher CS courses have cs202 as a prerequisite, but if you can gain basic knowledge of set theory, runtime, probability, and basic linear algebra on your own you should be fine and won't have to use a credit on this often painful course.",
    "Yes I think it helps a lot for understanding discrete math",
    "I would recommend this course to a student if they are interested in the CS majors",
    "Its required for CS and was a pretty enjoyable class. Not sure how it will be without Dana though....",
    "This course is great for CS Majors!",
    "Yes",
    "No -- although unfrotuatnely it is a requirement. It is a fine course. But definitely don't expect to enjoy it or feel like you gained a lot from it. I'm glad its over.",
    "Yes, but only if you are a CS major.",
    "Absolutely. I loved this class! Make sure you go to office hours though! The material is very manageable and the TAs\/Dana are looking out for you.",
    "Yes. It's necessary for the major.",
    "Yes! This course was difficult but accessible if the work is put in to read the book outside of class. It is tedious and slow but rewarding.",
    "Only take this course if it's required for your major. I thought it was pretty good, and learned quite a bit, but it's definitely geared towards CS majors. If you really want to learn more rapidly, take MATH 244. Overall though, Dana was a good professor (although it was her last year :\/), and the course was very intellectually challenging\/fulfilling for me. But it jumps around a lot in terms of topic. I did like that the course slowly eased you into writing proofs. I've heard there's a much steeper learning curve in MATH 244.",
    "Dana does an absolutely wonderful job of teaching this course, and she is hands-down my favorite professor in the CS department so far. She managed to turn a class that I thought would be pretty boring into one of my more interesting and engaging class at Yale so far. Unlike pretty much every other CS class Ive taken, I actually would recommend this class to students even if theyre not required to for their major. Its super interesting, especially because Dana switches topics every couple classes, so its hard to get too bored or too confused about any given concept. The lectures can get a tiny bit confusing here and there (especially if shes running out of time), but the problem sets do a good job of solidifying what youve learned. I wouldnt recommend the course if you find proofs particularly tedious though since the problem sets are primarily proof-based. That being said, the TAs\/ULAs are very helpful at office hours, so dont be too concerned about finishing p-sets if you go to office hours early-ish. The exams are not particularly difficult if youve been keeping up with lectures and the problem sets. Her practice exams are very similar to the real ones, so thats helpful since Dana covers so much material that otherwise youd be overwhelmed studying everything. Ultimately, Dana is a super incredible teacher and you can tell she truly cares about her students, so Im sure that she will be greatly missed as she retires from teaching this term.",
    "I would highly recommend this course to any student who wants to explore interesting concepts. Dr. Angluin was exceptionally supportive as well!",
    "I wouldnt take it unless you have to. Its a very quick overview of a lot of topics, none of which youll end up mastering.",
    "Yes, this is required for CS",
    "Only as a prerequisite to other computer science classes. It's inbetween being a practical course and a purely academic course (like Math 244 is)"
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "202",
  "section": 1
 }
}