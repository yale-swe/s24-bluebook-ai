{
 "crn_code": "11538",
 "season": "201303",
 "legacy_coursetable_course_id": 23708,
 "enrollment": {
  "enrolled": 7,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    1,
    1,
    4,
    0
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    0,
    2,
    2,
    2
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    5,
    1
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "Yes. This is a fascinating area of study that is essential to CS as a field but somehow left out of all other courses. CMU just reworked its entire freshman curriculum to cover many of these topics, thats how important they think it is.",
    "I would suggest you take this class if you are interested in programming languages, if you liked Scheme, or both.Starts off with what has been described as \"the worst introduction to set theory ever.\" I didn't let this dissuade me, and indeed the class got much more interesting once we slogged though the notation and complexity of the Reynolds book.About a week in, we started learning Coq, which is a automated proof assistant and small functional programming language. This was fun: we got to build a (trivial) imperative programming language and prove (trivial) things about it. Meanwhile, the professor and TA were using Coq to prove correct an operating system their group had built, which I think is the cat's pajamas.The class content got significantly more enjoyable when we started using the Harper book, which contained formalizations of such interesting language features as abstraction, polymorphism, inductive and coinductive types,and a whole host of others.The class consisted of seven problem sets and one final project. The workload was manageable but trying at times. Definitely head to office hours if and when you get stuck.Professor Shao and the TA Shu-Chun Weng were both knowledgeable and helpful. They both knew the subject inside and out, and had a real zest for it too.I loved my time in this class, and I would heartily recommend it to a fellow CS major who likes Scheme, Haskell, [S]ML, or any other of those wonderful functional languages the department loves so much.",
    "Recommended if you want to learn how to think about programming languages formally -- it's a really cool subject. Professor Shao is a dynamic lecturer, and his presentations are interesting, but the class can be a little too fast-paced sometimes.",
    "I will give an answer to this by sharing my personal experience.In terms of Computer Science, I love building things with programming languages and don't like theory and math heavy courses as much. The first half of the course was focused a lot on Set theory and fixed point functions, which were fairly challenging. The first two problem sets were very difficulty. However, I thoroughly enjoyed the second half of the course. We began doing more problem sets in the proof assistant known as Coq. For a person who likes programming, I loved this style of proofs. We began discussing more about different programming language features, how to implement them, and how to prove properties about them. The highlight of the course for me was Professor Shao teaching us about the research he is doing with a certified operating system. In short, the course was able to show me the power theory can have when applied. It has given me a better appreciation for theory courses.With all that said, the course is challenging, but if you want the most out of your programming degree, it is a must take."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "430",
  "section": 1
 }
}