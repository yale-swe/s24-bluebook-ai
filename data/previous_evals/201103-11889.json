{
 "crn_code": "11889",
 "season": "201103",
 "legacy_coursetable_course_id": 12168,
 "enrollment": {
  "enrolled": 65,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    1,
    2,
    13,
    27,
    11
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    2,
    5,
    20,
    15,
    11
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    36,
    18
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "It's very hard to make general statements about the course because a lot depends on the individual. Some people spent as little as 5 hours per week, while I think some spent up to 20 hours a week. The average, though, is probably 8-9 hours\/week. The problem sets are pretty easy, and you have plenty of time to do them, but the tests are difficult. The questions themselves are very easy, but there are a lot, and many people leave multiple questions blank. The grades are curved though so that half of the class gets A's\/A-'s. As for the material of the course, it kind of is what it is. It's an intro course that is a necessary foundation for future study, but the more interesting specialization in topics in computer science comes further down the road.",
    "CPSC 201 is one of those classes everyone should take. You'd be shocked at how many people are transformed into computer science majors, simply because the material in this course will challenge you in a way that the typical Yale student loves. Problem sets are simply a collection of puzzles, puzzles that will stretch your brain in wonderfully new directions. Computer science is the future of almost every field, and while this class tends to be less worried about practical programming, the skills you learn here are invaluable. Almost all the professors in the department have a reputation for being fantastic, and Prof. Rushmeier was certainly fantastic. Take this course early so you don't miss the opportunity to switch your major!",
    "On one hand, Prof. Rushmeier is an extremely sweet and helpful person whom you should know even if you don't take this class. On the other, her tests will make you feel miserable as you solve hard problems under extreme time pressure. Make sure you start studying well in advance and do lots of practice problems--it definitely helps. Problem sets, which should definitely be a bigger part of your grade, can take up lots of time but are doable, especially with help from Prof. Rushmeier and the TFs.",
    "This course was good overall and definitely does not require previous programming experience. The problem sets take 8-10 hours, but are fun. The lectures cover a variety of topics, but sometimes are slow and boring. Professor Rushmeier makes an effort to engage the class and generally explains things well. The tests are rather long for the given amount of time.",
    "this is a really awesome class. it's very unique and incredibly fun. you use a fairly useless language (in the sense that you're never actually going to program in scheme in real life) to study a lot of computer science topics.the language involves a lot of recursive programming which is really interesting and fun. even if you've already done some recursion (or if you haven't), this really encouragesnew ways of thinking (i.e. recursive solutions to problems).i'm not really sure about my major. this class was by far my favorite class this semester. even if i'm not going to major in computer science, this class has been so fun that i'm definitely planning on taking the next class in the comp sci major series. (this class has made me think about majoring in computer science.)",
    "CPSC 201 is an introduction to many important themes and concepts in basic computer science. If you're at all interested in how a computer works or about the basics of theoretical computer science, this would naturally be the class that you'd want to take. There is a lot of cool material that should be interesting regardless of whether you intend on majoring in computer science. However, there are significant weaknesses with the course that one should definitely be aware of. First of all, the choice of programming language: CPSC 201 uses Scheme for all of the homeworks. Scheme is an absolutely miserable language. The purpose of using Scheme is to help teach you the concept of recursion, but it makes doing the problem sets miserable and will leave you with very limited practical programming knowledge. If you are looking for a course to learn or improve on your programming skills, CPSC 201 is not the right course for you. Next, the homeworks: over the course of the semester there are seven incredibly annoying and time consuming homeworks. While certain sections of these homeworks are interesting and you will get a sense of satisfaction from completing them, many of the problems take forever. This is primarily because of Scheme (see above). Unless you're a genius or have savant-like abilities in terms of debugging many sets of nested parentheses, you will spend at least 10+ hours on each homework (if not more). Next, the lectures: Professor Rushmeier is really nice but is not a clear lecturer and makes the material extremely boring. You will end up learning a lot of material yourself from the online lecture notes. Try to take this class with Professor Angluin. Finally, the midterm and the final: BEWARE. Both are incredibly time-pressured and you will struggle to even get through every problem (let alone have any time to check your work). Many of the problems involve a lot of writing, which is incredibly frustrating given that there are 12+ of them to be completed in 50 minutes. If you want to have a shot at doing well on these, make sure you practice doing problems under ridiculous time pressure.",
    "This class covers really cool material -- all of which is made online and is enforced through homework; on the other hand, the lecture is terrible. I learned almost nothing in lecture, though I went every day. Most of my learning happened in the Zoo (comp. sci. dept. computer clusters) or doing homework with friends in the class. So, again, the material is good, but be prepared to teach it to yourself.Also, note almost all your grade comes from two tests, both of which are under insane time-pressure and poorly worded.",
    "A good course.If you're majoring in CS, you obviously have to take it, but it is fun and relatively easy.If you want an intro to programming you should look at 112, not because 201 is difficult (you don't need any programming experience for 201!) but because scheme is so useless.",
    "Yes if you are interested in computer science. If you just want to learn how to program, take intro to programming. Scheme is a fun language to learn, I think it's very elegant in some ways.",
    "You'll work hard in this class, especially on the problem sets (think 10-15 hours a week), but you'll walk away knowing the basics of how a computer works. You'll also learn inductive reasoning (a very valuable skill) and get some programming dirt on your hands. Professor Rushmeier is maybe 7\/10 teaching-wise, but she is a very kind, accessible professor. TAKE IT!",
    "Its a pretty good intro course. I think scheme is fun and not too difficult once you get the hang of it. On the other hand the tests are ridiculous. There is never enough time to finish them and the speed you work will roughly determine the grade you get.",
    "I learned a lot, but it's very specific to programming. Probably not a class for the casual.",
    "CS201 is a survey of the fundamentals of computing. You obviously don't get very deep into any of the topics, but it's a requirement for the CS degree and it's fairly interesting. Take it if you have to or if you're interested in understanding more about how computers actually work.",
    "This class was a struggle. I was taking it credit d, and it was still a struggle. Unless they add more TAs for the future, you won't be able to get all the help you might need. If you can afford to take it credit d, do that. It's sort of interesting and you'll learn about computers and how they work, and learning about computers is important, but this class is more of a struggle than it needs to be.",
    "I would recommend this class. The professor is great, the material isn't too hard but still interesting, and the workload isn't bad.",
    "The problems sets, although time-consuming, are fun to do. However, you should never start them the day before it is due, because I have taken over 40 hours to complete a problem set before.",
    "CS201 is a decent class if you have even limited knowledge of programming, but it would help if you knew some computer science as well. The professor is kind of strange, but it's chill. Problem sets aren't too bad, though one took a very long time to complete. Take this class.",
    "CS 201 is a great introduction to the major. It's a broad overview, and the material is easy to understand. Watch out for the final, though; it's a time crunch.",
    "I definitely recommend the class; it's really all the basics of CS. You go out of it feeling like you've really benefited. But make sure you're ready to work your a*s off",
    "Even for non-majors, it's a good class, but I would recommend CPSC 112 for non-majors first. If you like that, you will probably like 201.",
    "Obviously a necessary course for the computer science major. Useful course.",
    "I really enjoyed the material in this course. You learn to program in Scheme which is a really cool language. At the same time, though, this isn't really a course about programming, but rather an introduction to the field of CS as a whole. That means you'll get an intro to the study of data structures, Turing machines, computer hardware architecture, and assembly code. The problem sets took me an average of 6-8 hours each but were all incredibly fun. I can't comment on the lectures, because I never went. Prof Rushmeier is smart but her lectures weren't particularly engaging. Fortunately, Prof Angluin has written absolutely amazing notes which are available online, and I enjoyed learning the material that way.",
    "It isn't easy, and the majority of the grade relies on how fast you can do the exams instead of how good you are at programming which is unfortunate, but it's a great course. You will learn a lot and feel satisfied by the end, but there will be times when you get frustrated at the sheer length and difficulty of problem sets. Overall, a solid, challenging course that builds your foundational knowledge of computer science.",
    "lots of psets. lots of fun. hard tests.",
    "CS 201 is a great to class to take if you are interested in learning a bit about modern computing. The class starts out in programming, but soon delves into topics such as computer architecture, logic, languages. You will come out of it knowing the basic structure and concept of computers. The material is challenging but very interesting at the same time.",
    "Do not take this class if you are just looking to learn programming. Learning scheme has no real life applications, and while it may help you think differently and become a better programmer indirectly, thats definitely not the point of this course. Instead, take this class if you want to learn the fundamentals of various fields of computer science, from turing machines to compiler theory. I didn't think the problem sets were too bad. I hated the tests however, they are very short on time, and I don't think the ability to write programs and solve problems under such strict time limits is an accurate representation of understanding of either the concepts or the language.",
    "Take CS201 to learn about how a computer works from the bottom up.I would recommend this course since the HW's help you develop your logical reasoning skills. Knowledge about the inner-workings of computers is also awesome.",
    "If you are slow when taking tests, good luck. Most people left at least two out of ten questions blank on the final, so if you are slower than average it's easy to see how your score could drop very quickly. This is unfortunate, as you could have a very solid grip on the material and get a poor grade, as exams are 70% of the grade.",
    "cool. yeah, take it. like, theoretical programming\/computer stuff.HINT 1: WORK REALLY QUICKLY ON THE MIDTERMS (two 50 minute in-class midterms, worth 70 percent of the grade). don't be fooled by the pace in class, it's slow. don't know why.HINT 2: START YOUR HW EARLY, not the day before, or the day of.enjoy!!",
    "Good class with interesting material and problem sets - but a lot of work.",
    "Good thinking practice, but not a fun lecture to go three times a week.",
    "CS 201 is a good course if you would like to get a lot of programming experience and to develop your CS skills. Even if you don't plan to major in CS, this class would be a good basis for any science\/math\/econmajor who might need to know how to program later. However, you must have some programming experience BEFORE you take this class, or else you'll be in way over your head.",
    "If you are a comp sci major, then you have no option - you have to go through hell so that you can rethink your decision. However, if you are taking this class to explore, think again and this time think long and deeply. The psets will take you an average of 15 hours to complete and if you feel that is manageable, then imagine that the psets don't count for much. What matters are the exams that you do and those are basically a marathon affair. You will only have 50 minutes to prove that you understand the classroom material and time will run out before you answer half of the questions. I know you are wondering what will happen to your GPA afterwards. Crashed!",
    "The programming assignments are fun and thought-provoking if you are into problem solving and programming. I wasn't too thrilled with the actual topics as most of them have to do more with the basics\/beginnings of computer science rather than anything interesting. You never need to go to lecture as all the notes are posted online. Class is curved to a high B+ and average time spent on each problem set is probably like 10-12 hours.",
    "I had fun in 201 because of the problem sets, which are reasonably challenging and enjoyable. If you have any decent programming experience they should be completely doable, although they do take a decent chunk of time (about 5-6 hours a week average).The lectures weren't that great and the material covered in class was OK, but necessary stuff to do further computer science.",
    "I would definitely recommend CS 201 to any student at Yale, regardless of whether or not they plan to be a CS major. If you enjoy writing lots of code, you may find some topics in this course uninteresting, but all topics are necessary for future studies in CS.",
    "Take it. It was my favorite class and I learned an incredible amount. Work was hard but interesting. This class was truly a pleasure.",
    "You have to take this course if you want to take any more courses in the CompSci department. That said, if you are interested in the theory of computation it will be a painless prerequisite.I took this course without any prior programming experience and did fine. You may be intimidated on the first day when you here that some of the other students already know a handful of programming languages. You shouldn't be. Programming in Scheme is its own skill.I especially recommend this course to students who have taken and enjoyed any of the logic courses in the philosophy department. I took it after Math Logic and Computability and Logic and found the courses highly complementary.A note on the tests: you will be strictly limited to 50 minutes, so practice solving problems quickly before you go in. this year, the final was highly curved, as the median was a 67.",
    "It is an interesting class for anyone considering majoring in CS, and it was enjoyable if you like programming and liked doing the psets. However, if you're not taking it as a requirement for a major, I'd suggest doing another CS class because the language you learn, Scheme, isn't really of much practical use",
    "Recommend if you are a potential major and have no experience with comp sci at all, but if you just want to code this is not the course for you.",
    "I would definitely recommend this class if you want to get an overview of the subject of computer science. If you just want a programming class, take CPSC112.",
    "A very good intorduction to computer science! I took this class \"just for fun\" and I found it a very useful introduction to recursive programming, basic computer architecture, and other topics in computer science. On the other hand, The problem sets were long, tedious, and not easily finished. Most were simulations and only some were useful in understanding the concepts. I easily spent 10-20 hours and sometimes longer on them. About half of each test focused on writing programs. The other half was based on lecture material that either did or did not make it into the problem sets. It is imperative that you read the lectures notes whether or not you attend lecture as Professor Rushmeier often does not cover everything or does not do justice to certain topics. As a last note, do not attempt to take it credit\/D; too much work goes into the problem sets to make it worth it. But please take this course!",
    "Recommend -- you learn a lot about things you probably never thought about. My only problems with the class were with the workload: one midterm, one final on the last day of class, seven problem sets in Scheme. The problem sets could be a little much sometimes; they tended to include lots of \"insight\" problems so if you didn't start ALL the problems ahead of time, you were screwed, and if you couldn't think of the solution, you might be screwed anyway. However, I had little programming experience ahead of time (some work with Matlab, no Intro Programming) and still did okay (and actually didn't mind Scheme). So you can do it if you're prepared to put the work in. The tests are insane, most of the problems weren't too hard but I don't actually think anyone could do all them in the time given. Lectures were great though, Rushmeier takes you through everything at a good pace and encourages lots of participation."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "201",
  "section": 1
 }
}