{
 "crn_code": "21769",
 "season": "201501",
 "legacy_coursetable_course_id": 31581,
 "enrollment": {
  "enrolled": 12,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC305",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    0,
    3,
    4,
    5
   ]
  },
  {
   "question_id": "YC306",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    0,
    2,
    1,
    9
   ]
  },
  {
   "question_id": "YC307",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    9,
    3
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC304",
   "question_text": "How would you summarize ECON 111 01 for a fellow student? Would you recommend ECON 111 01 to another student? Why or why not?",
   "comments": [
    "This course covers chapters 1-8, and Chapter 17 of Arora's \"Computational Complexity\" textbook, starting out with basic concepts (Turing machines, P, NP, etc.), culminating in Toda's Theorem. Each lecture is roughly an interesting theorem, result, or concept. We also covered the Goldwasser-Sipser paper on public vs. private coins, which was very cool. There are 6 psets and 2 in-class exams in total. Manageable workload.",
    "If you like computer science classes that are basically math classes, definitely take this. You cover a lot of interesting material, and it's all really well taught. Professor Feigenbaum was really good at explaining the material and at adjusting what she was teaching based on the class's reaction.",
    "..this is the best class at Yale. The disclaimer is that the course might not be the same in a future iteration: this year's success had a lot to do with the intense connection among the students and professor Feigenbaum. She is legendary and an absolute pleasure to learn from. The subject is objectively some of the most interesting material in existence.",
    "If you have any interest in CS research and\/or you enjoyed the NP-completeness portion of Algorithms, you'll love this course. It's no walk in the park, but it's very rewarding.",
    "Computational Complexity was one of those classes that kept surprising. I would definitely recommend it to those more mathematically inclined students who found themselves enjoying CPSC 365. The material was incredibly interesting. The sharp definitions of complexity classes and separation of problems into these classes blew my mind at some points, as well as the clever ways computer scientists have shown these hierarchies or equalities to exist. We learned about P, NP, and maybe EXP in algorithms, but in CPSC 468 we went over space complexity, probabilistic-time Turing machines, and a whole zoo of other complexity classes that had surprising relationships to the ones we were already familiar with. Work-wise, it felt like more than CPSC 365. There were six problems sets filled mostly with fair questions, but they made every other week difficult. I routinely spent more than 12 hours on them, and the ones near the end of the class got really difficult. My main hold-up with taking this class was Professor Feigenbaum, who taught CPSC 202 and was not too strong a teacher in that setting. Those concerns were completely unfounded, and I can only say that I was extremely impressed with her ability to teach this course. She obviously puts a lot of work into the lectures, and it shows. I would definitely recommend this class to someone who enjoyed CPSC 365 and wants to continue with that kind of material.",
    "A very very good class. Problem sets are hard and time-consuming, but rewarding",
    "CS 468 is a really wonderful course; I wish there were more like it. Prof. Feigenbaum is a thorough and enthusiastic lecturer, willing to spend time exploring questions as they come up. The problem sets are challenging but doable without \"trick\" insights. The material itself is cool too. The field is pretty new and Feigenbaum knows all the main players, so you get a sense of the human dimension behind the proofs. It's also cool because the techniques are simple but clever -- you can prove a lot of deep theorems with very elementary tools.",
    "This class is very difficult but extremely rewarding. The subject matter is interesting, and the proofs are not actually that complex. Oftentimes, there is a cool trick that makes everything work out that seems simple once you know it, but almost impossible to figure out at the get go. Take this class if you're interested in theory, complexity theory is a lot of fun and will be good if you enjoyed algorithms.",
    "Complexity theory is awesome. Depending on the results that come out of complexity theory over the next century, it may be interesting but practically irrelevant tangent or it may completely revolutionize computer science and our concept of what is efficiently computationally possible. I found the class difficult, for sure. The proofs are non-trivial. A lot of the knowledge is new, some of it discovered in the last 30 years, so the proofs that have been found are probably not the most elegant proofs that could be found. But despite the challenges, I'm very glad I took it.",
    "The best course in CS I've taken at Yale, and perhaps one of the best overall. Anyone with the chance to take this course (or likely, any upper-level course with Prof Feigenbaum) probably should. A truly interactive course covering the most engrossing material I've encountered."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "468",
  "section": 1
 }
}