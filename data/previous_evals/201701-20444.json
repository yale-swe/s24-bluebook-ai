{
 "crn_code": "20444",
 "season": "201701",
 "legacy_coursetable_course_id": 41454,
 "enrollment": {
  "enrolled": 104,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    1,
    4,
    20,
    29,
    24
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    0,
    6,
    19,
    34,
    21
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    2,
    2,
    8,
    34,
    33
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    3,
    14,
    15,
    36,
    11
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    2,
    23,
    43,
    12
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    3,
    15,
    40,
    21
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "I learned the basics of some topics in computer science, like computability, boolean expressions, boolean logic, circuits, and run time. I also became much more comfortable with recursion, both in terms of writing recursive programs and thinking about concepts recursively.",
    "I came into this class with very little CS preparation, and this course definitely made me more comfortable with computer science and the inner working of computers!",
    "Very theoretical information about how computers work.",
    "This course is an introduction to true computer science and theory. You will be coding in this obscure language called Racket. You will get really good at recursion and how to approach intimidating problems. I discovered a love for computer science through this course.",
    "Besides technical aspects about the computer and how it works which are probably not that useful, you learn a lot about procedures, recursion and programing in general.",
    "I learned about programming in Racket, although I feel like I don't really know the full capabilities of Racket. Mostly I learned how to use Racket to model other concepts, like Turing Machines, Context-Free Grammars, and running time comparisons.",
    "I learned valuable skills about how to think about computer science.",
    "I came in with very basic intro knowledge of computer science, and this course greatly expanded my knowledge. Recursion comes like second nature now, and the topics covered in this course are really cool.",
    "I learned the fundamental architecture of computers and coding in Racket.",
    "I learned not only technical coding, but more theoretical concepts and algorithms that apply to problem solving in general",
    "Learned about programming not really how to code, but overview of computer science of a field of study (running time, machine\/assembly language, circuits, strings\/languages, Turing machines, etc). Some pretty cool I've never encountered before: spent a homework assignment basically \"creating\" a TC-201 (very simple computer) which could process programs in assembly language",
    "I learned a lot about how to think about problem solving.",
    "Throughout this course, I gained a greater understanding of programming, especially recursively through the use of Racket. I also learned skills on debugging my code and learned of different types of things computers are required to do such as assembly language and tokenization.",
    "Knowledge in various aspects of computer science as well as critical programming skills.",
    "This course helped me better understand the theories and concepts of computer science.",
    "I learned how to write more concise code and a lot about computer architecture in a very hands on way.",
    "A good understanding of a variety of topics related to how computers and computer science works, and some good coding experience.",
    "I learned about data structures and an extensive teaching on recursion.",
    "As a beginner in the field of computer science, I learnt a lot about what lies under the hood when we work computers. It was very helpful.",
    "I learned how to learn code. By teaching an unknown language (Racket), CS201 tested how well you can learn and understand code without any previous knowledge of it. I definitely improved my understanding of recursion and of how computers work through this course.",
    "I learned how to approach and tackle functional programming and recursive logic, something I was completely unfamiliar with prior to taking this course. The non-programming topics that were covered (languages, runtime, etc.) were also very enlightening.",
    "I acquired a deep understanding of Racket!",
    "Racket programming",
    "I learned ways to think logically when coding and the inner workings of computers.",
    "I gained a lot of programming knowledge but also a lot of skills relating to computing systems and abstract representations of CS concepts.",
    "As a non computer science major this class stretched and challenged me. I enjoyed learning about computer architecture and thought it was a good introduction to the field of computer science. My favourite topic was Turing machines.",
    "How to think in a recursive way and a broad insight into the way computers work.",
    "I learned how to program recursively comfortably. It used to be a concept that intimidated me, but now I've gotten so used to it, I feel it won't be a problem anymore.",
    "Basic coding skills, a lot of really weird logic skills (because how does recursion make as much sense as it does).",
    "I gained problem solving skills, knowledge about computers and computer architecture, and learned about computer science.",
    "Racket skills. I already knew much of the conceptual stuff.",
    "I learned the foundations of computer architecture and expanded my coding skills.",
    "Learned more of the theoretical aspect of programming, given that Racket is just such a bad and inefficient language.",
    "By taking this course, I learned how to code in Racket and I was exposed to several theoretical aspects of computer science. For example, I learned about Turing Machines, logic gates, CPU, and assembly language\/compiler language.",
    "Intro to functional program, deep familiarity with recursion, computer architecture and the foundations of computer science theory.",
    "Cs",
    "This course taught me a lot about computer architecture and theory, and a lot about using recursion in programs. It also taught me a lot about adapting to different programming languages and learning how to write programs with different limitations.",
    "I understand the basics of how computers work, something that up to now has been a mystery to me. The problem sets were actually fun to do, and they really helped develop my problem solving skills as well as consolidate the things we learned in lecture.",
    "I learned plenty about programming in Racket, as well as computer architecture, recursion, and running time.",
    "A strong introduction into computer science and a firm grasp of recursion.",
    "I now have such an understanding of and familiarity with recursion. I also understand much more about computer architecture and the underlying logic and processes that make computers work.",
    "Recursion mainly and a lot of fundamental CS concepts.",
    "I learned basic theoretical CS.",
    "I learned much more about computer science and about programming.",
    "The biggest takeaway for me was the ability to break up larger problems into the smaller components to solve.",
    "How to think in a problem solving mindset",
    "I learned how to program in a functional programming language (Racket), while becoming exposed to a broad variety of fundamental computer science concepts including computability, Turing machines, assembly and machine language, running time, regular languages and expressions, context-free grammars, and deterministic finite state acceptors.",
    "Learned some fundamental concepts in computer science, as we all the language, Racket. I now feel comfortable working with assembly language.",
    "Computational thinking, how a computer works at a very fundamental level, Racket programming",
    "I learned how to think recursively, learned about some foundations of computer science.",
    "Functional Programing can be rather useful to get one thinking about the concepts that we otherwise take for granted in CS. Learning Racket only helped emphasize these ideas."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "Although I understand the benefits of teaching the class in Racket, I think that perhaps teaching 201 in a different language may be more beneficial for the rest of the core classes in the major. That being said, I do feel much more comfortable with recursion coming out of the class.",
    "Dana is great. However, the overall course is not very useful. Racket is an obsolete language, and we don't learn any \"modern\" computer science. I would suggest making it more relevant \/ useful, and teaching more programming rather than theory.",
    "Strengths: Prof. Angluin really made this course. Her lectures were clear and to the point. She engaged the audience, and the ample help house made the hard problem sets manageable. She uploads all of her notes at the beginning of the year so you do not have to worry about falling behind if you miss a day of class. Weaknesses: Very Few. The problem sets were sometimes very long and hard to code, but that is part of the struggle of getting through this class. The high test grade average also meant that mistakes on exams were pretty unforgiving. Plus, some people in the class seem overqualified for the material.",
    "A major weakness was the lack of an overall theme to the course, with some kind of direction to give some relevance to our discussions of various topics. Some kind of context for the relevance of talking about each topic would have made it easier to pay attention and understand what was happening during class. Since we were applying things in Racket, which isn't very practical from a modern programming standpoint, it would help if we had known how what we were learning applies to practical aspects of computer science in the present.",
    "The course could be improved by allowing students to take tests on computers rather than on paper, so they could test their procedures.",
    "The problem sets take forever, but you definitely get a majority of your knowledge from them. Lecture definitely helps, though, in figuring out certain problems.",
    "The course is very engaging and the material is interesting, but sometimes the material feels outdated in today's CS landscape.",
    "Strengths: problem sets are honestly long but interesting. I enjoyed solving the problems and they were satisfying when you got them Weaknesses: It was just so easy to get really behind. Lectures were well explained but unengaging. I didn't feel like I ever got any individual attention.",
    "Dana is super engaged and invested in the course. She truly wants to help the students.",
    "Although Racket is an ideal teaching language, I think practicality should be a major concern. I learned a lot from the annoying recursive nature of Racket, but quite frankly I will probably never use Racket\/Lisp\/Scheme ever again in my life despite the fact that I spent probably a combined 20 hours a week studying, going to class, and doing problem sets.",
    "Professor Angluin has a very strong grasp of the material, probably because she has taught this course for such a long time. Another great aspect of a consistent class if that there are previous lecture notes available online. Also there were plenty of help hours in case you got stuck. Due to the lecture style and relative newness of the material it was hard to remain fully engaged in lecture and receive the full experience. There were many times we repeated certain ideas, but this was not the case for all topics, including some topics that found their way onto exams. The course overall however taught what it was meant to teach and did it efficiently.",
    "I felt very confused by much of the course curriculum and unengaged with it. However, I thought the frequency of office hours was helpful - I just wish there were more TA's on call because I often waited for a very long time without being helped.",
    "The strengths of this course are the lectures which are pretty engaging, and the problem sets which actually enabled most of the learning to take place. I can't think of a way in which either could be improved.",
    "I do not think Racket is the best way to teach the class as Dr. Racket is not used beyond Yale.",
    "Lectures are not that interesting. I do not think we have enough theoretical exercises to practise what we learn. Sometimes the only source of practise I have for the exam is the practise exam. The PSETS do not help with the prep for the exam.",
    "The course is pretty strong as is. Giving students a chance to submit psets late and to resubmit them with corrections was very helpful. Prof. Angluin and Stephen were also very accessible making it easy to receive help.",
    "I think that the amount of help this class offered was definitely a strength. I also thought that posting the course lectures for people to review was a benefit. In terms of weaknesses, I do not think there are very many.",
    "Every aspect very strong; no weakness.",
    "If you don't follow from the beginning it may be hard to catch up because it builds on past knowledge",
    "The office hours were amazingly helpful. They were slightly time consuming, though that is expected with computer science.",
    "I think maybe having more, slightly shorter homework assignments would be useful in terms of getting more regular feedback. I also have some attention issues and would have appreciated more visual aids in lecture. Overall though I think the course was very engaging and interesting and I really liked the amount of outside support (office hours, help hours, etc.).",
    "This course teaches interesting concepts at a good pace. The problem sets were often long and stressful but always relevant to the class work.",
    "Lectures can be boring",
    "The greatest strengths of this course was the different approach to programming it teaches and the broad set of concepts taught. The greatest weakness of the course was it's lack of engagement with many of the ideas taught and the often meandering lecture style.",
    "Even though some could be tricky, the tests were fair. The problem sets were extremely long though.",
    "I enjoy the lectures, I wish they can be longer.",
    "Well-done course, but honestly, change the submission system--it might be convenient on your end, but it's confusing and difficult, especially for those using PCs instead of Macs.",
    "The course is lecture style with a big class and a teacher with a quieter voice. Although the lecture notes online are very helpful, actual lectures can not be that useful. Some of the problem sets were very difficult, but the late days definitely helped. If you are taking CS as a major or something related to it then you probably have to take this course, but otherwise you probably shouldn't bother just because Racket isn't very useful in other fields.",
    "The strength of this class lies in the fact that lecture notes are posted online, thus allowing students to further engage with what they've learned in class.",
    "It definitely teaches you how to code, but Racket is just SUCH a bad language.",
    "Professor Angluin is an AMAZING professor! She teaches at a very good pace, is very accessible after class and during office hours, and genuinely cares about her students. She also knows her materials really well and teaches it in a very efficient manner.",
    "I was pleasantly surprised by CS 201. Racket is strange but definitely gives you a new way of understanding programming, and more importantly, the course is really about theory - Booleans, strings, architecture, runtime, and so on. The choice of language is really inconsequential, and seeing how functional programming works is cool.",
    "Dana needs to speak louder",
    "Though this course is a lot of work, it is helpful because it ensures you fully understand the material - the practice is necessary. This course also teaches a lot of important theoretical information for continuing study in computer science. However, the programming language used in the course is not very helpful in applications outside this course.",
    "Lecture was boring at times, but very informational. More office hours throughout the week instead of only the half of the week leading up to when PSets were due.",
    "A weakness is that sometimes the auto grade system makes it so that forgetting one case makes you lose 10+ points.",
    "problem sets are informative and challenging, dana is a great lecturer",
    "Strength: Dana is lovable.",
    "Teaches you an impractical language, but it's still very fun.",
    "It is a great introduction to theoretical CS. Though it is taught in Racket, the unfamiliarity of the language actually makes the class more interesting. I didn't expect to be able to do so many things with Dr. Racket!",
    "I thought this course was very well-designed. I am still ambivalent about using racket as the primary programming language, but the treatment of various subjects in computer science (e.g. Turing machine, strings, and logic gates) was well done. We didn't go into any one subject in great depth, but as a \"topics course\" I thought that CPSC 201 was very well designed.",
    "The problem set on TC-201 was brilliant. I would say office hours on Friday would have been very helpful because if I fell behind on a pset, the gap between Thursday and Sunday office hours was painful.",
    "More TAs and extra problem solving sessions to understand the HW would hep",
    "Professor Angluin is an amazing teacher and is extremely willing to help students with any and all questions. There are also a lot of help hours with TAs so it is easy to get help if you are ever falling behind. The teaching staff in general are extremely understanding and want to help you succeed.",
    "I think it was really effective to learn concepts in class and then simulate them in Racket on homework assignments. It really forced us to simultaneously expand our programming and problem-solving skills and to understand the concepts on a deeper level. A weakness was that I wasn't always sure why we were studying what we were studying-- sometimes it would have been helpful to have connections or significance explicitly stated.",
    "There is great TA support, and Professor Angluin was always available to help. Also, a great, interactive lecture. Course could not really be improved in my view.",
    "Strengths: strong support by teaching assistants and accessible professor, very good teaching by Prof Angluin Weaknesses: comparing course content from 2014 Spring and 2017 Spring left a few questions about the ground covered (perhaps was a bit rushed at the end because pacing was a little off)",
    "The psets are way too time consuming and the lessons taught are not helpful in completing them. The exams are fun and interesting, but the psets do not seem that useful comparatively.",
    "This class is well organized and follows a syllabus that has stood the test of time. My only issue with the class is that it has to fit a curve. Almost everybody in the class is a Computer Science Major making it nearly impossible for a non-CS major to do well in the class. In addition, some years students are simply stronger and it is not fair that they have to be compared to each other by the same curve."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "Yes",
    "I absolutely recommend this course to another student if Dana is taking it.",
    "I would definitely recommend this course to both CS majors and non-CS majors. I came into the course an EE major and left as an EECS major, so it is definitely worth giving CS a try and you might end up really enjoying it!",
    "Only if you need it for CS major",
    "I would definitely recommend this course to anyone who is interested in computer science. This course will introduce you to complex coding and think about computer science theory. This will help you see if computer science is a possible major for you. Or, it will give you a greater appreciation for the field. Although, if you are not a CS or a prospective CS major, there are other lighter workload courses out there to expose you to CS.",
    "Dana is an amazing professor and the psets are hard but definitely doable and you learn a lot from them.",
    "This course gives a good overview of the fundamentals of computer science, and might be beneficial to anyone looking for the basics of CS, but not programming. It doesn't give very much practical training for programming, but helps with some of the theory behind computer science in a general way.",
    "I would recommend this course to a student who wants to go further with computer science. The language we use isn't practically applicable, but it helps with learning higher-level languages.",
    "I would highly recommend this course to anyone even remotely interested in the field of computer science. It was a great intro class, and I feel like I learned so much.",
    "If you are interested in CS, this is a great introductory course.",
    "Yes, I would recommend this course. The problem sets are a lot of work but manageable if you time them well. It's a challenge but you feel reward.",
    "That depends. I'm a math major (not CS) and would be pretty neutral about recommending this class to people in my position. It was definitely interesting, I learned a lot, and to me to psets were enjoyable puzzles. However, I don't think the class was groundbreaking enough that it's a must-take if you're not a CS major. It's basically the intro course for the CS major. I did really enjoy it though, so if you don't have other things you need to\/really want to take and are interested in seeing what computer science is beyond just coding, definitely take the class!",
    "This course is a nice and relaxed, but very insightful class for anyone looking to study computer science or has background in cs, or just wants to take the class to learn more about cs to help their other studies. I found this class very accessible for all levels and was a perfect introduction to higher level classes. Worth the time to acclimate yourself to higher level courses and computer science and especially recursive thinking.",
    "If you are willing to put in the work, I would recommend the course. However, it is very time-consuming; I spent about 20 hours on many of the psets and it was very discouraging to see this happen on a regular basis.",
    "Great introductory course that introduces you to various interesting topics!",
    "If you are planning on majoring in Computer Science then this course is a necessity and I would recommend taking it with Professor Angluin. She is a great lecturer and very friendly.",
    "I would only recommend this to students who are actually interested in the content-- do not take this course just for a QR credit or anything else. You definitely derive the most fascination from it if you are remotely interested in how computers work and internally behave. You also probably wouldn't be willing to spend time on the problem sets if you don't like computer science as a theoretical field.",
    "Yeah, it's good. It can be a LOT of work if you let it be. Go to help hours, etc.",
    "Yes! If you are a computer science major this course is a requirement, but it is also super a great course and introduction into the field of CS.",
    "While Racket is a very annoying and frustrating language to learn, the course definitely helps students understand code better, and will be helpful for future CS classes.",
    "I would recomment this, it's an interesting take on programming that you've probably never seen before. Professor Angluin is also a great teacher.",
    "Yes! So engaging!",
    "If they are majoring in computer science I would.",
    "For me this course took a lot of time and effort but as someone who's interested in computer science and enjoys programming I found it very rewarding. I would recommend it with the disclaimer that it may not be for people who aren't preparing to study CS further at Yale.",
    "If you are intending to take the comp sci major this is a must. If you are just interested in computer science and majoring in something else this may be a challenge",
    "Yes, I found t very interesting. However, the class was structured in a way where I often felt we had very little engagement with the material learned. As a result, we learned a lot, but when the material wasn't on a pset, I felt I had a very surface level understanding of it.",
    "I would recommend this course to someone who has a serious interest in computer science. It doesn't have to be their major but if you are taking this class on a whim, you might not have a fun time.",
    "This is a great course, even if you haven't done much coding before. The common review theme of \"not much practical application\" is definitely true, but I was in it to learn HOW to code and not necessarily how to code for any particular application, so I was perfectly satisfied. Well, machine language was annoying, but I understand that it's important for majors and such.",
    "This is a very fun and interesting course, starting the problem sets early and going to office hours helped me improve my skills a lot. The material is fascinating and I learned lot in this class.",
    "Take it if you are a CS major, otherwise the material we learn probably isn't relevant to you.",
    "Everyone should learn basic programming and this class will teach you just that.",
    "Yes! Take this course! Take it with Professor Angluin, if possible! You will learn a lot about how computers work and the materials will really lay the foundation for future CS courses!",
    "If you want to be a CS major, definitely take it. (Well, you don't have much choice).",
    "Or daayes",
    "I would only recommend this course to someone interested in advanced study in computer science. For that track, it is very helpful. For someone looking for a brief introduction to computer science that they can use, I would not recommend it because the curriculum is fairly theoretical and the material taught is not very applicable for someone not studying computer science further.",
    "I'd recommend this course if you're planning on going further in computer science or programming, or simply want to know more about the topic. It isn't really a survey course as the title might imply. Otherwise, it's probably not very useful.",
    "yes, if you have the requisite interest in computer science",
    "Yes the class is very doable even if you aren't a CS person. It introduces you to the major well and there is plenty of support from office hours to peer tutor hours.",
    "I would recommend this course if it's with Dana! She's great.",
    "Take it if you need to take it.",
    "Definitely. A lot of student complain about Racket, but for me, as this is the first programming language I learned substantively, I feel like this class taught me how to program and about theoretical CS. I think this is a necessary class--you can skip 112, but I don't suggest skipping 201, since it teaches you computer science theory that you otherwise will have little chance of exposure to.",
    "I enjoyed CPSC 201 very much. It is more abstract and theoretical than the first-tier introductory computer science courses, which I enjoyed. I would definitely recommend it.",
    "Incredible.",
    "Yes! It teaches you about dedication and hard work and committment, even if you're not a CS major. It also shows you to tackle problems that seem untouchable",
    "Yes I would recommend this course if you already have a good amount of programming experience. I took it after taking the AP CS class a couple years earlier in high school and I found the material much more challenging than other students seemed to. The kids who had taken 112 or CS50 before seemed to have a much easier time. Overall though, the class is fun and engaging if you have the time for it. The problem sets do take at least 10 hours and you have to be willing to go in to help hours.",
    "I would recommend CPSC 201 with Professor Angluin to students who are genuinely interested in computer science and considering pursuing the major. It provides a strong introduction to functional programming (though do not expect to ever have the opportunity to use Racket, the language used in the course, in a practical\/real-world setting) as well as a broad survey of fundamental computer science topics\/concepts. The problem sets (usually once a week, other than exam weeks and vacation weeks) are very useful for learning as you are usually required to simulate a concept that was covered in lecture, and most took around 5-6 hours to complete, except for a couple at the end that took closer to 10-15 hours. There were two midterms and a final. The exams were difficult, especially since I had not taken a computer science class prior to this one, because they involved both memory of examples and concepts covered in class and on homework AND on-the-spot problem-solving, including handwriting code without being able to run it on a computer. However, they were graded fairly with lots of partial credit. Also, Professor Angluin was a good teacher who seemed to care about her students, and there were a lot of office hours and help hours throughout the week.",
    "I would recommend this course to someone who is interested in the CS major, but since the class deals with CS concepts rather than general programming, it probably would not be applicable to most students.",
    "Yes, take it for necessary knowledge on our digital age",
    "I would not really recommend this to another student unless they really enjoyed logic or it was required for the major.",
    "I would definitely recommend this course to other students if they are willing to put in the effort that is required. Make no mistake, the class takes a lot of time and is difficult and it can be very challenging to have to compete with all the CS majors but seeing things come together is worthwhile."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "201",
  "section": 1
 }
}