{
 "crn_code": "10696",
 "season": "201903",
 "legacy_coursetable_course_id": 52949,
 "enrollment": {
  "enrolled": 23,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    0,
    1,
    3,
    7,
    1
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    1,
    0,
    3,
    6,
    1
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    0,
    1,
    4,
    5,
    1
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    0,
    2,
    3,
    4,
    2
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    0,
    4,
    7,
    0
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    1,
    4,
    5,
    1
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "A lot of math knowledge.",
    "I learned so much about the field of verification. I didn't know much about it before taking this course, but per the recommendation of a previous student, I tried taking it this semester. We covered so much material over the course of the semester, and we were able to implement our own mini dafny and a SAT solver by the end of the course.",
    "Logic, theories, verification pipeline, verification tools",
    "I acquired a general picture of the various approaches being taken to rigorously verify safety or correctness properties of software programs. In the process, I also acquired some experience working with math logic, and building non-trivial programs such as SAT solvers, in programming languages of my choice.",
    "This course was an excellent capstone programming course for the required computer science courses for the major. It takes the programs that as a student you have been learning how to write for multiple semesters and asks you to interrogate how you know that they are accurate by integrating both programming and proof knowledge. I would recommend this course to any student planning to go into a career in software engineering since it teaches you the skills you will need to be able to argue for why your solution is accurate. It is also an interesting introduction to zero-knowledge proofs (though the professor does not focus on this very much) which is very applicable to emerging research on applying verification processes to law, something I found particularly useful about this course.",
    "Basics and foundation of Software Analysis and Verification",
    "You learn about current software verification techniques and technologies used in CS today.",
    "Formal methods to verify that computer programs have no bugs, automated theorem proving, the simplex algorithm for solving linear programs, and the Haskell language. There are two big programming assignments, which are: a tool that reads in simple imperative programs, and then proves them correct (using a theorem prover), and a SAT solver."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "S: engaging courses and vigorous prof. W: \/",
    "Ruzica is a great professor. I think the slides were very good and easy to go through for the homeworks.",
    "In class problem solving is helpful, professor is very cheery and engaging, but sometimes concepts are presented without obvious intuition, which I would have appreciated",
    "The course achieves what it sets out to do, which is to give students a primer on the burgeoning field of computer aided verification. It gave me better insights into how to analyze the structure and flow of programs, and as a side benefit also made me think more rigorously about the programs that I myself write manually. Ruzica is very enthusiastic about the material and helpful. There are also a couple of guest lectures from folks in industry which were interesting but don't teach you much in the way of new material, other than the fact that these tools are gaining increasing acceptance in big tech companies. Be warned that while the psets are doable, they may get incredibly tedious to complete in the latter half of the course, because it involves doing mechanistically by hand what should be done by a computer. The two projects on the other hand are great fun, provided you start early. I also felt that by the end of the course we had learnt about half a dozen procedures that were all slightly different approaches to the same goal, so it would have been helpful to reflect on them at the end, by clarifying their differences and talking about the niche each procedure fits in.",
    "One of the best parts of this course was the combination of theoretical homework assignments and coding projects. I truly enjoyed the projects which helped to solidify the concepts in class and encourage us to think more critically about how to improve upon the concepts. The homework assignments were also helpful as a check on understanding (though it would have been helpful to have had them be graded faster) and were useful study guides for the exam. The course could be improved by including more worked-out examples in the slides which would help students who struggle to understand the example the first time to go through and work on the example on their own outside of class.",
    "Strengths were very good coverage of the topics being introduced. Weakness was that sometimes assignment due dates overlapped leading to periods with much more work than others.",
    "The professor moved too quickly with a lot of the procedures that were needed for the homeworks and the tests. It was also often confusing how all of the pieces of the course and the tools learned all fit together into the bigger picture - a broader overview of how everything related to each other and what each tool could be used for or not used for would have been very helpful throughout the course. Also, there needed to be way more and longer office hours.",
    "The class is really small, relative to most other computer science lectures, which was great."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "Yes, if u like proof-based math.",
    "Yes, I would recommend. Just a warning though - you have the option to pair up with someone for both projects in this course. Only do it if you have good friends taking it! I would have been so much better off working alone",
    "Yes! Great introduction to formal methods, one of the main branches of computer science",
    "If you're interested in building 'correct' code or hate bugs, and want to see how tools can be built to check for these things, then definitely. You will gain a better understanding of how to automatically analyze the structure and flow of computer programs, and how to harness formal logic in these analyses. SMT Solvers are also a great tool that should be in every programmer's handbook, and this is a good way to get introduced to them. However, be warned that some of the psets can get incredibly tedious, and if you are taking the graduate level version, the work can be pretty back-loaded towards the end of the semester.",
    "Yes I would absolutely recommend this course (and Professor Piskac) to any student interested in an engaging, well-organized, and useful CS course.",
    "Yes, if the topic interests you.",
    "Only take this course if you enjoy first-order logic and more \"mathy\" aspects of CS. There isn't very much coding in this class, though there are two substantial coding assignments that you can do in pairs\/groups of 3. A lot of the stuff was learning step-by-step procedures of applying rules over and over to logical formulas; it often felt rote, boring, and annoying, and a tiny error in a symbol at the beginning of a problem would make you have to start the entire process all over again. At one point, we were learning some extremely long and tedious algorithm of doing large amounts of basic algebra by hand (called Simplex) which was used for linear algebra, but since linear algebra wasn't part of the course at all, if you didn't understand the linear algebra already, it was a massive annoyance and waste of time that you didn't really understand and wasn't relevant to anything else. Also, the first-order logic was covered very quickly, so it was hard to fully follow the slides with all the symbols if you were unfamiliar with them. I also didn't feel like I really learned when each procedure would actually be used and for what - even though we did discuss real-world applications, I didn't think the broader picture was clear of how each piece fit together. The HWs were often confusing because you would cover a step-by-step procedure in class and do an example, but then the HW would have something much more complex on it or some extension that was beyond what was done in the class examples. The TA (Bill) was far more helpful with HWs at the beginning of the class than by the end. As the course progressed, he seemed to think essentially \"by this point, you should be able to do this without much help,\" even though it was new material and obviously you were going to him because you were confused. There also weren't many convenient or long office hours to get help."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "454",
  "section": 1
 }
}