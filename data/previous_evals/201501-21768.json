{
 "crn_code": "21768",
 "season": "201501",
 "legacy_coursetable_course_id": 31579,
 "enrollment": {
  "enrolled": 70,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC305",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    21,
    20,
    4,
    0,
    3
   ]
  },
  {
   "question_id": "YC306",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    15,
    11,
    13,
    1,
    3
   ]
  },
  {
   "question_id": "YC307",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    43,
    4
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC304",
   "question_text": "How would you summarize ECON 111 01 for a fellow student? Would you recommend ECON 111 01 to another student? Why or why not?",
   "comments": [
    "This is the definition of a gut class for the CS major. 3 problem sets, all incredibly easy, and you never have to go to class. (I would even advise people to actively stay away from class because of how useless lectures are.) Go to the TA's office hours, he\/she will tell you the algorithm for the problem sets, just follow the algorithm, get 100s on the problem sets and be one credit closer to the CS major. For non-CS majors, this class does use C which bothered some people.",
    "One of the best courses I've taken at Yale by a long shot. Three interesting problem sets and that's it. Not a huge time commitment, but also interesting work.",
    "Easy if you know C and Linear Algebra!",
    "You don't have to go to lecture, and there are 3 PSETs that take a few hours to do. As long as you are capable of learning linear algebra, this class is super easy, and you should definitely take it if you want an easy CS elective.",
    "I would recommend CPSC 440 as a class to become a better programmer. The lectures were interesting, but a bit unorganized. Very few people attended them, because they are not necessary to do the homework assignments, but I went to all of them and very much enjoyed them. The homework assignments, which implement algorithms that are covered in class, were actually somewhat challenging. There were three of them, and they all took more time to complete than anticipated. Professor Rokhlin is really funny, and genuinely wants his students to become better programmers. This class did teach me a lot about programming, and I am glad that I took it.",
    "The most useless class I've ever taken at Yale - just 3 problem sets, each involving the implementation of a very obscure algorithm. Very low workload, but did not learn a single thing. Waste of a credit basically.",
    "This class has one of the strangest formats you will ever find. Three p-sets make up your grade. While it doesn't say you need to know C before coming in, you have to know it for the p-sets and he doesn't teach it to you in class. (I hadn't taken CS112 but knew Java from high school. I basically taught myself C with a book and asking others for help, so its feasible.) The p-sets can be done independently of going to class\/reading the book by going to the TF office hours (Kirill was great) and looking it up online. Most of the learning happens when doing the p-sets and most of the class never went to class. Overall, you don't learn too much since the psets only come once a month or so. Given that, its not too much work except for the few days before a pset it due.",
    "Take it if you need a fifth class for a CS major and don't have time in your schedule. 3 programming assignments that were not too difficult. You won't learn very much and this class requires minimum time \/ energy. Most people did not go to lecture. Talk to the TF about what you need to do for the programming assignments, because some of the expectations are not written in the assignment PDF.",
    "Take this course and show up to lecture.",
    "Everything you have heard is true. Three problem sets, no exams. If you are familiar with C or Fortran, are comfortable with linear algebra, and attend sections for each homework, then you will be fine.",
    "Big risk taking this class, and in my opinion not worth it. First of all, you will learn 0 things. Rokhlin actively discourages lecture attendance, and even if you do attend lecture you will find it impossible to gain anything. Lectures are rambling and incoherent, Roklhin is difficult to understand, and complicated concepts are poorly explained. However, most people who take the class, I gather, are totally OK with this situation. The bigger issue is how the class is graded. There are only 3 psets, each worth 1\/3 of the grade. This means that each pset is worth more than a midterm in most CS classes. The psets are coding in C, usually an implementation of some algorithm presented in a lecture that you did not attend. Nevertheless, you can figure out the algorithm by researching online or going to TA office hours. However, there is no test script for any of the psets. The is a real problem. You will have no reliable way to actually test code in the same way the TA will when grading. And because the whole class is about computing with numerical precision, it isn't immediately obvious just by eyeballing the output whether your code is correct--because it often needs to be correct to the 5th or 6th decimal place. The result is that you can very easily get one of the psets totally wrong, even if you go to office hours for help. And because the psets are worth so much, your grade will be totally effed. You're probably better off taking some other elective where you'll have to work a little harder, but you'll actually learn something, and where you won't run the very real risk of getting a horrible grade.",
    "The workload of this class is small (3 psets), but be careful taking this class if you do not understand Linear Algebra thoroughly. It is not technically a prereq, but the problem sets would have been very hard to do without someone who did. I came in with little knowledge of how to code in C, but I was able to pick it up quickly on the first problem set. Make sure you get help from the TA on all the problem sets, as it can save you hours of trouble.",
    "If you read other reviews, I'm sure you know what you're getting into. Three easy problem sets, incomprehensible lectures, and an easy credit for the major that will leave you with little or no additional knowledge on numerical methods.",
    "Though I am sure I got an A in this class, it was a complete disaster. I resent my decision to take it.",
    "Easy CS credit. Not as interesting on the academic side of thigns.",
    "Be warned: this may possibly be the most challenging class ever brought forth among students in the history of computer science learning, or learning for that matter. Every homework you do, you enter into a battle with the Persian army as a single Spartan warrior. However, it has led to many eurekas, furious explosions of epiphanies, and personal discoveries of unprecedented natures. But only after defeating the Huns will such streaks of lights and stars flash, such nodes connect and zing together in such breathtaking and awe-inspiring speeds. I discovered myself through this course: my strengths, my weaknesses. But most importantly, I came to one conclusion: You have to do everything you can, you have to work your hardest, and if you do, if you stay positive, you have a shot at a silver lining. It has shown me that even within the darkest realms of human consciousness there is a light at the end of the tunnel. I realized after that submission of the final homework, that what you plant now you will harvest later. What you put in, is what you get out. You miss 100% of the shots you don't take, so just take the shot. And I did, and in that moment, I was Alan Turing when he broke Enigma, I was Grace Hopper when she invented the first compiler for A-0 language, I was in that moment, Vladimir Rokhlin when he invented the fast multipole method. Thank you Professor Rokhlin, for being such an inspiration, mentor, friend, and above all else-a symbol of hope for the future.",
    "This course is poorly-taught; Rokhlin doesn't care if you show up to lecture or not. During the first few weeks when I attended lecture, lectures were often incoherent and notes were nonexistent. I tried to parse out what Rokhlin says in lecture, or to make sense of it, but I couldn't. If you have a good math background (linear algebra), you'll get more out of this class. If you haven't taken linear, then you'll probably spend most lectures wondering what's going on and worse, spending time on the problem sets wondering what's going on.",
    "lol. 3 psets. make sure they actually work, though.",
    "I went into this class knowing it was not a great class, so I wasn't particularly disappointed. The teaching is disorganized, no one goes to class, and the grade is based on just three assignments. Take it if you need to for your major, but keep in mind that almost any class would be better.",
    "What a stupid class, never went after shopping period, did fine.",
    "This course is a big joke. It only consists of three problem sets and no one goes to class. Each problem set is very short once you find out what the algorithm to use is (much shorter than one 223 or even 201 problem set). But that doesn't mean you should take this as a gut - you get basically no feedback on problem sets, and since you don't learn the problem set concepts in class and no test cases are given, you cannot check if your implementation is even doing the right thing. Pointless, and not even in the sense that it's not applicable to programming\/CS jobs - you don't learn a thing.",
    "Lives up to its reputation as a gut. You can pretty much go to office hours to learn everything needed for the problem sets. There are only 3 problem sets in total (each 1\/3 of your grade). They usually take 5-10 hours depending upon how good you are at the math. In short, an easy credit and a nice 5th course if you are taking other programming intensive classes. However, a lot of what you take away from this course is how much extra effort you put into it. If you only have a few CS credits left and want to truly get the most out of them, don't take this course. The professor does have a lot of unique programming experience, though. His stories do give you a unique way to think about CS. I think such diversity is good. Even if you don't agree, it provides you with another bases with which to view things.",
    "It's not that much work and the professor actively discourages students from going to class. But you're literally going to learn nothing. Not a bad tradeoff, I guess."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "440",
  "section": 1
 }
}