{
 "crn_code": "22285",
 "season": "201301",
 "legacy_coursetable_course_id": 21262,
 "enrollment": {
  "enrolled": 88,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    6,
    8,
    42,
    18,
    1
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    9,
    40,
    17,
    9
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    52,
    24
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "ENAS 130 is a good introduction to C and C++ and exposes you briefly to MATLAB and Mathetmatica which is useful. The class is kind of boring and sometimes hard to follow, but the material is really important and the problem sets reinforce what you have learned. If you want to learn these programming languages and don't have any programming experience, then I recommend this class to you.",
    "Good introduction to C and C++ but you don't learn anything in class so be prepared to teach yourself.",
    "ENAS 130 is an introduction to programming in C, C++, and a little bit of Mathematica and Matlab. If you don't have any experience whatsoever, this class will get you up to speed. If you do have previous experience with a different language, you may find it a little slow to begin, but it picks up towards the second half of the semester. Actually, that's something good to know from the beginning: it starts out quite easy, but by the end of the semester there are a decent number of students struggling.I would recommend this class if you're looking for an introduction to programming (distinct from \"computer science\"), and want to be able to do some useful science-and-math-y things with computers without breaking your back over homework and exams.",
    "Good content, not the best class",
    "ENAS 130 will teach you C and C++ pretty well. It can be hard if programming isn't really your thing. The lecture can get pretty boring because a lot of the time the professor just reads off slides.",
    "Professor Long's lectures and lecture notes are not very clear. This is not much of a problem for most of the course as the work is very easy. However the last few weeks of class will really ramp things up, the homework, final midterm, and final project are punishing. Only take this course for a requirement, if you'd like to learn programming try some of the other CS courses. However, it should be noted that Professor Long can bend the laws of physics to his will and this effectively negates any and all criticism I have leveled against him.",
    "If you have to take it, you have to take it. It's not that bad, but not the best for programmers who know nothing.",
    "If you want to learn programming in order to advance further in computer science but can't take CPSC 112 because of schedule conflicts, don't take it. If you want to learn a massive amount of basics to serve your future science career, maybe a good choice.",
    "Very easy class. I had zero programming background and I though that the material was very easy.",
    "I enjoyed this course. The PSets are rather straightforward and the pacing is good. The only issue is that you may feel short on time when doing the midterms, but fortunately those are only worth 15% each (there are two midterms).",
    "Decent. Focusing on C and C++ rather than Fortran was nice. Marshall does a pretty good job of teaching it but truthfully it's a little hard to pay attention and his notes \/ example code are good. Problem sets are pretty good problems and not too stressful. All in all good and introduces you to the general foundation of coding, along with the frustration when some tiny detail is unraveling everything",
    "It's an interesting course and you feel really accomplished knowing how to write different kinds of codes. The only problem is that it isn't exactly taught like an intro level course. The best way to get by in the class is to get someone who is really good in the class to teach you the codes, because the textbook and power point slides are not very helpful. I still recommend the course though. Definitely a nice skillset to acquire.",
    "This is a pretty standard intro to high level language programming like C\/C++. You go from learning while\/for loops to arrays to dynamic memory allocation to structures to classes and that's really just about it. There's a bit about Matlab and Mathematica but these assignments are very chill. The assignments in general can take a few hours but if you like puzzles then it's actually pretty fun.",
    "Yes if you want to learn how to code. Coding is fun and it does challenge you to think in a more disciplined, logical way. I was glad to take it Credit\/D though.",
    "Enjoyable course. Psets are interesting challenges. Good programming class for science and engineering majors, but if you're looking for more general programming, try the compsci department.",
    "A good introduction to C and C++. C++ is really helpful if you're going to be doing object-oriented programming (e.g. Python). The problem sets are quite easy for the first half of the course (C) and then become suddenly much more time-consuming after spring break in C++. The midterms weren't bad at all, and the final project was basically another problem set. Don't buy the textbook if you take the class, it's not helpful enough to be worth it.",
    "This was a solid introduction to C and C++ programming, though it didn't hold my attention very well, probably because I had a little programming experience before. The first half of the course was pretty easy. It got a bit more confusing later when we started learning structures and classes, but still not too bad. Even if you've never programmed before, this is a good intro level class that will teach you a lot.",
    "Don't bother buying the textbooks, because you'll learn everything from lecture, lecture notes, or online. All of the problem sets and exams were pretty straight-forward.",
    "The perfect programming course for science and engineering majors. You skip the computer basics that compsci classes teach, and learn the fundamentals (almost all you need to know) of C and C++. After this class you'll be able to understand other people's codes, write your own programs to solve scientific problems, and if necessary learn more C on your own. A very effective and efficient course, well-planned and well-taught. (You also briefly learn Matlab and Mathematica, not much but helpful if you've never experienced the power of these software)",
    "If you've never done any programming before, this is a really good course to take. This year we learned C and C++ with a week on Matlab and a week on Mathematica. The lectures are not really very helpful but the problem sets definitely are--and they do get fairly challenging towards the end of the semester.",
    "Covers C\/C++, Matlab, and Mathematica. Don't expect to leave the course fully proficient in Matlab\/Mathematica. The class really only has time to give the programs a cursory glance. It picks up pace in the second half of the semester, once you start C++, so be warned. Otherwise, I learned a lot and am excited to take more programming courses.",
    "This course is tough, but if you're taking it, it's probably a requirement. It's meant to be for beginners who've never programmed but a majority of the class seemed to have programming experience. This definitely through off the curving that Professor Long was willing to do. The lectures are basically just reviews of the powerpoint and explanations of the sample code but it's still very helpful to show up. It's SUPER IMPORTANT TO START THE PROBLEM SET EARLY if you want any kind of help. If you procrastinate, there will be no help sessions and no one will want to work with you, so get started early.",
    "It's a requirement for a lot of majors. Just know that it gets a lot more difficult in the last 3 weeks. C\/C++ are good programming languages to know, so it's worth it.",
    "Introduction to object oriented programming via c\/c++. Also does very very brief intros to matlab and mathematica.",
    "With hindsight, ENAS 130 teaches you the fundamental bread and butter of programming. You started off with nested loops and you ended with Conway's game of life and graphical simulation. You'll be surprised to find out how much you know about programming by the end of the semester. Lectures aren't as helpful as office hours because Professor Long spent at least 30 minutes of Monday's lectures going through the past problems, which would have been more helpful if he'd gone through more example programs in class. Be prepared to spend on average 7 hours a week on the problem sets. Get a study group. Also be prepared for a class full of kids who know how to program and who will aggressively tilt the median to the 90-100 range.",
    "A solid introduction in functional programming (C) and object-oriented programming (C++). Marshall Long is an excellent, charismatic and helpful professor, and the class moves at a very fair pace: not too slow so that you don't learn anything, but also not too fast so that you can't keep up. The longest program I had to write amounted to about 400 lines of code (which seems like a lot, but isn't actually considering how many lines contain very few characters). One thing I like about the program is that some emphasis is placed on programming style: it is important to make your program neat and to comment it out properly in addition to writing a program that works.The midterms require a lot of practice-programming, because creating a program in an hour for someone who has never programmed before is not easy. Since a lot of people who take the course have previous programming experience, it means the average test performance is pretty high. I don't really think there's a very harsh curve in the class though: Professor Long stated during the course that if he thinks everyone deserves an A in the class, then everyone should get an A. The goal of the course is to learn to program: achieve that, and you get an A. And to achieve that, going to lecture and doing the psets in a timely manner (allow a few hours for possible debugging time) will allow you to learn to program. And if you ever get stuck, you can always ask the professor to help. It is a great class and I'd definitely recommend it to absolutely everybody in Yale, because knowing how to program really will make the rest of your life easier.",
    "A really good intro to programming in C and C++ . There is a steep learning curve, but if you are in the sciences, particularly engineering, physics or astronomy, the sooner you learn this stuff the better, and you will have to learn it eventually.... This class makes it as painless as possible. Don't have your laptop open during class. As counterintuitive as it sounds, take notes by hand. There is a lot of looking at the instructors notes and code on t he overhead, and you will start to get board and check your Facebook or whatever, given the chance. If you don't pay attention in lecture the pests will kill you.",
    "Every science or engineering major should take this class unless you already have extensive knowledge of c\/c++. This is probably the most useful class ive taken so far at Yale. I'm a physics major and would not have gotten the internship I got for this summer if I hadnt taken 130. It's useful, a manageable workload, and genuinely fun work for everyone I know who took it.",
    "I thought this was an excellent introduction to computer science. The material was well taught and with plenty of examples. I thought the homework programs were engaging and often easy to see how they could be useful for future applications, as they often focused on reading in and analyzing data. The workload was manageable, although the last couple problem sets took a bit more time than the first few. It did seem, however, that a lot of people had taken programming before, as the midterm exam grades were very high. The professor, however, kept the material at an introductory level which was helpful. He also provided sample codes to help us better learn the material and use fragments of the code in our own programs, which was great. Overall, I would definitely recommend this class if you are interested in computer programming.",
    "The class starts very slowly with C, transitions into MATLAB and Mathematica for only 2 weeks or so, then goes into C++ mode and picks up in pace very quickly. Towards the end, start on homework assignments early. Lecture isn't entirely necessary, but it's a nice time to do some coding. If you're not required to take it, then take it only if you want to get to know C and C++. Otherwise, not the right course for you, and CPSC 112 is better.",
    "This course is a really simple and helpful introduction to C and C++. Also we took a couple weeks of MATLAB and mathematica but not nearly enough to become proficient. The workload is really manageable and the grading is extremely lenient. Marshall Long isn't the best lecturer but that doesn't really matter in a coding class. He is really helpful if you ask him for help outside of class and he is really understanding about everything. I would recommend this course but chances are you have to take it.",
    "The problem sets take a long time, and require a lot of outside work.",
    "It was a class that will hopefully be very useful in the future with the knowledge of C\/C++ that i now have. however, it was not nearly as effectively conveyed as i hoped. I would opt for another introductory CompSci course given the option.",
    "I would recommend this class to people with no prior programming experience. It's a pretty good intro course that imparts some useful skills. Be warned though: it goes from extremely easy to pretty difficult in the last few weeks.",
    "This is a really fun class. You learn a lot, and the psets aren't that bad, either. The midterms aren't the easiest, but he does give decent partial credit, and a crucial hint for the first midterm. The last few psets and the final take a lot of time, but weren't that bad compared to other classes. I would definitely recommend this to another student. Even though it is frustrating when your code doesn't work (debugging mad hella sucks), getting it to finally work is the best. :D",
    "I would absolutely recommend this class; the breadth of skills you learn in 13 weeks is remarkable, the problem sets are do-able (even Conway's Game of Life!), and Professor Long is very caring and approachable. Exams are fair.I started off with no programming experience, and by the end of the class, feel very confident in my ability to tackle new problems in C, and C++. Unlike others, I am very pleased that Long decided to introduce us to a week of Mathematica and Matlab.If you have no - little programming experience, and want a class with a reasonable workload, a superb professor, and transparent grading, take this.",
    "ENAS 130 is a course that teaches the basics of C, C++, and some Mathematica and Matlab very well. If your objective is to get a working knowledge of these languages ENAS 130 is a fantastic course to take. It's practice of giving many projects to learn by doing is easily the best way to understand how to use each language. I would recommend ENAS 130 to a student because it achieves what it sets out to do and is not a particularly difficult or time-consuming course.",
    "Even if you don't need it for engineering, it's not a bad class to take. Very manageable workload and the problem sets and final project make up 70% of your grade, which is nice.",
    "Good intro for someone who does not want to do a whole programming sequence and want to just learn basics in one semester.",
    "I would. I was at the level that I knew maybe more than 70% of other students in the other class. If you already know :object oriented programming, recursion, program control, basic input-output methods, then you might want to choose a more advanced programming class thats dedicated to a different programming language, and then learning the matlab\/mathematica portions on your own (which took ~2 weeks to go through total)",
    "This class is slow and really not for someone with much experience. The programs never get to complex. A lot of the homework is more about understanding syntax than figuring out how to solve a problem.",
    "If you have to take it, get it over with. Get a study group together and do the problem sets over the weekend. If not, do 112-it's far more interesting and it's graded more easily.",
    "A solid class, but there are definitely some pros and cons to consider before you take it.PROS: You will actually learn a pretty decent amount of C and C++ (very important coding languages) and methods that apply to computer science generally. The homework is fun and usually pretty easy--it's basically solving logic puzzles. If you're willing to put a bit of effort in you'll almost certainly do well in the class. The professor provides plenty of notes and sample code that allow you to learn things fairly easily on your own.CONS: The lectures are really boring and often unhelpful. If you have any programming knowledge at all the class will almost certainly be too easy for you and a waste of time. There's also a random 2-week period halfway through the semester where you try to learn the basics of mathematica and matlab far too quickly (time that probably should have been spent learning more C++).Weigh these pros and cons carefully before enrolling. I enjoyed my time in this class but I know many people who strongly disliked it for the reasons stated above.",
    "Yes, if you need to take this course or just want a taste of Computer Science, definitely take it! It was an okay course, just be prepared to teach yourself a lot of it.",
    "I would absolutely recommend it. it is a great class and you learn a ton",
    "I would absolutely recommend this to any student who wants to learn to program without getting bogged down in the conceptual aspects. I actually have recommended this to a lot of people I know in a bunch of different tracks.",
    "This is a good course. I feel like I learned a lot, and it wasn't too stressful.",
    "It's a really boring class and hard to pay attention in. But, if you put effort into it, it's kinda cool and a great intro to programming. It's also not too too difficult. However, the last couple of assignments are WAY harder and more time consuming than all the others, so keep that in mind when thinking about the end of the semester.",
    "Yeah, C and C++ are fairly applicable to the real world. The smatter or Matlab and Mathmatica you get are enough that if you want to start to learn them on your own you can. It's a solid intro to programming.",
    "This course is a really good way to get an introduction to coding. If you want to be a functional coder and know how to use tools that are really, really useful to engineers, take this course. It\u00e2\u0080\u0099s a normal amount of work (weekly problem sets that take about 5-10 hours), and it\u00e2\u0080\u0099s pretty fun. Only take this if you haven\u00e2\u0080\u0099t coded before. A good way to learn about coding in C and C++, and to get familiar with MatLab and Mathematica. Just practice coding a lot \u00e2\u0080\u0093 you don\u00e2\u0080\u0099t really need the text book and lecture is only somewhat helpful. The portion on C is really good \u00e2\u0080\u0093 the problem sets are exactly appropriate for how much material you know at the time, and there are just the right amount challenging without being impossible. The C portion is really enjoyable, too. The Mathematica and Matlab portions are also really useful for engineers. These problem sets were very straightforward, though, so they could be a bit longer (although the two weeks where the problem sets are less time consuming was a good time to catch up before the workload got really intense). C++ got really hard. Make sure you make friends before then.",
    "Very good class, if you don't know what classes, objects, structures, etc. are then take it. Very useful and applicable, even if you will be more likely to use Matlab in the real world."
   ]
  }
 ],
 "extras": {
  "subject": "ENAS",
  "number": "130",
  "section": 1
 }
}