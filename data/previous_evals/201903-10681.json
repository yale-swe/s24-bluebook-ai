{
 "crn_code": "10681",
 "season": "201903",
 "legacy_coursetable_course_id": 52932,
 "enrollment": {
  "enrolled": 142,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    4,
    16,
    42,
    39,
    9
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    6,
    23,
    51,
    27,
    5
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    6,
    16,
    31,
    48,
    11
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    8,
    24,
    38,
    37,
    5
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    1,
    6,
    40,
    55,
    9
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    5,
    34,
    52,
    20
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "Absolutely nothing",
    "I obviously learned a lot about computer science and functional programming, which was very cool. The lectures span a vast range of programming topics which was cool.",
    "I learned a lot about recursion, Turing machines, assembly-level language, gates & circuits, and other useful aspects of computer science theory.",
    "Racket, recursion, how to think about programming in a different way",
    "Recursion, Racket, Turing machines, intro gates\/circuits, Boolean functions, complexity time, CFG\/DFA.",
    "I learnt how to code and also to go about problems, which requires a different way of thinking that I wasn't used to before. I had never taken CS before and this course was a really good starting course for me and I learnt a lot.",
    "I learned racket, which seems relatively useless. I gained some conceptual understanding of computer science but a lot of the course felt unnecessary.",
    "Racket programming, which, unlike what people may say, is not useless. I learned recursion, UNIX commands, computer architecture, and so much more.",
    "This course expanded upon my computer programming skills, and made me proficient in the computer programming language of Racket. I also learned how to read and understand UNIX commands, and use a terminal to do things, such as creating and redirecting files, and even submitting homework assignments to the remote computer servers. I learned much about how computers work, how they access and store memory, and work to output desired values.",
    "So much recursion. I feel like a recursion god now.",
    "I learned theoretical concepts of computer science such as recursion, boolean functions, gates and circuits, regular expressions, assembly language, and computer architecture.",
    "Honestly I do feel like I got a true diversity of computer science concepts. Racket is definitely a little strange and isn't probably very practical but I definitely feel more familiar with computer science concepts like logic circuits, basic computing, and recursion.",
    "I have noticed that my programming skills have definitely improved. I used to be really bad at recursion, but now I'm pretty comfortable with it! I definitely also have a greater knowledge of the theory behind computer science.",
    "Lambda baby lambda.",
    "Recursion and LAMBDAS",
    "Recursion and various theoretical cs topics.",
    "Initially, I was frustrated that we would be working with an antiquated and practically useless language, but over time I grew to appreciate Racket's qualities. This course will not teach you how to make a game in java, but it will ingrain important programming concepts like recursion, computer architecture, etc.",
    "Racket. Computer science.",
    "I learned Racket, got better at recursion, and learned about more fundamental programming stuff. I took this after taking AP Comp Sci in high school, and I think it was the right difficulty. It definitely wasn't repetitive.",
    "Understanding of computer science principles and how to approach problem sets.",
    "recursion, baby",
    "Lambda baby lambda! I learned a lot about recursion",
    "Learned to code in Racket. Learned and practiced a ton of recursion. Learned about computer architecture, Turing machines, circuitry, and strings.",
    "I learned the fundamentals of computer science and how to code in Racket.",
    "I learned recursion, memory, and language concepts through 201. I came into this class with previous students telling me that this would be an extremely useless class and that I should skip directly to 223. While I kind of felt that for the first couple of weeks (while I learned racket), by pset 5 and 6 when it came to making your own computer, I actually kind of enjoyed the class -- i finally understood the basics of memory and strings\/language of how a computer runs. At the same time, I wished this class was thought in a more real language, because I will never use racket again. If you are a freshman and thinking about being a cs major, you can't go that wrong by taking 201 -- if anything, its a solid transition to CS at Yale.",
    "I learned about the fundamentals of computer science and how computers are set up at a foundational level. Turing machines, binary code, grammars, etc.",
    "I learned about Turing machines, grammars, and how to use recursion really well. Also about computer architecture, logic gates, circuits, etc.",
    "I learned how to program in Racket. I learned the basics of computer science theory, including computability, computer architecture, languages and electronic circuits. I practiced functional, recursive programming and became proficient with Unix commands.",
    "Broad understanding of central CS topics such as computer architecture, boolean functions, computability, gates and circuits, strings and languages, and environments and mutators. A focus on recursion taught through aforementioned topics.",
    "Coding in racket, functional programming, recursion",
    "Critical thinking and analysis, an introductory understanding of functional programming and great insight into the field of computer science.",
    "Learning how a computer works right from the basics was very interesting. Racket might have been a painful language to learn, but it made me think in a completely different way.",
    "Learned how computers work at the most basic level. Where their instructions are stored. Additionally I learned how to do recursion much more effectively.",
    "Racket. Recursion. So much racket and recursion. And basic infrastructure and build of computers which was very cool to learn.",
    "I learned a lot about Racket programming as well as various basics of computer science.",
    "An understanding of how computers, and gates and circuits work and becoming very comfortable with recursive functions.",
    "Turing machines, recursion, tree traversal, Racket, UNIX, DFAs, finite state automata, the basics of computer science with Racket",
    "Ability to use recursion very well.",
    "I learned functional programming with Racket, as well as many of the CS fundamentals - recursion, boolean gates, circuits, Turing machines and more.",
    "Recursion, deep recursion, basics of computing, basics of languages.",
    "Lots of recursion. I also learned new skills outside of coding itself, like circuits, assembly language, computability, and languages.",
    "Basics of computing (e.g. how compiler converts programming language to assembly language, pairs and lists, recursion), brief history of CS, UNIX foundations, grammar \/ languages, Turing machines, circuits, etc.",
    "I learned functional programming, basic Boolean algebra, basic gates and circuits, computer architecture, basic automata theory, and UNIX.",
    "Basics of Racket and Unix",
    "I learned about how computers function on the basic level.",
    "While Racket is a language that does not have a lot of application, the homework assignments and exams compelled me to think logically. Moreover, this class provided me with a glimpse of what the CS major at Yale might look like, including the type and amount of work associated with the major.",
    "I learned a lot about the conceptual theory between programming and about the list programming language, Racket. I learned a lot about how computers actually work.",
    "I learned functional programming at a deeper level, as well as relevant computer science concepts that go beyond just programming. There was a lot of problem-solving involved, which made me a better thinker and programmer. We also were assigned to represent computer architecture\/memory in our code, which was very fascinating and eyeopening.",
    "I understand the basics of computer architecture, recursion and logic.",
    "Learned quite a lot of theoretical computer science, which was somewhat fun learned how to put up with the BS of Racket, which was not fun",
    "I learned to code in racket, about computer architecture, and about important computer science topics such as recursion, strings, turing machines, etc.",
    "I learned a new programming language, quite different from the ones I knew before. I got a lot better at recursion, learned UNIX commands, and learned a couple things about computers like architecture, CPU, RAM, etc.",
    "I learned a lot about CS theory and got much better at understanding and using recursion.",
    "I learned a lot about general programming - especially recursion. I also learned a lot about computer architecture, boolean logic, and languages.",
    "Learn basic computer science principles. Mainly recursion, lots and lots of recursion.",
    "The class covered a vast array of topics ranging from Turing machines to regular expressions. You also get to apply these concepts by writing programs using Racket which is a programming language that forces you to get better at using recursive procedures(functions).",
    "Gained an understanding of how computers work down to the most basic components (logic gates, assembly language, etc.), learned the basics of UNIX, practiced programming with recursion.",
    "Functional programming in Racket, boolean algebra, logic gates\/circuits, UNIX, representation of languages and programs using Turing Machines, Regular Expressions and other Chomsky Hierarchy grammars, and basics of computer assembly language and architecture.",
    "As a fairly competent computer science A programmer I felt the course challenged my abilities but also made me revaluate how I approached certain problems.",
    "racket",
    "Improved my use of racket, recursion, and other concepts such as turing machines.",
    "The basics of computer science: recursion, structures of computers, Unix, etc.",
    "Recursion, Turing machines, grammars, how a computer works, circuits",
    "I learned how to use Racket and many other basic computer science concepts",
    "I learned about functional programming, recursion, turing machines, machine language, and grammars.",
    "Racket",
    "I actually learned a lot about coding, especially about how to think about computer problems. I think being limited to recursive functions (and no for loops) really helped in improving my creative problem solving skills. We also learned assorted computer background information that makes me feel like I understand computers better (Turing machines, compilers, languages, etc).",
    "A better appreciation for how computers work and what they can do for us",
    "I have learned skills in using Racket and problem solving through recursion.",
    "I learned a lot about recursion and computing machines.",
    "Recursion.",
    "Racket and basic understanding of computer architecture, circuits, gates, unix, and regular expressions, among other things.",
    "Learned functional programming and recursion in Racket. Explored boolean logic, gates and circuits, and computer architecture. Learned Unix.",
    "An introduction to the theoretical side of computer science. A deeper understanding of recursion an recursive algorithms.",
    "This course, more than any other I've taken, taught me how to think like a computer scientist, and how to approach new problems."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "Literally nothing in the course is useful",
    "Strengths: cool concepts if you actually like computer science. I know many people who decided not to pursue CS after this class, so it could help you see if CS is the right track for you or not. The ULAs are lifesavers though! Weaknesses: Lectures are awfully boring and no one ever hardly attended them.",
    "Strengths are the problem sets, which are really well written and designed and really do a good job of reinforcing and elaborating on topics covered in lecture. I think the curriculum also provides a solid introductory-level understanding of basic CS ideas and concepts. Weaknesses were probably the lectures. Professor Slade is really nice and clearly really knowledgeable about the topics and content of the course, but sometimes it feels like he's too overqualified to be teaching undergrad intro to CS. I felt like in lectures either the examples were too easy, or the way Professor Slade explained them was a bit too sophisticated and unclear. I think having more demos (like the holding papers and moving from instruction to instruction Turing machine demo) and other ways to improve engagement during lectures, if at all possible, would be helpful.",
    "Strengths: Most problem sets were good and really helped for learning the content. Weaknesses: The TC-201 problem set, it needs to be shorter or we should be given longer for it",
    "The course is just an intro to programming. The purpose of the class is just to make sure you have the fundamentals down, so that you do fine in the actually interesting classes. I'd say it succeeds at doing this.",
    "I really liked the extensions for the homework as this was very helpful and stress-relieving, as it meant we had ample time to complete them. As well as this, Piazza was very very helpful. I felt that the lectures were not very helpful and it was a lot better to learn the content at home, I am not sure how to improve this though. As well as this, I think the content we need to know should be laid out in a much better way, as sometimes I don't know what I need to know\/not know in each topic.",
    "Why are we learning racket. The language feels useless. Please teach a practically applicable language that is object oriented. Slade is an incredibly dull and uninteresting lecturer. The actual lectures were close to useless.",
    "The programming assignments are very well structured and if you pay attention during lecture or read the notes, you will not have any trouble keeping up in this class. However, although I personally liked the professor, some people may find his style long winded and slow. The lecture notes provided are very good and there are amble resources for everyone. The programming assignments were very well structured (as it guides you through it) and does a great job of teaching Racket without shoving the online textbook in your face.",
    "This course does a great job of introducing topics, and the pacing of the class is somewhat on the faster side, yet is very manageable. As well as office hours with Professor Slade and the ULAs, the online youtube channel was extremely helpful in conceptualizing and understanding the challenges in the problem sets. The fact that all material relevant to the course was made available online, including lecture notes, class transcripts, and helpful readings, made much of the work in this class easier. One of my issues with the course was the pacing of the lectures. For one, lectures are technically not mandatory, so many people did not show up. Regardless, most people got by well enough, which shows that the lectures are not conducive to success. The lectures also felt as if they were constantly out of sync with the current homework assignment. Though well appreciated, the lectures at times felt more like lore than actual practical applications, and very loosely followed the lecture notes that were posted. Overall, it felt as though studying for the class was very difficult, since there was never a clear cut idea of what was expected.",
    "Strengths- the notes and resources are very accessible and helpful, the course staff are super helpful and answer questions both in person and on Piazza, the exams are fair Weaknesses- despite Professor Slade's attempts to convince us otherwise, I still think Racket is pretty useless. As a student who is trying to find an internship or job for the summer, I really wish this class had been taught in a more relevant programming language so I would have more experience that companies were actually looking for.",
    "The problem sets are challenging and do a good job of facilitating the learning of concepts introduced in lecture. Lecture could be more engaging by being more closely related to the problem sets.",
    "The lectures are quite short which makes it difficult to really get a lot out of each lecture. The course might work better if it is two lectures per week instead of three. I do like the pset structure as it really guides you through each stage and I felt I learned a lot doing each one.",
    "I didn't really like the errata system very much where pointing out errors would award you late days, or at least the fact that simple typos counted as erratas, because they somewhat spammed the Piazza. I loved the Youtube channel! It was by far the most helpful resource in the course. Office hours were really helpful too.",
    "I think there needs to be more connection between the instructor and the students in class.",
    "Lectures are a bit boring and entirely skippable, the material is pretty interesting if you're into computer science though",
    "Strengths: assignments were very conducive to understanding; improvements: lectures could be clearer",
    "The course was disorganized and hard to follow",
    "The main strength of the course is its wealth of TA's. Go to the TA's (or ULAs, because apparently every class needs to call the assistants something else) if you have a question, or need help.",
    "Strengths: Racket was actually great, p-sets weren't too bad, (some) ULAs were incredible Weaknesses: Other ULAs were racist\/demonstrated biases\/micro-aggressions towards students (structural issue within the extremely white and androcentric Computer Science department and discipline); absolutely ABSOLUTELY disengaging lectures... like mad boring (how can Yale not hire more stimulating and diverse CS profs? the world will never know) truly learned from my ULAs",
    "I enjoyed the course and the problem sets a lot. I went to almost every lecture, and while at first I was unsure if they were helpful, once I started taking notes and reading the lecture notes I definitely started to understand more completely. Office hours were very helpful, as were Lukas's videos. I thought it was challenging, but in a good way. I wasn't a huge fan of the website, or how it was organized, as it was quite difficult to find specific notes later.",
    "Weaknesses are that the content isn't very engaging and none of the things learned in this class are very practical at all. In fact, this whole class constantly tries to justify why certain things are taught, but I feel that Racket isn't very useful and an intro class should have more projects and uses languages like C, Java, or Python that will help us later on. The only reason I and I'm sure many other people took it was because it was a requirement for CS majors, but the content isn't entirely useful and I feel that CS50 would be a better use of my time.",
    "strengths: office hours, ULAs, piazza weaknesses: lecture, archaic\/theoretical material, lack of practical use",
    "There are many office hours available to the students",
    "Strengths: learned more generally about computer science. A little daunting at first, but it helps you realize whether or not computer science is a good major for you. Prof is funny at times. Weaknesses: Lectures can get really dull if you learn the material online.",
    "Strengths -- attendence wasn't taken. Professor Slade was an ok lecturer, but the actual lecture was definitely not useful. You can do fine by just doing the psets and reading the notes online. The weaknesses are the lectures -- again, they aren't particularly useful and half of it is going over some random joke that Slade thinks of.",
    "PSETs are very useful and interesting to work on. I think the lectures could be more focused on material from the course and could cover more content but generally a well put-together class.",
    "I think the problem sets are really fun and do a good job of teaching the topics--that and the really well-written lecture notes ensure that the material is fully learned. I think lectures are fun too, but as a weakness, they are pretty unengaging most of the time. I appreciate the logic problems at the beginning of class though (which aren't actually logic problems and mostly just fun riddles).",
    "The course covers a wide range of introductory computer science concepts that wouldn't be learned elsewhere. The problem sets are well-designed and guide students through a series of programming challenges that naturally enforce course material. However, the lectures are not especially engaging or clearly organized. The course could be improved with a better organized lecture series that provides a summary of the unit at the beginning and end of each major topic.",
    "Psets were very interesting and I actually really like Racket. Notes were very comprehensive. Lectures were terrible and Slade was really horrible at teaching. Teaching staff was good and quick at responding to Piazza though. Lukas' videos were awesome.",
    "Strength: learning functional programming Weakness: the lecture was unbelievably boring... Prof was simply not interested in teaching Though the help hours by ULAs were very helpful",
    "Prof Slade should leave Unix up to the students to figure out on their own. The UNIX demonstrations in class were not super engaging.",
    "The examsthe idea of having them on paper beats me.",
    "Homework was fantastically constructed. They got a little too simple by the end but they fit into what we were learning perfectly. Lecture went too slowly and could have dealt with more theoretically challenging material to make the course more challenging. Overall course could be made more difficult and faster paced.",
    "Problem sets were fun and exams were fair and straightforward. Lectures were very boring and all over the place. No structure within lectures and definetly lacking. You learn almost all from the psets.",
    "The lecture itself was somewhat difficult to pay attention to, and I would estimate around 1\/3 of students actually attend lecture. All of the material is posted online though, which is very helpful, and there are office hours every day which makes it very easy to get help on psets and concepts you don't understand. The organization of the class was very good, but it would have been helpful to have more individual feedback since it is a large lecture.",
    "I think the course is set up really well, as each pset builds on another so you are able to complete the largest pset toward the end with a good understanding of how computers work. The only thing I didn't like was the amount of material on the final.",
    "Strengths: Course content is available online so people can start studying beforehand, TA's are very knowledgeable and helpful (moreso than the professor) Weaknesses: Course was disorganized and material was not properly covered by the instructor, who glossed over many concepts and went on tangents during lectures. Take this course only if you are a CS major, otherwise take CS50. It's better.",
    "Strengths: Racket in that no one has learned Racket (even playing field) and that it is highly effective in teaching recursion. ULA's are very accessible. PSETs are very challenging, but this requires the student to be proactive in learning. Errata point system is hilarious. Weaknesses: Racket is rarely used in the real world and I don't expect to ever code in it again. UNIX is taught but almost never actively used, resulting in lopsided studying for an exam and little to no application in the course.",
    "The course gives a good overview of CS fundamentals and the homeworks are interesting, albeit confusing at times. Help hours and the video tutorials are very helpful. I'd like there to be more actual teaching - a lot of the learning for me happened through the problem sets and I found going to lectures relatively useless.",
    "High workload is a strength and a weakness but the psets are at least do-able, though they take some time. The professor is very enthusiastic, but I often drifted off in lecture.",
    "The material presented in the course is engaging and exciting to learn. However, lectures themselves could be more engaging.",
    "Problem sets were engaging, material taught in class was great compliment to online notes, and office hours were always helpful.",
    "This course is ambitious in that it attempts to cover many different topics in computer science that at other institutions are typically taught as different courses. As a result, much of the complexities of these topics are ignored as they are sped through. For example, circuit theory is barely introduced and automata theory is not covered in much detail. Furthermore, many topics are taught through Racket functional programming, which is not useful to actually learning the topics themselves. For example, instead of simulating circuits in Racket (which does not make much sense in pragmatic terms), we should have been given psets that were theory-based and were to be turned in by hand rather than Racket. Much of the problems students faced were with Racket syntax and idiosyncrasies rather than the actual concepts themselves, which is counterintuitive. Furthermore, the course would benefit from teaching computer architecture using an actual assembly language like x86 rather than the made-up TC-201 assembly language, since x86 wouldn't be much harder to learn and would be something that's actually used in the real world. I truly like the ambition of this course in covering many topics in CS, but its weak execution, shallow depth with topics, and unnecessary emphasis on Racket draws away from its potential for being a truly rigorous introduction to computer science.",
    "Use an actual programming language and not Racket",
    "The professor goes on many tangents in class, but the class notes are amazing. Sometimes its not even worth going to class because teaching yourself is quicker.",
    "The homework assignments were very well structured and gave me a better grasp of the concepts they were related to. I felt that the lectures were not as useful as I would have liked them to be. They didn't cover the course material in a methodical or effective manner, prompting me to depend on The Racket Guide and help hours to understand concepts related to Racket or homework assignments.",
    "Weakness are that lectures are terrible. No one is engaged. Strengths are the p-sets and the ULAs. The help hours pretty much carry the class. You may as well get rid of lectures and only give us p-sets and the class would be the same, if not more effective if the time wasted on lecture was spent being taught by ULAs or listening to Lukas' videos. The p-sets are actually genuinely interesting.",
    "The lectures weren't really engaging and didn't teach the concepts we were tested on at a broader level. I wished that the content was taught in a way for it to be applicable. Sometimes, the instructor would go over how to complete the upcoming assignment, but I didn't think those were necessary and instead should have focused on teaching the content conceptually.",
    "The notes were very detailed and helpful.",
    "Decent support",
    "The weaknesses are the lectures, which are often boring and lack engagement. The strength are the office hours and videos which provide a strong support.",
    "Strengths were the review sessions and how helpful the assistants were. Weaknesses were the lectures, as they were not very interesting and not completely helpful regarding the homework assignments and the tests.",
    "Lectures for the class were pretty weak, but the problem sets were always interesting.",
    "The course was very well structured, the lecture notes were really good for review of the material, and the homeworks were every helpful in learning.",
    "It does a really good job teaching recursion and CS basics. There is no way to do well in this course without learning recursion, as it is used in every pset. The course would be a lot better if lecture was less boring and the material taught in lecture covered the psets more directly.",
    "The class covers a lot of interesting concepts but the lectures are structured as if you have already done the pset and are not very engaging.",
    "Strengths: Homework assignments were very helpful in understanding the course material and were generally interesting, accompanying YouTube videos were tremendously useful, ample and clear lecture notes. Weaknesses: Lectures were often too focused on going over one specific example and\/or individual homework problems (would have preferred more explanation of underlying concepts and general strategies for solving problems).",
    "Strengths: supporting course material and lecture notes, problem sets useful for learning lecture material, Piazza Weaknesses: lack of practical applications and modern-day examples (example: TC-201 should be contrasted with modern-day computers).",
    "The lectures are unhelpful to complete the problem sets so they have little value. The ULAs are incredibly helpful and make the curriculum learnable.",
    "Make it more clear as to what information we are supposed to be learning",
    "The psets are very interesting but lecture is largely about the psets. Many of the TFs seemed underprepared and I couldn't see why things like UNIX were tested on the exam.",
    "I really appreciated the fact that the professor always uploaded all of the class materials online because it made it much easier to revise for the exams. I also thought that the availability of office hours made it easier for me to handle the psets. However, some TAs are much more helpful than others, and seem to have a better grasp at the concepts so it may be better to have some kind of base standard.",
    "Strengths were how interesting the material on its own was. Weaknesses are that lectures are essentially useless for learning the material.",
    "Strengths: very comprehensive introduction to computer science Weaknesses: possibly none",
    "The class provided a good overview of topics that people with a good deal of CS knowledge probably still wouldn't know. However, the lectures aren't the most engaging and I'm not sure how much the subject matter is relevant to later classes.",
    "Seems that Most of the help provided was in the help hours rather than the actual lecture",
    "The homeworks do a very good job of teaching you what's going on. Sometimes it's a bit hard to follow in class (maybe that could be improved?) but then after you do the homework everything makes sense. Maybe incentivizing doing the homework not at the very end\/after the unit would make learning better, because often I found that I'd only understand a topic once I finished the homework, by which time we were already on the next topic.",
    "Lecture was VERY dry. It was hard to stay engaged. One the other hand, the problem sets were super fun and enticing.",
    "The lectures weren't necessarily bad; in fact, I think the ones I went to were helpful. But the class notes\/class website material made going to lecture kind of pointless, as everything covered in a 3 lecture series could also be covered in half an hour of reading. The problem sets weren't that bad, somewhat time consuming but that's par for the course for CS. Although they weren't as fun\/themed as the problems sets in 112, it was cool to build working models of simple computers and see it all work. I also think the 5 late days is a GREAT way of doing late submissions. It lets students flex and allocate their time where they need, and as long as they still get the work done all is well.",
    "The weakness of this class was that lecture is not engaging at all and not helpful for the weekly problem sets. A lot of the times it felt like I was teaching myself the material. The strengths are that the lecture notes are very detailed and the ULAs were extremely helpful during office hours. Practice exams are very helpful to see what to expect on the actual exam.",
    "Strengths would be the resources to help you learn as well as the navigability of the course website. I would say a weakness is that the learning in class isn't that valuable.",
    "The ULA's were so helpful and basically taught the entire course. The lectures were essentially useless. Although I went to all of the lectures, I didn't get much out of them and learned the content by reading the lecture notes by myself.",
    "The psets were great for the learning the material but the lectures weren't that good.",
    "The course does teach a defunct language, which is about a net neutral as far as pros and cons. It helps you to understand the root of modern languages, but does not really give directly applicable skills to students."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "definitely not, skip to 223. You will gain very little from this course.",
    "I would recommend if you like computer science, and are in the major. Otherwise, if you are just unsure and want to try programming take CS 50.",
    "Yes, considering there's not really a more appropriate option if you have SOME experience with coding (like AP comp sci) but aren't a coding god. The psets are great, and the content is super applicable even though Racket is so sparsely used. It definitely gives you a great understanding of quite basic aspects of coding before getting into (presumably) more specialized and theoretical CS.",
    "Yes",
    "It's a required class. Go to lecture if you want hear Slade's \"quirky\" stories, but don't expect to learn anything (especially since he puts the lectures up online). PSETs aren't the worse, and there are plenty of resources to help you. So, yes - I would recommend this course.",
    "Yes, this is a great starting course to take to get into computer science. Although it is Racket, it is still very good to learn.",
    "If you want to do CS, take the course because its a prerequisite. skip if you can. If you don't want to be a CS major, take CS50. Its more applicable realistically and actually useful.",
    "For CS majors, definitely. It's a great course even for those with a considerable amount of programming knowledge and for anyone interested in computers, in that it goes into low-level computer architecture and recursion to make you really appreciate how computers fundamentally function. For non majors, consider it if you're interested in what was mentioned above.",
    "Though it is called 'Intro to Computer Science,' I felt very far behind in the first few weeks, despite the fact that I had programming experience. The computer programming language used, Racket, is somewhat confusing to learn at first, and the guide that we are introduced to was somewhat difficult to follow. Only through personal experimentation, exploring, and some extra hours will one be able to begin to feel confident learning racket. I went to most of the lectures, and can definitively say that you will be fine in the class if you do not, and have some friends to go over topics with. The incredible amount of assistance available is critical, and should not be overlooked.",
    "For someone interested in the CS or a related major, yes! Otherwise, for students just looking to supplement their resume with some programming experience, I would recommend a class taught in a different programming language because Racket is super outdated and pretty useless.",
    "I would recommend this course to another student who may be thinking of majoring in computer science or who wants to get a taste of the computer science major. If you want to learn how to program, another course such as CS50 would be a better choice.",
    "As a non-major I definitely felt like I learned more about computer science even if the direct skills aren't the most practical it will help you think about computers better. I definitely recommend either taking the course with friends or making friends in the course quickly as it can be tough to do things alone without other people to bounce ideas off of.",
    "Yes! I do feel like a better programmer and computer scientist now.",
    "If they want to pursue CS then yes otherwise no.",
    "Yes if you are a CS major (and it's required after all), but no if you only want to know programming as a skill",
    "Yes. CS 201 gives a great introduction to theoretical cs topics and functional programming.",
    "If you've never programmed, take CS50 or another introduction class. If you have a little experience, take this class, get a little ahead, and join the order of the lambda.",
    "Unless you need it for the major or want to learn about basic CS, no. Otherwise, go for it.",
    "I would definitely recommend this course to any student interested in programming without much of a background in computer science. I feel like I learned a lot, and like the problem sets were designed well to enhance learning. There were also a lot of support systems, including office hours and videos on all the psets.",
    "Yes, because I did learn how to approach problem sets in a way that required analyzing it and breaking it down into smaller, more approachable parts.",
    "Yes, but grudgingly. I recommend it because there are not many CS courses at an introductory level that have 1) a reasonable workload, 2) interesting subject matter, 3) applicable material, and 4) a great lecturer. This course attempts (perhaps halfheartedly) to hit at many of these, though it falls flat sometimes.",
    "Yes! Recursion is very useful and I learned a lot",
    "It's a major requirement so yes.",
    "If you are a CS or Math major, yes definitely. If anyone else, if you really like computers and want to know how they work at a fundamental level, go for it. PSETs are pretty involved though fair warning.",
    "Yes I would! It's a good introductory CS class for people who have CS experience and the problem sets are fun to do.",
    "I would recommend this course to another computer science student because it provides valuable insight on the basics of computer science theory. However, I believe it would be challenging for a student that doesn't have some programming experience.",
    "Yes! Psets are really fun and interesting, just that lectures aren't that useful.",
    "Not if you are not a CS major...",
    "Absolutely. A perfect introduction into computer science. Disclaimer: not great as an introduction to computer programming.",
    "yes, as it is engaging and requires logic and creativity.",
    "The insight into how computers work fundamentally is important but its presented too simply.",
    "I would recommend this course to anyone interested in learning the fundamentals of computer science. I've gained a strong foundation in these principles as a result of taking this class, and learning Racket becomes very interesting and rewarding despite it seeming awful at first.",
    "Yes, I found it interesting and very fulfilling",
    "Only if they are a CS major. Otherwise, just take CS 50. I heard that you can take CS 50 and substitute it for 201 anyways, but I could be wrong.",
    "Yes. The course teaches recursion very well and students are required to learn how to tackle, and debug, complicated coding problems.",
    "I recommend this course for all prospective CS majors because it gives a deeper look into the underlying principles behind programming in general. If you're not a CS major, you might be better off with CS50 or some other course that focuses on more coding.",
    "You've got to do it for CS, otherwise it is a miss unless you want to do some of the CS classes it is a pre-req for.",
    "If you are a CS student, this course is useful to get experience in a different style of programming, and to get introduced to other topics like computational linguistics.",
    "Would recommend to students who enjoy learning about history of CS and programming basics. Great opportunity to develop intuition for recursion and how to approach coding challenge.",
    "If you are interested in computer science but uncertain on whether or not you want to major in it, this course may not give you the best taste of actual CS. I would recommend learning programming in a high-level language like Python, Java, or C++ before going into functional programming with Racket. For CS majors, it's required, so just realize that you're only seeing glimpses of what is really 3 separate courses at other schools, which go into much more detail on these topics. Also keep in mind that if you're interviewing for internships, Racket is useless --- you will want to keep practicing Python or C++ on your own to keep your coding skills sharp. I'd recommend either doing an online course or working through Leetcode, HackerRank, or Cracking the Coding Interview so your actual technical skills stay strong.",
    "Go to 223 right away",
    "Its cool to program in machine code, so yeah.",
    "I would not recommend this course. Considering Racket is a language that does not have a lot of application, I would recommend that even those people who are new to the CS major should skip 201 after taking CS50 and consider another course. This course helped me build a work ethic required for the CS major, however, It did not give me skills that I feel are essential to the CS major.",
    "Probably not. The level of engagement was pretty bad. Everyone felt like they were just slogging through the class because it's a requirement.",
    "I would recommend this course to a student who enjoys programming and solving problems. I feel that this course is too specific for the average student, but if someone wants to learn how to code at a more complex level, this course would be very helpful to them.",
    "Yes. It teaches the basics of computer architecture.",
    "Yes, it's a good course to take in the CS track.",
    "This course is a requirement for the computer science major. If you are looking to take a single computer science class, take CS50. Otherwise, this is not a bad course by any means but you will be learning Racket as opposed to languages more used in industry, etc.",
    "Sort of. It was a good first semester class, and gave me an idea of how computer science classes are run. However, it was not very practical, since most coding done nowadays are in languages like C.",
    "Yes. The problem sets are interesting and the exams are fair. The only major downside to the course is that the lectures are pretty boring.",
    "Yes. I think this was a good course for computer science. While I've heard Racket isn't very applicable as a language itself, this course is more about learning different principles like recursion and recursive data structures.",
    "Yes, if you are interested in computer science, and have at least a little bit of background. If you don't have any experience the first couple of psets may be hard, but it levels out pretty quickly since no one already knows Racket.",
    "I would recommend that class, but I wouldn't recommend going to the lectures. It was more efficient to try and understand concepts by going through the lecture notes.",
    "Generally yes, if the student is genuinely interested in studying computer science, understanding how a computer works, and knowing the theories and histories behind different components of computers and languages. I would not recommend this course for a student who simply wants to learn how to program.",
    "I would recommend this course for anyone to see if computer science is for them or whether they want to take their coding to the next level.",
    "Yes, however I would recommend CS50 first",
    "Yes although I would qualify it with racket and unix being less transferable skills...",
    "Yes. To be honest, I did not feel as prepared for this course as many others who seemed to be more experienced in programming but the material and the learning environment allowed me to study well.",
    "Yes, if you want to learn the theoretical foundations of CS",
    "Yes, it was a great experience working through the problem sets and learning these concepts",
    "If you enjoy computer science (i.e. theory, not programming), you'd probably like this class. If you just want to learn purely practical skills and don't want to major in CS, take CS50 or learn on your own.",
    "No. Lectures were not useful, The teaching assistants were really awesome though. Thank you Luke!",
    "Yes, I think the language is a bit unconventional, but it does a very good job of teaching you how to approach computer problems. Mr. Slade is also a fun teacher.",
    "Yes... if you want to understand computers. No if you just wanna learn how to code.",
    "If you like CS, you'll be fine in this course. CS at yale isn't spectacular, and 201 is no different. But it's not as miserable as many people would have you believe, although I found myself to be pretty good at it so maybe I'm biased.",
    "I would not recommend this to a student who is not interested in majoring in computer science because we learned things very specific for the major. This is required course for people in computer science major and focuses a lot on things such as assembly language that regular people interested in just learning coding skills would not need. Lectures are not engaging as well even if you are interested in learning the material.",
    "If you have any CS knowledge, try to skip 201 and place into 223! My computer science knowledge declined after this course as I forgot a lot of the skills I knew before. If you don't have any knowledge, take CS 50. Based upon talking with my friends who were enrolled in that course, I am pretty sure that they learned more and had more fun.",
    "Yes, if you considering CS at all you should take this class.",
    "Yes. It's a requirement for anything CS-related, and it's not a bad course. Racket is annoying at first and pretty useless outside of this class, but the functional programming and recursion skills you develop are useful. It's also pretty interesting to learn how a computer works at the most fundamental level. Lectures are pretty dry but you learn mostly through doing the homework, which isn't bad and sometimes even fun. Overall not bad and I would recommend it to anyone interested in CS.",
    "Yes because It gives a new understanding of how computers work and some of the history of computing",
    "I think any student interested in computer science can benefit from taking this class."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "201",
  "section": 1
 }
}