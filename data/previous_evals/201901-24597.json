{
 "crn_code": "24597",
 "season": "201901",
 "legacy_coursetable_course_id": 50543,
 "enrollment": {
  "enrolled": 102,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    4,
    7,
    20,
    18,
    5
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    4,
    14,
    18,
    13,
    7
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    4,
    11,
    17,
    18,
    5
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    7,
    20,
    17,
    8,
    2
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    1,
    9,
    26,
    18,
    2
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    2,
    8,
    31,
    14,
    1
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "You learn C++ programming fundamentals while learning about object-oriented programming fundamentals.",
    "A solid, if occasionally dry, introduction to C++ and the theory of object-oriented programming.",
    "The basics of object oriented design principles, a lot of c++ syntax, and very superficial understanding of Go, Java, and Objective C.",
    "Better understanding of different ways to design programs, syntax and structures for C++ object oriented programming.",
    "I learned C++, some Go, and many object-oriented principles.",
    "A tiny bit of c++ and some oop principles",
    "Object-oriented programming in C++, including overloading, dynamic memory allocation, template, inheritance, interface composition, and several OOP design patterns (strategy, factory, builder, iterator, etc) OOP features of other languages like Java, Go, Objective-C",
    "I learned how to program in C++ and some basic object-oriented programming techniques.",
    "C++ programming and OO design",
    "Good emphasis on design patterns. Oop is important if you want better designed software. Recommend this class.",
    "Primarily important concepts in C++. copy move constructors, destructors, vectors, iterators, unordered_maps, class design, inheritance, different patterns for object oriented programming such as strategy pattern, builder pattern, factory pattern. Also touched upon Go, Java, and Objective C but not that much",
    "This was a pretty standard course on object-oriented design in C++.",
    "I learned about a lot of programming techniques and how to program in C++ (somehow my first introduction to C++ at Yale!)",
    "I learned how to write in C++ as well write clean, reusable code",
    "Coding in C++ and topics in Object Oriented Programming.",
    "I learned the basic concepts design patterns of object-oriented programming, as well as getting stronger in C++.",
    "Object oriented programming concepts; C++",
    "Learned a lot about abstracting code and making it reusable! I learned about object-oriented programming, its importance, and a lot of syntax that goes with it in CPP.",
    "I learned how Object-Oriented Programming works in a general sense. I didn't know any OOP languages before this class, so I learned a lot about classes, instances, inheritance, etc. and specifically in C++.",
    "I learned a lot about OOP and principles like inheritance in C++.",
    "Code in an modular manner",
    "I learned the basics of object-oriented programming languages, and developed my programming skills in C++.",
    "Learn various design structures for OOP. Very important skills!",
    "Basic C++ Syntax and a lot of tedious details about C++",
    "I learned about object oriented programming and how to program in C++ .",
    "Knowledge of the C++ programming language.",
    "I learned about different design patterns and ways to organize code. I also learned the basics of C++, and learned a little bit of Go, Java, and Objective-C.",
    "I learned object oriented programming, design patterns, C++, and Go language.",
    "A better understanding of the workings of C++ and a greater appreciation of the beauty that is the Standard Template Library (STL). A bit of time was spent on design principles and object oriented programming in other languages, though this was not the focus of the course.",
    "Object-oriented programming in C++ (including inheritance, vtables, etc), general programming patterns, and a bit of discussion on OOP in other languages.",
    "How to use object oriented design in C++, and briefly how it works in other languages like Java, Go, and Objective-C"
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "Strengths: teaches the *entire* C++ language, so it's a really good introduction if you need one Weaknesses: sometimes focuses too much on the C++ content at the expense of more abstract OO content. Problem sets are sometimes really easy, and sometimes insanely hard.",
    "Strengths: first half was very interesting, Glenn is a great lecturer in general Weaknesses: second half was not engaging, did not enjoy going over syntax of other OOP languages I would have liked a group project, or individual project where we would be able to apply OOP languages to something practical.",
    "Teaches very practical material. Many online tutorials teach the basics in a streamlined way. It would be nice to somehow incorporate those resources into the course to help with topics like constructors and operators so we can focus on more sophisticated matters like vtables and multiple inheritance. Wish we had access to the OneNote drawings that accompanied some lectures.",
    "The assignments were good. The lectures were a bit dry.",
    "Lectures should not be focused on teaching and debugging a language; rather, it should focus more heavily on design patterns and concepts.",
    "Due to the variability in programming experience, a lot of time was spent on C++ syntax and very basic introduction, which could easily be some reading assignment instead of using class time. I spent only 2-3 hours on the first 3 psets because they're so trivial (like implementing a bfs, calculate distance, etc), I was not learning much for first half of the semester, but the second half covers really OOP stuff like multiple inheritance and many design patterns. The pset about designing a game to expect unknown future change to the rule encapsulate the essence of OOP a lot, so I hope the second half of the class could be augmented to about 2\/3 and give more psets like the Yahtzee game.",
    "The problems sets were pretty intense and about small details instead of overall big picture.",
    "I think the course could be improved if more focus on languages such as Java (which is very widely used) was given.",
    "I did not feel like I learned from the lectures, and I found the exams to be much harder than the problem sets. Strengths were that you learn about object oriented programming which is important for programmers.",
    "Lecture is very boring and hard to follow. It would be improved by including small coding challenges for students to complete during class.",
    "While there are a lot of strengths to the class (getting an advanced view of C++, learning about OOP in other languages like Java, Go, Objective-C), I was really disappointed that there was no final project or real project of any kind for the class. I think if any CS class were to implement a nice 3-4 week group project to help hammer in the course's concepts than it would be OOP, a programming concept whose application is best suited for dynamic and interesting projects. Instead of having a final that tests cursory knowledge of C++ and Go, why not let us show what we know with a cool project? I think our Yahtzee assignment tried to bridge that gap, but having an even bigger assignment would be much more fun.",
    "This class should focus even more on design patterns rather than c++ syntax.",
    "Prof. Glenn does a great job of the course. The assignments are a little trivial at times, but I guess it's a nice change of pace from other CS courses.",
    "The course's strength is that it forces you to consider certain programming design paradigms and implement programs using such paradigms. Usually programming assignments are kind of a free for all at Yale where if it passes public test cases, then that is all that matters, but for this class our code was analyzed for its style. For some reason it was really hard to follow Professor Glenn in lecture though. I wish he had well-written notes like other CS classes at Yale provides",
    "I wish we spent more time on certain subjects.",
    "This course is strong in that it's a good course to develop your C++ programming. The problem sets are also generally interesting. One weakness is that lecture can be a little difficult to pay attention to. Professor Glenn, though, is very kind.",
    "Lectures were pretty boring. I think it would have been nice if the class moved faster",
    "The course is very syntax-heavy, which can be good and bad. I feel like I learned how to code in CPP, but sometimes, the lectures can be so focused on the syntax that I kind of get lost very easily. The problem sets are really interesting and definitely more manageable than 323 or even 223.",
    "Loved all the topics discussed on this class. It helped me improve my C++ and taught basic good practices OOP. Beyond that though, this class helped me understand how and why certain patterns exist in OOP. The intros to Go, Java & Objective C at the end of the semester were a wonderful way to make further OOP learning more accessible. Psets were always fun, too.",
    "I believe this course is hard to follow for those who don't already know OOP. The lectures can be very dense and it is hard to know what part of the content is the most important. I think the course should focus more on essential aspects of OOP and OOP design techniques rather than C++ syntax. This course could probably also use more ULAs.",
    "I think the course was very manageable and forced you to learn how to write code uses classes\/objects.",
    "Lectures were a bit dull and drawn-out",
    "I think that the lectures would be much better if they were more high-level. I found it hard to follow along with live coding sessions in class. It would be much better with structured lecture slides about the languages much like online tutorials.",
    "It was a little hard to pay attention in class -- I personally don't learn that well through watching someone coding, which was mostly how Professor Glenn structured his lectures.",
    "Enjoyed the psets!",
    "The material of the course is interesting, but the Programming assignments are tedious and didnt help us learn what we needed to know for exams. More time could have been spent on big OOP concepts. Far too much time was spent walking through tedious examples in class rather than explaining new material in depth.",
    "I really enjoyed the course. I was able to develop a strong understanding of object oriented programming as well as learn about different programming languages. One way it could have been improved is we learned a lot of different software design patterns, and I wish the problem sets had done a better job of reinforcing those concepts.",
    "Strengths: Great readings. Weaknesses: Dull lectures. Hard exams",
    "The course lectures might benefit from an outline of what we'll go over in class for the day's lecture. Also, I feel like the difficult of the midterm and final exams were much different from the practice exams and what I would expect, so maybe more practice materials before the exam would be helpful. It was an interesting class, and the programming assignments were enjoyable to work on.",
    "Strengths: Passionate instructor, you gain proficiency in a relatively useful language (C++) by the end of this course Weaknesses: The time devoted towards the end of this course on other languages (Java, Go, etc.) could have been better spent on object-oriented design principles, since the other languages did not introduce any concepts (apart from interfaces) that were vastly different from what we saw in C++. Less time could have been spent on aspects of programming language syntax in class, and more on the OO concepts themselves.",
    "Each p-set you might be super confused how to start, but once you figure it out and get started it's smooth sailing. Office hours are very helpful. Exams are also quite difficult so prepare a lot."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "Yes.",
    "Not a bad CS elective, but not super engaging -- I'd call it a neutral addition to your schedule.",
    "I would recommend this class as you go over fundamental principles of OOP, and Glenn makes it as engaging as it can be. The psets were fair and the exams were also relatively fair.",
    "Very useful to know object oriented programming. Learn some cool ways to employ objects when designing programs. Lower workload that average cs class.",
    "If they can handle Glenn.",
    "If you are a CS major, this is a good CS elective with easy psets. Also OOP design is helpful to software engineering work if you are going to industry. If you are not a CS major and just come out of CS223, you can take it if you like professor Glenn or you want to prepare for your software engineering internship.",
    "Yes if they are good at coding and just want to learn a new language. Not the best introduction because there are a lot of technicalities like fixing compiler errors which take hours and hours.",
    "OOP is a must for any CS major; this is probably the most widely used programming concept in the industry. James Glenn is a great teacher, make sure you go to him for help if you have any questions.",
    "Not-so-gutty but totally manageable CS elective. Take it if you want to practice C++.",
    "In its current form, no. I wouldn't take this class with Prof. Glenn.",
    "Yes for the C++ experience, which is useful in industry. Other than that, there's really no point in taking this class unless the lectures significantly improve.",
    "Take it with Prof. Glenn! It's a pretty light workload and a pretty useful programming approach.",
    "It is on the lighter side with respect to workload out of the CS classes at Yale, and it definitely teaches useful skills. I recommend this course!",
    "This class helped me be comfortable with Object Oriented Programming topics.",
    "I would recommend this course to a computer science major or anyone who wants a course to develop their skills in C++. The beginning of the course gives a rundown of the language, while the rest covers design patterns. We also did a problem set in Go, but that was minimal compared to C++. Lecture can be hard to pay attention to, but the material does feel important, and the problems sets are very fair.",
    "Lectures are boring; some of the psets are surprisingly hard and time consuming (a lot of them have to do with games if that is something youre interested in). would not recommend this class if you are looking for an easy\/low commitment class or rewarding CS class.",
    "Absolutely! I think this might be one of the first courses in which I feel like I can use in my internships\/future CS job!",
    "Maybe not. It's good that I took this course because I learned OOP from it, but I felt like I was always behind the majority of the other students who already knew Java or another OOP language. This class was at one point a CS gut but not this semester. Our exams were quite challenging and some of the psets were relatively time-consuming as well (although we usually had 2 weeks to do them so it wasn't that bad). This course is not easy if you don't already know OOP. In fact, I found it much more conceptually challenging than 223, even if the workload was less. Only take this course if you have room for a fairly serious CS class in your schedule.",
    "I would really recommend this class. It is not a gut and you have to put in a lot of work, but it is super worthwhile. The psets allow you to learn and Glenn's OH are really chill and he will answer questions about the work\/assignment!",
    "A must-take for CS students",
    "I would take this if you are looking for an introduction to C++ and won't do it on your own time. I found the lectures to be pretty dry (partly due to the subject). The assignments are mostly applying an OOP technique in C++.",
    "Glenn is a great professor but this is a pretty boring class. Definitely take his other courses though, especially games.",
    "Definitely take this course for an introduction to good OOP techniques.",
    "I wouldnt recommend this course if you are interested in learning OOP concepts. However if you want to learn the fundamentals and frustrations of C++, this course will demonstrate them.",
    "I would recommend this course to another student. OOP is a very prevalent and useful concept in software that isn't really covered in other CS classes, so it was nice to have an elective dedicated to it.",
    "If they need to learn C++",
    "No. Lectures were interminable and dry, the notes aren't particularly useful, and the class feels primarily like lessons on C++ syntax. Learned the most about OOP from the textbooks. The Psets weren't fantastic either. Didn't enjoy the class at all, one of my least favorite CS classes I've taken, which is saying something considering the department.",
    "This course helped me think about ways that I could organize my code, which I found helpful. However, lectures were a bit disorganized, with no set of slides to guide you, and the exams were fair but difficult. I would recommend it if you are interested in learning C++ and thinking about design patterns.",
    "Yes. I would recommend this course to any prospective students.",
    "Take this class if you want to learn about object oriented programming (duh) and think a working knowledge of C++ would be useful for you in the future. If you're already familiar with OOP and are more interested in design patterns, or the implementation of the languages themselves, there is some material to interest you, but most of the course would be a recap of what you already know.",
    "Yep, projects are fun (ex you code the game called Yahtzee) and challenging but not overwhelming."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "427",
  "section": 1
 }
}