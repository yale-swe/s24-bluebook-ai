{
 "crn_code": "11892",
 "season": "201103",
 "legacy_coursetable_course_id": 12171,
 "enrollment": {
  "enrolled": 43,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    0,
    2,
    9,
    23
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    0,
    4,
    11,
    19
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    32,
    2
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "This course was a real delight. I learned a lot about programming in general, and my C\/Linux skills are way better now. We covered a lot about system architecture, learned about how the machine works, and we also covered an assortment of CS topics like number representation, file compression, and error detection\/prevention. Some lectures were dull and some of the kids I know didn't like the low-level stuff as much, but most of it is really fascinating.As for the assignments, they're not really *that* hard. I came in expecting 25 hr psets and living in the zoo, but half the p-sets took under 10 hours and the only 25 hr pset was LZW. If you start reasonably early i.e. at least afew days before the deadline, then you should finish comfortably. The trick is to take breaks - I rarely worked more than 2 hours consecutively, and it was a huge benefit for me.Also, LZW is ridiculous. The assignment looks really easy (he gives you a simple algorithm) and I probably had the core of it working in about 7 hours, but the problem is that there's stuff to do in there that isn't described by the algorithm. You really have to sit down and understand what's happening. It was horrible to debug, but afterwards, I felt like a debugging god. It's really one of those projects that elevates your level as a programmer.I'd definitely recommend this class to anyone who wants to become a solid programmer. If you're a major you have to take it but this class was wonderful.",
    "You have probably heard horror stories about this class. Wait! They're not true! Maybe you struggled through 223 like I did (I had Eisenstat though, so if you had Aspnes, I can't comment), have heard that 323 is even harder, and are thinking of dropping the CS major. Don't do that! If you, like me, enjoyed the programming aspect of 223 more than the algorithms (read: math) part, then 323 will seem more interesting. (If you're a math type, on the other hand, be prepared to buckle down and code.) I haven't done any rigorous comparisons, but it seemed to me that 323 was LESS WORK than [Eisenstat's]223. Sure, problem sets might average 20 hours each, but you only have about 6 of them and 2 are relatively short and easy. Do realize that this is a challenging class, but it's not the hardest ever. If you've never had an Eisenstat-written assignment before, you may have some adjusting to do, but you can do it. Bottom line: don't let what you have heard about this class (possibly from the other reviews here) scare you off from really getting into the major. Or scare you off from just taking this class if you're interested but not sure about the major. It's a GOOD CLASS -- you will learn a lot of cool stuff about how computers work, and implement a file compression utility (LZW) and a shell (like Bash). You won't know until you try. Take it! You will become a better programmer too. Eisenstat is a really good professor and he will help you a lot if you ask questions, as will your classmates. Don't let the class defeat you.",
    "DO IT. Way easier than 223, don't believe the hype. Not even in the top 3 hardest classes I've had here. Yeah, you'll have to spend time on the problem sets. But it's so worth it and you'll actually be competent at something at the end of it.",
    "Definitely take the course, but only if you're really serious about CS. The amount of time that you spend on assignments is just not worth it otherwise...",
    "You need it for the major in CS. Think twice before taking it for fun - it will chew up a lot of your time, and the material can be pretty dull if you don't have a specific interest in it. It's about as much work as 223 with Eisenstat is (more or less, depending on your strengths). (The assignments are harder in 323, but you're a better programmer than when you started 223.) If you do take it and are prepared to work hard, though, you WILL learn a ton and your programming skills will improve a lot. It's the kind of course you will always be glad you took once it's over (even though you might hate your life while it's happening). The course is a lot more manageable if you start the assignments long before they're due - not just two days in advance, and *definitely* not the night before. Eisenstat is also very reasonable about giving extensions if you ask in advance.",
    "Take this only if you like to code. We had 6 problem sets, and they take between 10 and 40 hours each to complete. But if you like coding, they are fun. Some of the harder psets are an LZW file compressor (think WinZIP) and the front and back end of a Bash shell in C.The course material is very different from the psets, covering computer architecture, concurrency, bit representation, etc. Mainly low level hardware\/software implementations that, as a software engineer, you probably won't have to worry about. This stuff was less interesting than I expected, but I'm still glad I took the course.Stan is a fantastic professor and he really cares about his students.",
    "Yes, take it! You have to if you're a major. But its fun and teaches you to program legit.",
    "I'd definitely recommend it if the student wants any in depth knowledge of computers. The problem sets had little or nothing to do with the lectures, which had its advantages and disadvantages. I think I learned more useful things from doing the programs, which were fairly difficult, than listening to lecture. You really have to love programming, and be willing to put in a lot of time into it, to enjoy taking this course; otherwise I think you'd feel miserable.",
    "The course was exactly as one would expect. It covers some basic topics in systems programming and computer architecture, which I found really boring most of the time, not because Professor Eisenstat is boring, but because I'm not excited by number representation and memory organization. I did enjoy the programming assignments, which were very challenging. Professor Eisenstat provides all the help you need if you just ask for it. Expect to spend 20-40 hours per C assignment, around 5-15 hours per scripting (your choice of Python\/Perl\/Ruby) assignment, unless you already know things about systems programming or the LZW compression algorithm.",
    "323 is a lot of work but you learn a ton about how to program and the inner workings of computers. The problem sets are pretty tough but extremely manageable if you start early and the exams are very fair if you study. Don't let the class' reputation scare you away. Eisenstat's an amazing professor so it's worth taking 323 just to take a class with him. Take it (then again, you probably have to).",
    "323 is a great class. It's a lot of work, but it's absolutely worth it. Eisenstat is a fantastic professor. Don't take it if you're going to half-ass it.",
    "An absolutely fantastic course. Lots of work -- expect to spend many nights working in the zoo, and NEVER think you can do an assignment the night it is due. However, you will learn magnitudes from this class.",
    "Well, if you're looking at it, you probably have to take it. It's pretty dang taxing but you learn a lot and will become a better programmer, trial by fire style.",
    "Awesome class. While 223 teaches you data structures and some basic understanding of algorithms, this class teaches you how a computer really works and gives you a basic understanding of operating systems and how to interact with them. It is definitely worth taking and while it is a fair amount of work, it is not nearly as bad as people make it out to be. The class gets pretty low level at times when talking about computer architecture, but the material is extremely interesting, and I really enjoyed going to class and learning about how computers actually work. Stan is an awesome professor, and is really helpful. Before 223 and 323, I didn't know even know what a terminal was - I literally had no understanding of computers and could barely program at all. After these two courses, I think I could realistically complete an internship in software engineering - that is how much I think I have learned in the past year under Stan. Definitely take it and don't be scared off by the workload - it is honestly not as bad as people say.",
    "I took 223-323 as a non CS major, let me compare and contrast the two. CS 223 was probably the most I got out of a single class at Yale -- I regretted not being a CS major afterwards. CS 323 instantly eliminated this regret. Eisenstat was just as fantastic, but the material and the assignments were way too low-level for me to find them interesting. You have to REALLY be interested in how computers work to enjoy coming to this class every day. The assignments were much less clearly specified, and you had to spend hours with his programs to figure out where to even start. This probably builds a lot of character, but i found it EXTREMELY tedious and unrewarding.",
    "Take this class. If you're looking it probably isn't a choice, but this class will make you smarter. It's not as difficult as you may be worried, just pay attention in class and give yourself enough time on the problem sets. Don't do them in one sitting.",
    "If you want to be a skilled programmer and you have the prerequisite experience (know C and common data structures and algorithms) this course will push you to the next level. If you don't know how to use UNIX coming in (like me) you will be in for quite a culture shock, but you'll learn it indirectly through the course. It is a very challenging course but if you pace yourself on the assignments instead of saving them until the last two days (like me) it shouldn't be that bad. Highly recommended for serious programmers.",
    "If there were a \"much, much greater than any other class you could ever take other than maybe Pchem which you wouldn't anyway because you're a CS major\" option under \"workload\" below, I would choose it. Easily spent 30-40 hours a week on problem sets (and that was about average in the class, it seems), and the assignments that were rough, were ROUGH. However, saying this, I've probably learned more about computers in this class than in any other, so I guess that says something...? If you don't need to take it, don't. If you're considering CS, and you didn't like 223, you're going to get a pretty similar style class. Of course, I took both with Eisenstat, so I don't know what it'd be like with a different professor (assuming it might change soon).",
    "This course is similar in difficulty to CS223. It is an overview of systems architecture and touches on various issues such as concurrency, how to make a shell, computer arithmetic and number representation, data storage and error detection, data compression, and virtual memory. As long as one stays on top of the assignments the class is easy and one learns a lot. There are also a few scripting assignments in Ruby\/Perl\/Python that serve as a nice introduction for those new to scripting languages. Overall it is worth every hour spent in class or workingon assignments because Eisenstat is a great professor. I definitely recommend this class to those sufficiently prepared (decent background in C).",
    "323 is a beast that all CS majors must slay. It is a fiery dragon, but Stan gives you the coding sword to bash it head-on. You will be able to do it if you work hella long hours, and you will be a better coder for taking it. Until Yale CS gets it act together and has a web development elective, this will be the most practical class you can take.4 rules of 323-club- Ask Stan for help.- Ask Stan for help.- Ask Stan for help.- Start LZW early.",
    "Definitely take it (provided that Professor Eisenstat teaches it). It is a great course for students who enjoy programming (and even those who don't; there's just so much interesting low-level CS topics in this course). Hands down the best class I've taken at Yale so far. One advice I would give to new students: don't be afraid to ask for extensions in moderation; if you're feeling overwhelmed and don't think you can finish a problem set, chances are you won't. Ask nicely for an extension, and thou shalt receive. Trust me, you don't want to end up regretting those late submission penalties!",
    "This course has a reputation of being one of the hardest at Yale. If you pay attention to lecture and start your P-Sets early, it's not at all hard. Indeed, you will end up learning more in this class than you thought possible.",
    "as much time as a FULL TIME JOB",
    "it's required if you want to major in cs. and be prepared for an insane amount of work, which is not always that interesting.",
    "323 is a fantastic course. It's a lot of work (problem sets took me about 20-25 hours, with the lzw problem set taking much more), but the material is really interesting, and Professor Eisenstat is wonderful. I thought it was more interesting than 223."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "323",
  "section": 1
 }
}