{
 "crn_code": "11675",
 "season": "201503",
 "legacy_coursetable_course_id": 34100,
 "enrollment": {
  "enrolled": 119,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC305",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    1,
    4,
    27,
    39,
    11
   ]
  },
  {
   "question_id": "YC306",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    1,
    10,
    37,
    24,
    10
   ]
  },
  {
   "question_id": "YC307",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    66,
    17
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC304",
   "question_text": "How would you summarize ECON 111 01 for a fellow student? Would you recommend ECON 111 01 to another student? Why or why not?",
   "comments": [
    "Would not recommend if you are knew to CS. Take CS50 and do fun things instead to solidify a love for CS before you get bogged down in the theoretical beginnings of it. It is the beginning of computing, from Turing Machines to LISP to the theoretical TC-201 language",
    "It's a class where most people do not go to lecture (because it seems to add nothing in terms of skill or knowledge) but spend around 10 hours a week doing the weekly problem set, which is sometimes boring and hard, but other times interesting and fun to work through. The midterms are generally representative of the material talked about in lecture.",
    "Fantastic course. Please take it! Material: The focus is most definitely on computer hardware and architecture-- not programming.The material is very interesting and changes how you think. The 8 problem sets are very manageable. I came in with zero cs knowledge and struggled through the first 3-4 (~15-20 hours each) but I learned so much from each one, and near the end, I felt very confident in my understanding of the material and could finish the problem sets in ~5-10 hours. Persistence is key: the concepts build on top of each other, so it's super important to really understand each problem set (and not just copy code from someone else). Professor: Slade is hilarious. His lectures aren't captivating, persay, (reads mostly off of lecture notes from previous years) but if you pay attention in class, you will have a much easier time and won't have to spend any time outside of class studying the material. He also will go over hints on doing the problem set after they are assigned. Go to class-- this will save you hours. Exams: Extremely fair exams (hence everyone does fairly well and little curving): 2 midterms, 1 final. Practice exams and solutions given out beforehand are extremely true to the real exams.",
    "CS 201 is a good introduction to computer science, though it only gave a cursory glance on some of the actual CS topics beyond coding, like computer architecture, etc. Some of my friends who took CS50 thought it more useful to take CS50, so they learn a widely used language.",
    "I would recommend it, though only if they have 8-10 hours a week to spend on hw and concepts. The learning curve isn't that steep which was appreciated.",
    "Only take this if you need it for the CS major, otherwise you'll be pulling your hair out.",
    "CPSC 201 is a good course for those interested in learning about the key concepts of computer science. If topics like recursion, logic, circuits, and computer architecture interest you, then you will have a great time in this course. If not, maybe look elsewhere. Professor Slade is not an exciting lecturer, but he does present the material very clearly. Also, he typically dedicates his Friday lectures to reviewing the week's problem set, which can be a big help. A note for non-CS majors: If you come in expecting a programming course (a la CPSC 112), you will be disappointed. Know that you are signing up to learn about the key concepts of computer science rather than taking a deep dive into programming techniques in a particular language. You will definitely learn some useful programming techniques along the way, but that is not the emphasis of CPSC 201.",
    "Problem sets are puzzles, not problems. Have fun!",
    "This class was a valuable learning experience, even if you've already programmed before. I've been coding for eight years, but I'd still strongly recommend anyone interested in CS to not skip this class altogether because of the exposure it gives to a theoretical approach to CS--something you probably won't get from self-teaching. Professor Slade was hilarious and literally became a meme by the end of the semester, but I felt he didn't really bring much to the course. While exams were fair, grading was nice, and he wasn't at all *bad*, I don't have many positive comments to make. He does emphasize Unix more than other professors of this class seem to have done, which is IMO a valuable tool to be familiar with.",
    "Take it only if you want to go further in CS or really, really want to learn Racket.",
    "A very good course, not too difficult and the psets are kind of fun if you understand the concepts. expect to put in an average of 8 hours per set. Exams are not too difficult.",
    "I would only recommend this course to students who intend to major in CS. I don't think that Racket is a very useful language outside of just learning about things like deep recursion, so I wouldn't recommend this course to anyone who is looking to gain technical skills that can be utilized in an internship or job.",
    "I think it's the best intro to computer science for majors at Yale. It definitely has a lot of great moments. I wouldn't say it's the best class for a fun one off class in CS, it feels like we need a lot more stuff to be able to do anything useful with this subject.",
    "I would recommend this class to anyone with an interest in computer science. However, it would probably be pretty hard if you don't have that strong of a CS background.",
    "Take it! It's a great class, that can be a lot of work, but is fun to do. The TAs are really great resources.",
    "It's a pretty average course, with the exception of Racket. Recursion, to me, is more of a unit-long topic rather than a semester long topic. Using Racket is a little frustrating and at times, especially late in the semester, really pointless. Professor Slade is reasonable and a decent professor.",
    "A great intro class for computer science; the lectures are generally a bore but the p-sets are well structured and fun to complete",
    "201 was great! really emphasizes computer **science** and not programming. Also, I entered rather apprehensive about the workload (especially because I hadn't really programmed much before) but the problem sets aren't too bad (and I never went to the TA sessions, so it probably would have been even quicker with their help). Tests were fair absolutely no surprises as questions are slight variations of the practice exams given out, which is something I really appreciated in general: Professor Slade (all hail) never played tricks and I knew what was expected and where to find information.",
    "As long as you have some programming experience, you will be fine. If you have only done object-oriented programming, be prepared to change your mindset. Racket will challenge you, but not to the point where you will break.",
    "Intro to computer science for those with some knowledge",
    "The material is really interesting and Slade is a real character, but frankly I didn't pay much attention during class. It's pretty easy to do well just reading the lectures. The stuff we learn is cool, Slade just isn't a particularly inspiring lecturer and tends to read off the screen more than anything else. Would still recommend, as the material is important and will make you a better programmer.",
    "I would, but only if you are prepared to teach yourself or if slade is not teaching it. I loved the class and learned a ton, but that was because the problem sets forced me to teach myself.",
    "I would definitely reccommend this class to another student. It takes you through different models of computation, essentially building a computer from the ground up. It gave me a better understanding of computer science.",
    "Definitely take this course if you already have a background in computer programming and would like to delve into some theoretical aspects of computer science. Perhaps the most sensible CS course to choose for a freshman in his\/her fall semester.",
    "Intellectually class was interesting as well organized, though lectures were slow. Homeworks felt they forced me to learn stuff.",
    "This is a great class to take if you want to learn some computer science. It will not help you become a more effective programmer, probably, and you should have some computer knowledge beforehand. It will make you think in terms of things like recursion, which is very conceptually important.",
    "I highly recommend this course for someone interested in the computer science major. The sooner you take it, the better, because it is a great introductory course that got me very excited to continue onto a degree. Thanks for a great semester!",
    "CS 201 gives a broad overview of computer science. The problem sets were reasonably challenging. Using Racket instead of a more conventional intro language was frustrating at first. The lectures for the first few weeks were rather dry as they covered Racket syntax and conventions. Lectures later in the year felt compressed and we could have covered the units on dynamic programming in more depth. The pacing for the lectures was usually off, as we started class with a logical problem that could take anywhere between 5 and 20 minutes. Professor Slade's dry sense of humor was a major reason for my attendance at lectures; otherwise I could have managed with the published class notes. The peer tutors offered hours throughout the week, which gave plenty of one-on-one time. The materials distributed for exam review were sparse, only one practice exam per test.",
    "Definitely an interesting course. Racket is very strange at first, but it does change the way you think about programming. I would recommend taking it",
    "CS201 has interesting problem sets that introduce you to many different theories in computer science. If that's what you're interested in, you should take it. After all, you're probably taking this class because it's a requirement.",
    "I would recommend CS 201 as a beginning CS class. It teaches you important concepts that every programmer should know.",
    "CPSC 201 is a more than fair class. Most of the learning is done through problem sets, but showing up to class can be helpful. The average score on problem sets will be very high, and the scores on exams a little lower, but Professor Slade is more than understanding, and while some parts of the class can be tedious and others will feel too fast, the overall pacing is strong, and it's a good intro class to take. Expect the time commitment to be 10-12 hours a week, but this is a consistent commitment, rather than one that can be shirked some weeks and made up the next.",
    "I think 201 is a great computer science course for someone who has a fair bit of programming experience but maybe not as much real computer science experience. Professor Slade occasionally goes on some interesting tangents and makes some funny jokes in lecture, but for the most part he just reads from lecture notes which he distributes online. This means that if you miss a class or have to work on something else in class it's really not a big deal; that said it's definitely best to go to class. The psets aren't hard if you like\/are decent at programming, although Racket is weird at first. The exams are fairly easy if you study because Professor Slade gives sample exams which are VERY similar to the exams themselves.",
    "I'd recommend the class - a really good intro to basic concepts in computer science and to recursion, even if you'll never use racket.",
    "If you are interested in learning how a computer fundamentally works, this is a good course. The homework is interesting and not too long (you'll actually learn a lot from the homework rather than from lecture). However, these definitely are not skills that would be practical for a job. It is an introduction to computer science as a science. I do recommend it to anyone looking to understand computer science more deeply.",
    "You're going to learn CS. It's going to be hard. You are going to complain. You are going to have a lot of long nights, but you will be well versed.",
    "Take this class if you're thinking about CS as a major. It isn't easy, but it also isn't exceptionally difficult. The class is great for people who want to improve in the following: Recursion Machine\/assembly language Turing Machines Data structures DFAs (deterministic finite acceptors) and languages\/grammars",
    "It seems like a significant fraction of this class (myself not included) is already familiar with the course materials. The midterm scores were skewed (avg\/median around 50, stdev around 10, out of a grand total of 60... really?) and I'm not sure how the grading actually works for this class. I guess if you need it as a prereq of the CS major, take it... but if you already know this stuff and have programming experience, just take CPSC 223 and let those of us who don't really know much about CS take this class in peace.",
    "CPSC 201, Intro to Computer Science, was a poorly taught class that was saved only by the decent curriculum backing it. Racket is an annoying programming language, but as Professor Matthew Might from the University of Utah puts it, To be blunt, if these students have a fundamental mental barrier to accepting an alien syntactic regime even temporarily, they lack the mental dexterity to survive a career in computer science. The content of the course is a survey of some fundamental computer science concepts that could be seen as outdated and potentially useless but are nonetheless cool, like Turing machines, basic circuits, and assembly language. It might not be very practical knowledge, but its satisfying to understand the roots of the field. The problem sets were not very difficult, but they were often frustrating for the wrong reasons. For the first few problem sets, youre asked to write simple functions in Racket that already exist in the standard library, but it was unclear which parts of the library we were actually allowed to use. The last couple of problem sets then ask you to write some answers in comments, and again the questions were vaguely worded. A healthy dose of pedantry was sorely lacking in this course. On top of that, it was unclear if anyone actually looked at our open-ended responses carefully or at all. This was Professor Slades first semester back at Yale, and his lack of preparation was obvious. Sometimes he wasted an entire lecture going over the questions in a problem set, and even when he did teach it was basically pointless. All of the notes were online, so few people bothered showing up to class after the first few weeks. The midterms and the final were not trivial, and you need to study everything since the topics are probably new to everyone. If you do though, its not that hard to get an A.",
    "Studying recursion with a lot of practice in a functional language. General coverage of computer science topics.",
    "This class was awesome. I learned a ton of really interesting and useful stuff, from better programming (especially recursion) to interesting computer science topics that I hadn't known before (like machine language and Turing machines, two of my favorites). Although the lectures could be a bit boring, they were still important for the tests, and the concepts covered continued in the problem sets. I think I learned most from doing the problem sets, which were challenging but rewarding, and not overwhelming. The peer tutors are a great resource.",
    "Yes, a must take if you want to find out if you are suitable to be a CompSci major.",
    "I would recommend this class to anybody who wants to begin the road of learning computer science and who has not had any previous, extensive experience with programming in a functional language. It greatly familiarized me with recursion, which was a challenging topic for me before. I think some of the concepts like Turing machines and assembly are also interesting things to think about and are worth learning and playing around with as well. I am not sure if this is the best intro class to someone who wants to explore computer science for the first time, but it is a great introduction to someone who knows they want to pursue computer science to some degree and wants something beyond an introductory class.",
    "Absolutely would recommend, but Professor Slade is the guy to take it with. He's funny and earnest, and obviously incredibly knowledgable about the subject-- definitely ask him questions about VOTE, which he did tremendous work on. The class covers some more conceptual parts of computer science-- while the psets are all programming, they do cover concepts of machine architecture, languages, and circuits. As always, some TAs are better than others, but when you find the right ones office hours can be incredibly helpful and rewarding.",
    "Basically a teach it to yourself course but the psets are nicely set up to allow that.",
    "CPSC 201 is a tough, work intensive class, especially if cpsc does not come easily or naturally to you. It is definitely doable though and very rewarding. Extremely rewarding.",
    "I would recommend this class just because you learn so much about computer science if you're new, but I think it's quite difficult. You spend about a week to a week and a half on a topic and is assigned a problem set. I spend at least 10 hours a week on my problem sets--and that's on a good one. Be prepared to put in a lot of work and learn a lot. How this class goes is heavily dependent on the teacher as well.",
    "Illustrative and entertaining homework problems. Good course notes. I used around 7-12 hours a week. Compared to CS50, this lays out good foundations to conceptually understand Assembly language and theory, while CS50 throws you into the water with practical programming. CS50 might overlap more with CS223 than CS201; you might ask about that from a CS50 tutor."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "201",
  "section": 1
 }
}