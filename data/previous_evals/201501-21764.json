{
 "crn_code": "21764",
 "season": "201501",
 "legacy_coursetable_course_id": 31576,
 "enrollment": {
  "enrolled": 34,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC305",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    0,
    1,
    11,
    19
   ]
  },
  {
   "question_id": "YC306",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    1,
    2,
    5,
    12,
    11
   ]
  },
  {
   "question_id": "YC307",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    27,
    3
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC304",
   "question_text": "How would you summarize ECON 111 01 for a fellow student? Would you recommend ECON 111 01 to another student? Why or why not?",
   "comments": [
    "Very poor. Not enough information given during assignments, leading to very stressful condition. Professor emphasized that he wanted students to \"explore\", which I agree is important. However, when Yale already requires students to take 36 credits (as opposed to 32 like at Harvard), and I also have to take other classes, and want to do things outside of class, the assignments become overkill. Easily 50+ hours spent on 6th assignment of course. Give more documentation and detail on assignments, instead of having files where we have to decipher what's going on. The Piazza had millions of questions on each assignment because there wasn't enough information given.",
    "Lectures were mediocre, oftentimes unclear and big concepts were breezed over. Assignments were poorly specified and were oftentimes not meaningful applications of concepts learned in class, but trivial and tedious.",
    "100% recommend. You must take this class at some point if you're a CS major.",
    "This class will walk you through building a real compiler for a not-quite-real-world language. If that sounds cool to you, you should definitely take the class. It's about on par with 323 in workload, although the assignments are not nearly so neatly designed as in that class, which can be frustrating at times.",
    "! The course covered all the chunks needed to produce a working compiler, in addition to more advanced topics in compiler implementationgarbage collection, object-oriented language design, etc. I don't know if you realize this but I'll spell out the most important thing about this class: By learning compilers, you learn how programming languages work. These two topics are fundamentally tied together. I have to say, the workload is distributed across the semester *very* unevenly. The first four PSETs might convince you that this course is pretty easy. And then you'll get the typechecker assignment and rethink. And then the compiler back-end assignment, which will probably take 2040 hours to complete. Do yourself the favor of actually attending lecture. Now what did I think about the course? Well I certainly know how compilers work and I think I understand the essentials pretty well. After all, the PSETs are all just implementations of the various chunks you need to get a working compiler, moving from front- to back-end. I think the lectures were somewhat dry. Professor Shao has a good sense of humor, but he has this magical way of managing to not actually answer any questions that students ask him. I did RegAlloc for the back-end assignment (i.e., assignment 6). It wasn't bad. Those who worked on ITreeGen and CodeGen, on the other hand, seemed to have it quite rough. As in the assignment was very underspecified and much of the time they spent working on it involved failing to get concrete guidance from the TA or the professor and bashing their heads against a wall. The frustration induced by assignment 6 was probably the worst part of the course. Make sure, as always, to start early, seek help when you need it, etc.",
    "421 is so important that I think the CS department should consider requiring it for the major. The second half was twice as much work as 323 though for me. I think your performance in this class is more indicative of your potential as a developer than 323 because you have to figure out how to pull together many different modules of a large project, some of which you did not write. This is much harder than writing something from scratch, in which case you know what every piece of code does and you don't need to coordinate with other people.",
    "It's one of the harder CS classes, but overall a good class.",
    "Compilers is one of those courses you probably should take as a CS major, but it's not particularly inspiring. Shao is a good lecturer but talks about a fairly dry topic (compilers). You'll \"write\" a compiler over the semester, but that really means you'll spend countless hours trying to understand undocumented skeleton code modules THAT DIFFER FROM THE SAME MODULES AS DESCRIBED IN THE TEXTBOOK. There are a couple of interesting algorithms throughout the course (NFA-DFA, parsing algorithms, etc), but they're so complicated that there is established software that implements them- you just get to write specs for that software. The end result - the \"compiler\"- is a pretty crumby product, even after a lot of work. That being said, saying \"I wrote a compiler\" is pretty cool, and as long as there aren't follow-up questions, you're good. Overall, this class is similar to how I imagine running a marathon to be- not particularly fun, and a lot of work. But people still do it and are happy they did.",
    "Really interesting and well taught. One of the highlights of Yale CS",
    "Compilers starts off light on work and then gets crazy at the end. You learn pretty much everything about a compiler though. One exam wasn't too bad but demanded a lot of knowledge. Do the extra credit at the beginning because they're usually easy.",
    "Yes. It is a lot of work (probably more than 323) but it is very cool and rewarding. The class can be very frustrating at times, mainly because you are coding in ML and making a compiler for Tiger, so you essentially have to learn two new languages that both have a lot of annoying features. However, it's a great reintroduction to functional programming, and you learn a lot of interesting theory and algorithms. Also, understanding compilers seems key to being a good programmer. as1-4 are not bad (~10 hours), but as5 takes forever (40-50 for me) and as6 can take a long time (RegAlloc is the easiest). as7 was a little annoying just because it seemed silly, but it was definitely easier.",
    "This is a tough course, but rewarding. The first half, before spring break, involves weekly 10 hour psets. After the spring break though, as6 takes about 50 hours (in two weeks), then there's the exam and as7 which takes about 12. It's a lot in a short amount of time. If you liked 223\/323 then you'll like this course -- on average it's the same amount of work, but it's distributed pretty unevenly.",
    "Quentin was pretty helpful",
    "If you are a CS major, it is a must take.",
    "This is one of the good Yale CS electives. Prof. Shao is great. You get to use ML, a functional programming language (if you've heard of ocaml its basically the same thing), which is a really great experience. The last few assignments can take a lot of time- be organized!",
    "This is a great class and you'll come out of it with a huge amount of knowledge -- just be ready for a LOT of work in the second half of the semester (some of the psets are definitely comparable to 323 psets).",
    "The best CS course I've taken at Yale. A bunch of work (especially in the second half of the class); the first half is not too bad. You learn a ton about how compilers work and the underlying architecture which drives all of the processes. As a result, I have a much better understanding of how to write code that will run faster, how to optimize such code, and how the code directly runs on the hardware. This knowledge is really useful; combined with OS you can learn about each step in how a program executes. The assignments task you with building your own compiler, which is a challenge but ultimately very rewarding, as you get to build some non-trivial programs in the language. I highly recommend this class and you will get a lot out of it.",
    "Fantastic CS elective. By far the best elective for understanding programming languages from the ground up, because building a compiler is really about understanding how a programming language is implemented. The workload is relatively high, and it's fairly backloaded which can be rough at the end of the semester, but I found all the psets immensely rewarding. ML is frustrating at first, but then pretty cool once you get the hang of its quirks and idioms. Professor Shao is responsive to questions and sensitive to student stress and concerns. If you want to vastly increase your understanding of how programming languages work, take this class."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "421",
  "section": 1
 }
}