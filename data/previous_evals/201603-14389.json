{
 "crn_code": "14389",
 "season": "201603",
 "legacy_coursetable_course_id": 39124,
 "enrollment": {
  "enrolled": 30,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    1,
    3,
    10,
    3,
    0
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    3,
    6,
    5,
    2,
    1
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    2,
    6,
    7,
    2,
    0
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    1,
    5,
    7,
    4,
    0
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    1,
    6,
    8,
    1,
    1
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    8,
    8,
    0,
    1
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "Working\/relatively proficient knowledge in SuperCollider. A deeper understanding of the history and methodology of computer music. More appreciation for electronic music and its pioneers.",
    "I'm not entirely sure. We went through a few algorithmic composition techniques but I feel like we didn't go through them in enough detail to use it in our own implementation.",
    "I learned how to use different probabilistic systems to algorithmically generate sound\/music. It was cool to see how programming can apply to music and other forms of art.",
    "You learn the language SuperCollider, which isn't that useful. He talks a little about automata, markov chains, and L-systems, but in such little detail that you'll feel like you didn't learn anything. A lot of it is putting your musical ideas into code, not learning technical CS skills.",
    "I didn't learn anywhere near as much as I was hoping or expected in this course. Honestly, I vaguely learned q new coding language.",
    "Team work, open ended projects (planning and execution, new programming language, introduction to the building blocks of programmatic music composition."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "The course gave students a lot of freedom to explore whatever types of projects they wanted. We had access to a lot of example code and resources to guide us. The course could be improved with a clearer sense of direction in week to week lectures. A lot of the material presented, although interesting, was not very clearly linked to the topic at hand (eg an entire I-ching lecture to demonstrate chance processes).",
    "Strengths: you get to create interesting compositions using diverse techniques and you have an huge amount of freedom to approach projects in creative and interesting ways that get you excited. Weaknesses: there was little organization throughout and a lot of material just kinda went past most people.",
    "Strengths: The course content is inherently cooll. Scott is an awesome instructor (approachable, helpful, engaging etc.) Group projects were fun to do Weaknesses: Material appears to lack organization or purpose of how it integrates to the class as a whole (e.g. We didn't know why we were learning things we were learning and how they can be used) Class would benefit from TA\/ULA\/grader",
    "The students in the class had varied levels of experience with music, which made it difficult (impossible?) for Scott to teach at a pace that suited everyone's needs. Scott solved this by making most of the work in the second half of the semester group projects. Each group had music experts as well as novices, and we were supposed to learn from each other. Unfortunately I felt the students with music experience took over those parts of the project and the rest of us didn't learn much about music. Maybe in the future the class can spend more time covering musical concepts. I also think SuperCollider has potential to give students a better understanding of functional and object-oriented programming. The class voted not to be tested on the language, probably because projects are more fun and most of us won't be using SuperCollider after this class, but I think if we had been quizzed on the language and the concepts of functional programming and OOP that we learned in lecture, we would have better understood them when we used them in our assignments. Yale doesn't teach OOP in the CS core, and this course has the potential to do that.",
    "This class needs a TA.",
    "The course felt unorganized most of the time, and we didn't learn the CS content in enough detail. For example, if markov chains were taught in more detail, it could be useful, but it felt like we were just barely learning them well enough to use them in extremely simple cases.",
    "Strengths: fun to create music, a lot of creativity involved, many possibilities of what you can work on, independent Weaknesses: not taught very well, no structure, too many group projects",
    "Some weaknesses of the course are: - The programming language, SuperCollider, is one of the worst programming languages ever invented. Its many flaws include: not reporting line numbers when a runtime error occurs in addition to non-helpful error messages, next-to-none typing system, =\/= is an operator, + automatically adds spaces to strings, not being able to declare your own classes, lack of up-to-date documentation, and more. Students should be given the option to do programming assignments in another language, like Python. - Peer evaluation completely backfired when it was deployed for one of the homework assignments. It was needlessly time consuming and students were stressed out about its potential impact on their grade. - Course material was confusingly laid out, the lectures were neither focused nor a survey. That being said, the course has a lot of potential to be interesting, as the field of computer music \/ sound encompasses a multitude of possibilities.",
    "Pros: Professor (Scott) is knowledgeable and committed: After class, he gladly advises on anything from basic music theories (Western classical and algorithmic new stuff) to technical sound synthesis (sine waves). His voice is super smooth. The projects were open ended team works, which was frustrating but educative. The material can give a new mathematical\/programmatic framework for music. ------------------------------------------ Cons: Scott taught this for the first time and assumed absolutely no background in anything (music or programming). So the teaching didn't go far in anything. (Especially for programming, we went through the (known) basics of automata on an extremely slow and abstract level.) The homework was initially nonexistent (literally none for three weeks), then turned into open ended composition tasks, which were very tedious, especially with the lack of direction and the painful, painful programming language, Supercollider. The course has high potential. If you can push him with questions, he can offer both basics and advanced perspectives on music. For the lecture teaching, Scott might need some more time to adjust."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "I went into this class thinking the material would be really interesting, given that I'm a computer science major with a bit of musical experience from having played a few different instruments before. Unfortunately, I was really disappointed by the execution of this course. The material was very simple and didn't take much time, but I don't think I learned much at all in terms of either computer science or music. The professor was more a music professor than a computer science one, but he didn't take much time to teach music theory concepts either since this is technically a \"computer science\" course. The \"computer science\" part consisted mostly of basic programming concepts with the occasional \"algorithm\" thrown in, but you use Supercollider to code in, and it's the most painful language to use syntactically if you've ever programmed before. Overall, if you're looking for an easy class with not much knowledge gain, this class would be great, but otherwise, skip at all costs if it's taught in the same way again.",
    "Take the course if you are a musician interesting in electronic\/computer music. Do not take it if you are a computer science major trying to code music. SuperCollider (the musical programming language) is the worst thing you will ever come across as a coder, and will drive any CS major crazy with frustration. As both a musician and cs major, I often found the musician inside of me interested and engaged and the coder inside frustrated and sad.",
    "I'd recommend this class to anyone interested in the intersection of music and programming. This was the first time the course was taught which is always an experimental experience, so I think that the next time this course is taught Scott will be even more on top of things and have perfected some things so that it will be even more valuable.",
    "I would recommend this course if you're interested in both music and CS. Scott is pretty cool. The approach he takes with this course is pretty different from other CS electives. We had a few very short psets and a few group projects.",
    "Computer Music is an interesting CS elective with a relatively light workload. We spent little time on music concepts, and spent most of the course covering different probabilistic systems and data structures. The main point of this course is to learn how to use algorithms to create controlled randomness. Though we were using this randomness to generate sound, the concepts are easily transferrable to other fields. The language used for this course is a functional and object oriented programming language, so you also get to practice that. Most of the work we did was in groups, so take this class if you like working with other people.",
    "I really wanted to love this course because the material is so fascinating but the execution was frankly terrible so be warned. To be fair it was Scott's first time teaching the class so maybe in future iterations these problems will be fixed. The first issue begins with the fact that there is no real pre-req for the class. This is because Scott wants the class to be accessible to school of music kids with no CS experience as well as CS kids with no music experience, which is a great idea at first but really limits how much each set can get out of the class. The first two weeks Scott attempts to teach how to program in Supercollider which to the CS people is incredibly boring (many of whom have already taken 223 for instance) and for the non-CS people isn't nearly comprehensive enough to make any sense. Then when it's time for projects the non music kids have no idea how to organize their work to make anything that sounds decent. I guess the point is to encourage collaboration but it's hard enough learning theory OR programming let alone having to try to learn it from another student who doesn't know how to teach, is under time pressure to finish the assignment, and\/or has a different level of commitment to the project quality than you do. Each week Scott lectures on different computational tools that can be used in composition. His lectures are typically either not focused at all so you can't really tell what he's trying to say or hyper focused (let's program a Markov chain, or This is how you update Supercollider) and boring. I think lecture could have really been improved by instead looking at examples of how these systems are used in different computer music works and critiquing those works and their applications.",
    "If you want to make algorithmic computer music, this is the class for you. If you don't, don't take it because that's what you do.",
    "I would recommend this course only if you are very interested in music, since it is cool to hear what your algorithm produces. But you will not learning anything useful in CS, and definitely do not take it if you are not interested in music.",
    "I would recommend this class only to those who have a good amount of Cs experience and an interest in the arts.",
    "Take it when it is a more polished, well organized course.",
    "The problem with this course is that there's a pervasive \"anything goes\" mentality - and it permeates everything, from the content of the lectures to the requirements of the projects and the actual grading. We would show up to lecture and the first ten minutes would be chit-chat between the instructor and some of the students. Eventually, and often with a tone of \"here goes nothing,\" Scott would launch into a .ppt or more often a .doc of lecture notes. Sometimes lectures were really good and interesting, but most of the time they jumped around a lot, relied heavily on youtube videos of questionable relevance, and ended way early. SuperCollider is the worst programming language\/framework I've yet used and as a result most of the code that got written in the class was as janky as code gets. The criteria for several of the projects were really open-ended which was sometimes nice and sometimes torture. Grading was a total black box. The class had no TA so Scott was totally overloaded the entire semester, I think the course would have been much better if it wasn't a one-man show. Ohh man I don't know. I could go on for so long about the various issues with the course. It has potential and I think in two years, with a more solidified curriculum and two TA's, it could be a good time. A tragic experience.",
    "Pros: Professor (Scott) is knowledgeable and committed: After class, he gladly advises on anything from basic music theories (Western classical and algorithmic new stuff) to technical sound synthesis (sine waves). His voice is super smooth. The projects were open ended team works, which was frustrating but educative. The material can give a new mathematical\/programmatic framework for music. ------------------------------------------ Cons: Scott taught this for the first time and assumed absolutely no background in anything (music or programming). So the teaching didn't go far in anything. (Especially for programming, we went through the (known) basics of automata on an extremely slow and abstract level.) The homework was initially nonexistent (literally none for three weeks), then turned into open ended composition tasks, which were very tedious, especially with the lack of direction and the painful, painful programming language, Supercollider. The course has high potential. If you can push him with questions, he can offer both basics and advanced perspectives on music. For the lecture teaching, Scott might need some more time to adjust.",
    "Yes. Many useful concepts regarding music and programming."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "431",
  "section": 1
 }
}