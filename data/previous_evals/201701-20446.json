{
 "crn_code": "20446",
 "season": "201701",
 "legacy_coursetable_course_id": 41456,
 "enrollment": {
  "enrolled": 132,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    1,
    11,
    23,
    31,
    27
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    7,
    18,
    33,
    28,
    9
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    5,
    25,
    28,
    27,
    10
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    13,
    20,
    25,
    30,
    7
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    4,
    28,
    45,
    18
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    1,
    15,
    49,
    29
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "In-depth knowledge of C (manual memory allocation, concept of stack vs. heap memory, & debugging memory leaks), a solid understanding of data structures such as stacks, queues, various types of trees (focus on binary search trees), heaps, graphs (standard search algorithms, detection of directedness & connectedness), a bit of dynamic programming, how to process and check command line arguments for errors, applications of data structures to various tasks",
    "I learned a great deal about the C programming language, using UNIX, and data structures in this course. I can confidently code algorithms in C, manage memory, bugtest and bugfix programs, and manipulate data structures from hash tables to heaps. I now feel much more competent in my abilities in all of these areas, though there is still a ways to go, and well-prepared for higher level CS courses that will explore these skills further.",
    "My knowledge in this class exponentially grew from what I had already known in CS201 and CS50. Professor Slade introduced to me material that I thoroughly enjoyed, and working through the psets helped me overall understand computer science concepts that I know will be applicable wherever that may be in industry or in future classes.",
    "I learned data structures and skills in C programming.",
    "Learning C programming is essentially useless. This was demonstrated throughout the course, as the professor often provided examples of programs we were assigned written in other languages, including C++, Python, JavaScript, etc.",
    "Basically nothing about actual data structures because those were already implemented for us. It makes no sense, but that's how it is.",
    "The inner workings of arrays, strings in C, hash tables, binary trees, stacks and queues, and heaps. Some concepts related to balanced binary trees, graphs, and the C language itself.",
    "This class gave me a great understanding of C and how data structures are implemented at a system level",
    "I learned how to program skillfully and stylishly in C. I learned about important computer science concepts like memory allocation (and time complexity, to some extent). I learned a wide array (haha) of useful data structures, how to employ them, and the ways in which they are similar and different.",
    "Honestly, I learned data structures and programming techniques.",
    "Overall good overview of data structures and how to implement them. Also this class really pushes you to understand C, especially when it comes to memory management.",
    "This class taught me the theory behind data structures as well as gave us practice implementing them in program. I also learned how to use a text editor as well as navigate around a Unix system.",
    "I learned how to code in C well and about various data structures I didn't know of before. I also learned a little bit more about UNIX and compiling and running a program using it.",
    "I learned about some data structures: arrays, linked lists, heaps, trees, stacks, queues. I also learned about some algorithms and malloc'ing in C.",
    "I learned a lot about Linux, programming in C, linked lists, hash tables, and algorithms in general.",
    "Learn the language C as well as some basic data structures.",
    "There was a wealth of essential computer science related topics that I was able to learn by taking 223: linked lists, queues, stacks, hash tables, heaps, dynamic programming, just to name a few. Above all, taking 223 and completing the homework assignments forced me to become a better programmer. I was able to hone my debugging skills and understanding of key computer science ideas and theories.",
    "Learned about data structures and implemented them. Learned C",
    "How to code in C and UNIX. Different data structures like stack, queue, linked list, hash table.",
    "Through the PSETs, I learnt how to write programs from scratch, mastered pointers and learnt how to debug my program independently. I learnt how to approach problems: by understanding all the parts, building each part and testing them to see if they work.",
    "I learned how to code in C. I also learned how to really plan out the structure of my programs. I learned how various data structures work and how I can actually code them and implement them in solving problems.",
    "I got a lot of experience coding which was really fun and useful",
    "You learn about all sorts of data structures, though not many algorithms. We went through heaps, stacks, all kinds of trees, queues, etc.",
    "I learned a lot about memory allocation issues and data structures. I feel as though I gained greater insight into the field of Computer Science as a whole.",
    "Programming in C.",
    "In depth C programming skills and different data structures.",
    "A lot of experience programming in a low level language like C. A lot of good experience battling pointers as well",
    "I learned a lot about computer programming in this course and how to use various data structures. I also learned C programming, which I hadn't done before, which allowed me to learn more about how computers work.",
    "Data structures",
    "I learned the basics of data structures along with a capacity to problem solve.",
    "Learned about the basic data structures and algorithms that form the backbone of computer science.",
    "In this course I learnt all the most commonly used data structures (for example: stacks, queues, heaps, graphs...) and new algorithms. I learnt how to debug my code efficiently, (to use valgrind for fixing memory leak errors for example). I also acquired a deeper understanding of the strengths and weaknesses of a programming language like C.",
    "Knowledge - data structures - C language - applications of some data structures e.g. Graph in Facebook Skills - How to tackle psets - Testing edge cases and debugging code - Writing code on a computer and on paper",
    "I learned C, many new data structures, and how to handle large programming psets.",
    "I learned to build on a new way of coding thinking, developed a deeper understanding for data structures, an extreme appreciation for memory allocation, and how to write efficient code.",
    "I learned how to code in C and how to use data structures and implement them.",
    "I feel extremely comfortable with the concept and implementation of the data structures covered by this course. I also feel confident that should I be asked in, say, an interview setting a question to do with computer science, I could come to an answer with more of an ease than I would have been able to at the beginning of the semester",
    "Advanced coding skills, understanding of standard data structures",
    "A better understanding of different types of data structures and how to implement them",
    "Learned how to program in C and learned several important data structures.",
    "Mostly, I developed my ability to find so called \"memory leaks\" in my C code. The actual algorithms were relatively straightforward to implement otherwise.",
    "I definitely learned a lot about data structures from this class. I also eventually learned to use valgrind and gdb, and a little bit on vim.",
    "You learn about the basics of data structures, which is crucial in the study of computer science.",
    "Great course. Teaches you a lot about how to program in C, as well as the fundamentals on data structures.",
    "I gained familiarity with C, and therefore with pointers and memory allocation. I also got better at using valgrind to debug. I gained a better understanding of balancing trees, though for the most part you could get by without understanding the data structures.",
    "I gained immense coding experience by taking this class, and I especially became more comfortable with constructing large C programs, knowing when and where to begin debugging, most efficient ways to execute an algorithm, etc.",
    "I learned C (and the memory management that entails), and basic programming techniques that have made me into a better programmer.",
    "Taking this course, I have learned of and implemented many structures that are useful for algorithms. I have also gained a good understanding of fundamental programming.",
    "Better facility with C, especially memory management. Comfort with advanced data structures like heaps and b-trees. Also makefiles and practice testing\/debugging",
    "Homeworks were a good medium to learn the various data structures",
    "Learnt about different data structures and how different programming techniques can help improve program performance. Also, learnt a lot about C programming in C, which is a helpful tool in general.",
    "This was a very comprehensive and material-heavy course that taught me both the fundamentals of the programming language C, as well as a plethora of data structures. I learned how to handle command line arguments, write programs in C, learned hash tables, stacks\/queues, trees, graphs, and more.",
    "I learned about C and pointers",
    "Programming in C and an in-depth knowledge of data structures",
    "I learned the C language chiefly. This is the language in which the course is taught and is a language which, with the exception of CS50, is not introduced in the Yale CS curriculum until this course. Through C I also learned the workings of new data structures (as the course title would indicate).",
    "This course was the first time I programmed in C, so I was able to develop that skill. I also learned of different types of data structures and their implementation in C, along with different algorithms."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "Strengths: the problem sets were enjoyable and challenging, the TAs were extremely patient and helpful and would respond to coding-related questions quickly, exams were very fair and similar to lecture notes (big difference coming from the exams from CS201 with Rushmeier), the extremely generous and forgiving resubmission policy. The main strengths were definitely the problem sets and the great TAs. They were both wonderful and taught me so much about data structures & their numerous applications. Grading is also very fair. Weaknesses: you will never get a straight answer to a logistical question. Even a really simple one such as \"it is unclear to me whether this topic is valid material for the exam. is it?\" will not be met with a yes or no answer but rather something that confuses you even more. Sometimes it's also unclear what you need to submit for each pset. answers to these simple questions either take forever to be posted\/given or fuel even more confusion. Not sure why this is, but it is a pretty small thing that detracts from an otherwise solid course. We also never really learnt anything about Makefiles -- it may have been nice to have had a mini crash-course about them as opposed to just taking the staff Makefile for granted for each hw submission.",
    "Especially for a student fresh out of CPSC 201 with little other programming experience, I think that this course can be fairly brutal at the start. The only guidance given is a well-written but highly-technical textbook. The course almost immediately assumes a working knowledge of C along with a comfortability with using UNIX (the latter of which was the biggest issue for me) and very quickly began discussing data structures and their uses rather than elaborating on the basics of the language and operating system. Especially since the only prerequisite is 201, I think that the introductory phase could be made a bit more user-friendly. On the other hand, I feel as if help was always at my fingertips if I sought it out. From a highly active Piazza community which I personally became very interactive with to regular office hours which I know helped many of my friends through their problem sets, the resources were set up such that students who wanted to take initiative and learn the material were able to.",
    "Wouldn't do anything to change the format of the class- it's a traditional CS class, where it is very Pset heavy, and the exams test you on the implementation of your code.",
    "I learned a lot, but too much of my learning was at office hours.",
    "If Yale is serious about investing finances and resources into STEM, it is essential that professors who actually understand their course material be brought in. Professor Stephen Slade is not one such person. Further, in regards to the class's chosen programming language, C is not nearly as important as Python or Java. If Yale wants to avoid losing students to competing universities, then the administration needs to start taking STEM more seriously by offering courses in the most frequently used programming languages.",
    "Strengths: none Weaknesses: It literally teaches you nothing. I wish I were kidding. Just look at comparable data structures courses taught at other universities (MIT, UC Berkeley, Stanford, etc.) and they are all rigorous and focused on mastering the data structures, not debugging code. I'm extremely disappointed with this class and feel like I could have learned everything by reading a 50 page book. The psets involve 20% analytical thinking and 80% trying to guess how it will be graded, because private test cases are almost always bad user input that has absolutely nothing to do with the purpose of the course: learning data structures. Oh, also you don't receive any feedback whatsoever on your assignments. You get back a grade report indicating which test cases you passed. So what about learning how to write efficient, beautiful code? Nope! Did you implement a terribly inefficient algorithm when a better one exists? Too bad, you'll never know because the solutions are never shared! How do you even know if you learned anything? You won't, and likely didn't.",
    "It seems that CS223 is not as standardized as CS201 and this can be to the detriment of students depending on who teaches the course. Problem set issues (particularly with new ones), differences in what lectures go through, and the breadth\/depth of material covered are all points of concern when it comes to ensuring that a student has covered all the basics intended to be taught by this course (whether as required for the next levels or for general knowledge) but isn't overwhelmed. It does seem that the basic structure of CS223 is in place (\"go through these data structures\") but I can't help but be concerned, when looking at past notes and hearing about the difficulty of CS323, that this semester's class has been less than prepared compared to past classes. The nature of the class also makes it hard to get feedback unless a student is determined to get feedback (going to office hours, asking questions, etc. I often wondered about the clarity and strength of my code (am I parsing command line inputs effectively, for instance) but didn't think it worth going to office hours for.",
    "Strengths: getting you up to speed in C and a lot of different data structures and related algorithms Weaknesses: can be a lot of work, need to learn some stuff on your own",
    "I think in general, the psets are well designed. The specifications are detailed, and although not ALL cases are explicitly outlined by the spec, the level of detail is appropriate and the staff solutions allowed further testing on our own. Piazza was a very useful resource. A formal guide to UNIX and the command terminal would be helpful, in retrospect. But then again, I bet there is one online somewhere. That was a little rough in the beginning of the semester. I can't speak to the quality of the lectures because I didn't attend \/ pay attention very often. I don't want to say that they were useless because it's entirely possible that many students learned a lot from the lectures. It just happened that I didn't need to go. I still felt like I learned a lot and got a lot out of the class.",
    "The support from the course staff has been amazing and I really appreciate how the professor and TFs were prompt in their responses and how people were willing to stay late at office hours. That being said, the collaboration policy is, in my opinion, outdated. It is virtually impossible to work on problem sets alone, and even with the Gilligan's Island Rule, it can be difficult. I understand that there is a risk of plaigarism, but computer science is so collaborative. I don't have a clear answer to this question, and I know this class is meant to be challenging, but there should be a different option for collaborating on psets.",
    "The course material is interesting, but Prof. Slade is really bad.",
    "One glaring weakness is that there are definitely not enough ULAs for office hours. Sometimes you can be in the queue waiting for a ULA to come help you for 2 hours and by then office hours are already over.",
    "The notes provided in the course were very helpful. However, some of the problem sets in the course were not very instructive and did not help develop understanding of the data structures being taught in class.",
    "The strengths of this class include that I learned C and Unix very well and that the midterms were a good test of knowledge of the material. The problem sets were also fun when I understood them. The weakness were that this class was very disorganized and poorly structured. Lectures were a mess, and the half the time I spent on homework was just figuring out what I'm supposed to do. The specifications could have been much clearer about what to do in specific cases so that I didn't have to test the instructor code to see what the program was supposed to do.",
    "The main weakness is that the course did not go into sufficient depth on the data structures taught and that most of the problem sets focused on implementing a given algorithm, rather than coming up with algorithm more independently (not saying everyone should come up with Djikstra's algorithm by themselves...). It felt like translating pseudo-code or adapting existing C code provided on the website, and that I could have gotten more out of a different method. The strength is that I did feel, more or less, that I learned a lot of new, interesting CS topics in this course, and I'm more confident that I can use what I learned to explore CS more (not a cs major).",
    "Strengths: practical, not theoretical, grading system was fair Weaknesses: lecture could be dull sometimes, some points not stressed enough while others were focused on too much.",
    "Very little in lecture material on the actual nuts and bolts of writing C. It left that for students to figure out with tutorial readings and office hours while it focused on the big ideas. Office hours were extremely useful for someone not knowledgeable in C.",
    "Without the doubt, the strengths of the class are the TA's, usage of Piazza, and generally just the wealth of resources available for students taking 223 to learn independently. I believe that this is key to a computer science student's education as it is not always possible to take away the most essential information from lecture itself. The teaching assistants and peer tutors were definitely the highlights of 223; I could not have learned the amount that I did much less excel in this course without their endless help and patience. However, I definitely felt like lecture was the biggest weakness of the course, as it often felt like something that was skippable if not completely redundant. 99% of my learning was gained through attending office hours, collaborating with my peers outside of lecture, or asking questions on Piazza.",
    "Good: goes through data structures needed for interviews etc. Bad: I had to study these for interviews before I took the course so I was bored in the class. Good: Good, thorough class in which to learn C. Bad: Psets left out implementation of the harder parts of data structures. While sometimes harder additions were given as \"extra credit\", it was not real extra credit. For example, if the pset was out of 40, 5 points would be extra credit, or something like that. It's good to have the harder problems (I would have been totally bored otherwise), but doing it this way makes people who are more perfectionist feel a lot of stress, which I think disproportionately affects people who aren't necessarily sure whether they are cut out for CS, and who don't have strong support systems in place. It would be great to have two pset versions (harder, easier), or true extra credit, rather than the weird in between we ended up with. Cleaner specs would also be helpful. On one of the last psets, the functions weren't described, making my only option to take the prewritten code on the website and modify it. I much prefer to challenge myself and write from scratch, but I can't do that if I don't know what I need to be writing",
    "The Psets are very interesting, while the lectures were generally going through the pset specifications, which felt a bit redundant. I think it would be better if we are able to cover more material during lecture time.",
    "Strength of the course is the many TAs and office hours available. Weakness of the course is that the psets change very often so those who were done early had to spend more time on the psets due to the changes. Also, lectures did not explain which data structures should be used when, but only how to implement the data structures in C.",
    "I really enjoyed the problem sets. I found the lectures not very informative though, and found that I learned the most from doing problems.",
    "The problem sets were interesting but the lectures were not very useful or engaging",
    "The problem sets are incredible. They may take between 15-25 hours, but you learn so so so much from each of them. All about how code interacts with data structures, they are incredibly valuable learning experiences. Weakness are definitely the in classroom teaching. You end up teaching yourself a lot from aspnes' notes. This isn't ultimately an issue with Slade or the professor, whoever you have. The problem is, it's hard to teach data structures with out the problem sets, which is why you have the problem sets. For what can be done in the classroom, top notch class.",
    "I felt as though lecture was an unnecessary part of the course because they mainly just went over the homework. I think covering C itself would have helped me much more.",
    "Low engagement between instructors and students. I learned solely through Aspnes' notes.",
    "Topics covered are interesting. Lectures could be structured better and not talk about the homework as much.",
    "Getting instructor feedback was not very easy given the size of the class and the complexity of problems that students could face",
    "Strengths: Aspnes notes and copious Slade extensions Weaknesses: didn't learn much from lecture",
    "I really liked how office hours were run; not only were there a lot of TAs\/ULAs to help you, but all of them were super helpful. I also liked the resubmit policy, because it encouraged you to go back and figure out what you did wrong. I liked how we had guest lecturers come in to give talks, but I wish that we didn't have them during class; while what they talked about was interesting, I kind of wish we spent the class learning new material or going over what we had learned. While overall they were very good about this, there were times when I wished the problem sets were more specific about little details (ex. printing to standard output vs. standard error, types of input we would need to handle).",
    "Please teach us better :(",
    "The strength probably lies in the incredible professor Stephen Slade. Yet, grading seems slightly unorganized, and I seem to always have to petition for more points on problem sets and exams.",
    "Strengths: the material is very useful and the psets are actually very enjoyable when you have time to do them. Weakness: this course was very disorganized at times.",
    "The strength of this course is that it covers a lot of important material in computer science, and it is a must for anyone who is considering computer science. One more strength in this course was the amount of help and the professor's flexibility with the homework. There were office hours three times a week 3 hours each which was really helpful, the TA's were fantastic and super friendly. And the professor would sometimes give extensions for difficult problem sets, which was really nice. Weaknesses are: Although, the professor usually went over the spec and explained the problem sets, the spec was sometimes unclear and it was hard to understand what the program is supposed to do, if you refer to it later. And the lectures can be more interesting than they were.",
    "Strengths - Challenging, stimulating psets and syllabus - comprehensive notes and suitable readings - lecturer and TAs very approachable and available in person and online (piazza, email) - being able to resubmit psets encourages students to learn from their mistakes Weaknesses - Lectures not always engaging",
    "Some of the lectures could have covered more of the reading material.",
    "Strengths: problem sets are fun and really helped facilitate my learning and understanding of data structures; the TA's were incredible, and office hours were frequent and useful. Weaknesses: lectures often felt unproductive, and I wish we learned more theoretical things in class.",
    "PSets did not teach how to use data structures very well. Implementation was alright, but we often had to use data structures in contrived situations where another data structure was clearly more convenient. Also, not much learning was done in lecture. Most lectures were spent explaining psets.",
    "I loved the support given to the class by the ULAs",
    "More 1-on-1 interaction between teachers and students is required. Lecture is very nearly useless.",
    "The lectures are not very helpful and need a clearer structure. It is also extremely disrespectful to other students when the scope of the assignments is suddenly changed before the deadline because someone asked for extra credit. It does not take into account that some students schedule out homework time in advance and may not have the time to make changes to their assignment when the scope suddenly changed. It's like running a race where the finish line suddenly gets moved further away. Please don't ever do that to future students.",
    "The psets and lectures were very useful. No complaints.",
    "I did not learn a lot from in class lectures, however lectures were helpful for going over the specs for problem sets. The overview of data structures was minimally helpful. In addition, at the very beginning of the semester, you're really left on your own with how to get started with C. I learned the most about data structures from the ULAs and from doing the psets. Learn by doing I guess. Having ULAs and a help email that I could reach out to was extremely helpful and they were all very nice and prompt. Overall though, I learned so much that I very much enjoyed the course.",
    "Often felt very unclear what exactly our programs were supposed to do in certain cases, and it felt like it was hard to do the problem set until a bunch of questions had been asked on piazza. Also felt like a bunch of the work was spent just matching the instructor output.",
    "Given it's a pretty coding-intensive course, I thought it was pretty well-structured.",
    "The problem sets force you to learn a lot on your own, which is good. The classes can be sort of redundant or unhelpful at times.",
    "The course gave the opportunity to correct missed points on assignments, which meant that you actually fixed your mistakes and I found that very helpful in the learning process. Also, Slade is very forgiving and gave a lot of extensions. However, the lectures were dry, but also you could get by without ever going to lecture. In the end, you always have to teach yourself computer science and this class was no exception. The specs for the psets were generally clear enough, and Piazza took care of the rest. However, by the end of the term we'd only gotten back 5\/7 psets, and two of those were in the last week\/reading week, so for most of the term you had no idea if you were passing private tests.",
    "Strengths of this course include the availability of piazza to answers questions, the TFs (super duper helpful people with immense knowledge), and the logic problems and certain things we cover in lecture. Weaknesses include preparation for exams (in terms of actually understanding parts of algorithms), and sometimes Professor repeats the same content from the last lecture.",
    "The lectures could be more focused and better organized. I felt that much of the learning happened doing the problem sets and getting help at ULA office hours.",
    "It would be appreciated for the problem sets to be returned faster. In addition, for a couple problem sets, there were many updates to the solution or the problem. It would be better to have those well tested before the course begins. The precise specifications for some problem sets could also be given more clearly and orderly at times. The course did provide good practice with the implementation of data structures and I have certainly learned a lot over the course of it.",
    "A strength was that the pests force you to get a pretty deep understanding of the material. Main weakness was that I didn't learn much from lectures -- it seemed faster to get the information from Aspnes and the pset assignments.",
    "Lectures were too focussed on homework description and I didn't feel like I learned much in class. Most of the learning was through homeworks or self studying.",
    "Could have used more theoretical rigor. The class lacked both breadth and depth. Also, the specs of the problem sets are occasionally ambiguous or confusing.",
    "Professor Slade is a very well informed and helpful professor. The course has very interesting material, and the problem sets are also very interesting. Also, the regrading policy was very good as it encouraged students to look back and correct their previous mistakes.",
    "Strengths of this class include the problem sets and the difficulty of the problem sets. The problem sets really engaged us to the fullest and required us to apply what we learned throughout the class. Also, the teaching fellows and undergraduate learning assistants were extremely helpful throughout the course in helping us with psets and for the midterm\/final. Weaknesses of this class include the lectures which were very unengaging at times and how many of the psets actually required us to copy the code straight from Aspnes' notes.",
    "The material is great, Slade is not a good lecturer. He goes over coding technicalities rather than the big picturel",
    "It is very difficult to adjust to the class if you have not coded in C before. I think it could be helpful to have an optional C workshop at the beginning of the course to help students better learn and understand the basics.",
    "Overall very well taught course. The TAs worked very hard in their office hours, but they were often very crowded- perhaps offer more office hours with fewer TAs at each.",
    "Some strengths of the course are its entertaining problem sets and fair to generous grading philosophy. Some weaknesses of the course are its very uninformative lectures, vague problem specifications, and fast start with little support for those unfamiliar with C.",
    "This course is great as it is. Although Professor Slade's lecture style could be a bit monotonous, the course accomplished what it promised."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "If you are considering a STEM major, then yes. Knowledge of data structures is really essential, and C, while annoying at times, really forces you to think about how exactly the computer\/C is handling manual memory allocation\/how you are moving memory around. However, this course is not easy and there is a really steep learning curve at the beginning (unless you are coming directly from CS50, in which case you should be familiar with C and valgrind). The TAs are there to help, though! You absolutely do not need to have taken CS201 to take and\/or succeed in this course, so don't let that detract you. However, knowing what recursion is and how to use it in basic contexts may be helpful (but again, you don't need 201 for that).",
    "223 starts rough, especially if you're unfamiliar with C and UNIX. However, if you're able to make it through the initial \"great filter\", you'll find the steep learning curve quickly level out as you become familiar with the language and the OS. Perhaps you'll even find yourself staring at a piece of code at 2am for an assignment that's not due for another week just because you got lost in programming, like me. Or maybe you'll be completely justified in writing some fantastic one-liner shots at the idiocy of C in one of these evaluations. Either way, you'll greatly improve your programming skills while also gaining knowledge about data structures and their uses, if you're tough enough to stick it out. This course is difficult, yes, but when you put in the work, it really does come back to reward you.",
    "Yes! I would strongly recommend this course to anyone who is trying to get a basic grasp of computer science and data structure principles.",
    "Unless this course is a requirement for your major, do not take it. C is not a programming language considered to be on the list of the most valuable programming languages. I would advise that you teach yourself Java or Python. Further, the class is poorly organized to the point of having no real structure.",
    "You don't have a choice. Take it early and get it over with. Don't expect this class to prepare you for technical interviews.",
    "Generally CS223 is a fairly good class that knows what it wants to cover. If you have not used the C language before, STUDY IT before starting the semester. Get the books and work through the programs, and talk to any CS friends who may be able to help you understand how to make and operate a C program. CS223 does not want to waste time teaching you a new language and will throw you right in (with maybe a pset or two theoretically to make you learn what you have to know go to office hours and get help on these problem sets!! it will make hte rest of the semester smoother), and this will be easier if you have any experience with C. Do NOT wait to start psets if you are in theater or something extremely time-consuming like that, this means you. Do your best to keep up with the material not because the material necessarily builds on past concepts, but because the extra time to clarify understanding and get help is very useful. Go to office hours and utilize Piazza: the ULAs are very helpful.",
    "You have to take it ;) but yeah, if you're interested in CS, it's pretty useful and interesting.",
    "I would recommend this course to an aspiring computer science major who wants to improve his\/her coding skill, become comfortable with C, and is interested in the theory of computer science as well as the practicality. I wouldn't recommend this course to a non-major.",
    "I would recommend this course as long as a different professor was teaching it.",
    "Yes if you want to be a computer science major.",
    "I would if you are looking to become a CS major.",
    "This course is required for the CS major. I would recommend this course to somebody who would like to learn C and\/or interested in learning about data structures in computer programming.",
    "I would recommend this course to another student only if it is for their major. Otherwise, the student would not be worse off picking up a textbook and learning C and Unix by theirselves, which is what I feel most students had to do the first week of class, since Professor Slade did not help in this matter. With regards to data structures, the little material I learned about graphs, heaps, and hash tables probably could have been learned much faster outside of class.",
    "I would recommend it! The course is a survey of a bunch of data structures, plus the C language. While attending class is not the most engaging of experiences, the problem sets were fairly interesting (and time-consuming!). As a non-CS major, I felt like I got a lot out of the course, and that I have a jumping-off point to take additional CS courses or learn more on my own.",
    "If you're going to major in computer science, you have to take this class, and if you're not going to major in computer science I would still recommend. Obviously its a good deal of work, but the class is definitely worth it. Slade is not the most entertaining lecturer but he is funny sometimes and he explains the material needed for the psets. Do the psets, go to office hours, study the logical problems, and study the sample code and you'll get an A- at least.",
    "This class was meh. I enjoyed working on the PSETs for this class-- they were a huge time commitment but were interesting,, and I think that you're able to learn the material as you move through the PSETs. The class itself, however, was less than riveting. Take it if you need it for your major or if you just really enjoy coding-- otherwise, I'd say avoid it.",
    "Yes. 223 is one of, if not THE essential computer science class for any aspiring software engineer or computer scientist.",
    "It is good if you need to learn data structures (but you could just read Crack the Coding Interview like I did), or need it for the major. Also good if you need help getting yourself to learn c.",
    "Take this class! After taking this class, you actually feel that you know how to program. I took this class without taking CS50\/CS201, and I didn't have much programming background beforehand, so it's definitely doable. The first pset is hard, but it's also hard for everyone because learning C syntax and how it works takes time. But after the first pset, everything else in the class is really fun!",
    "Yes, because it is important for coding interviews",
    "Yes, because it was a good way to learn C and to learn the fundamentals of data structures and algorithms. I think I learned a lot more from 223 than from 201, so I think it was overall a good class!",
    "Honestly Aspnes' notes were more useful than lecture. But I did learn a lot about C and debugging through this class. Slade is a very kind and forgiving person too with regards to grades which was very nice.",
    "yes",
    "If you are on track to study CS, definitely need to take this class. Outside of the CS Major, not much of a need unless you have a particular interest in CS.",
    "I do not really recommended attending the lectures, but doing the problem sets were really important to my understanding of certain data structures, pointers, and memory issues.",
    "yes",
    "I would recommend this course. Learning both c and data structures is important for anyone who is interested in computer science. Would especially recommend to students who have only done languages like java or python before.",
    "Yes but do not take this class with more than one class with a similar workload. You will be miserable",
    "If another professor were teaching it, absolutely. If Slade is still teaching it but you're okay with self studying, absolutely.",
    "I would recommend this class to another student; I learned a lot about computer science and improved my programming skills.",
    "Yes!",
    "Definitely a very valuable class to take if you have any interest in computer science",
    "Yes, if you are seriously interested in computer science, even if it not as a major, take this class, it is not easy, but very rewarding.",
    "No",
    "Take this class if you're considering CS. The content is very interesting and is an important foundation",
    "This is a must take if you are planning on majoring in CS.",
    "Yes, if you're a CS major and want to get better understanding of data structures, then yes!",
    "It's required for CS majors, but if you're not a CS major, then you might want to take it to learn data structures, but honestly, you could implement them yourself in a week. Also, all the notes are online, and in more detail than lecture, so...",
    "Take it if you have to",
    "No. I would not recommend others to take a class where the assignments can suddenly change and the example scripts may not always be working correctly.",
    "Yes, this course is a must if you are taking CS.",
    "If you're considering taking cs223, you probably should, but I didn't learn as many practical programming techniques as I would have liked. You learn the C programming language, which has quirks and difficulties that don't exist in most languages you'll work with in a job. That said, I'm glad I took the course.",
    "Well, if you're a CS major you'll have to take this course, but I'd you are not but are interested in learning about data structures or might want to work in tech some day, I would recommend this course as well! You will learn a ton about data structures, almost entirely from the psets. Many many people did not come to class or take advantage of office hours, but I would recommend doing both. Class because Slade is a quirky and fun teacher who knows his stuff and is passionate about computer science, and office hours because it will cut hours off your total pset time (help with understanding, debugging, etc). I really enjoyed this course because of everything I learned, but it did take me around 13-18 hours per pset (which are usually due every two weeks).",
    "You need this course to complete CS major, but I would also recommend this course to anyone who wants to learn about the basics of data structures.",
    "Yes! Take this class if you want to improve your knowledge of C.",
    "I thought it was great fun, but also I really love coding. It gives me a thrill. This class was not the most fun I have had coding; it was mostly debugging memory errors, but it wasn't very hard and it was decently interesting. You learn a lot of weird things that C does.",
    "If you want to become a more efficient coder and actually feel like you can begin to call yourself a computer scientist, I'd definitely recommend this course. It made me immensely improve my software skills. Also, with the class being so pset heavy, you really became better at writing and executing concepts than just superficially struggling to memorize abstract CS concepts and being heavily evaluated on your skill to replicate that code which you haven't worked with.",
    "I would recommend this course to anyone who wants to reach a better understanding of data structures and programming at a low level language like C. The student should be ready to put in more time than anticipated for completion of problem sets at times.",
    "Not if they didn't need it for the cs major.",
    "Yes, but only because it's a requirement for the major.",
    "Yes. The material is very interesting and Professor Slade is an amazing teacher.",
    "I would definitely recommend this class to anyone pursuing computer science further. Although it is difficult and takes up a lot of time, it gives you a solid foundation in C and teaches you the basics of data structures which is essential if you want to keep going in computer science.",
    "The material is very cool. Slade is terrible. If you are self-motivated enough to learn from Aspnes' notes, the problem sets can be fun.",
    "If you are looking to have a solid foundation in programming and data structures, this is a great course. Not a C\/D\/F course.",
    "This is a great class for practicing and improving c programming. Slade is not the best lecturer, but he cares about the class and the students, and the psets are both interesting and fun to complete.",
    "This course is a mandatory part of the CS \/ Computing and the Arts curriculum, so anyone with those interests must take it. I recommend the course to people with strong foundations in object-based programming-- it is initially very tough to come into this course with only knowledge of racket.",
    "If you're a computer science major, you kind of have to take this course. Nonetheless, the workload of the course and exam content is manageable."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "223",
  "section": 1
 }
}