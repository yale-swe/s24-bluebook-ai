{
 "crn_code": "21767",
 "season": "201501",
 "legacy_coursetable_course_id": 31578,
 "enrollment": {
  "enrolled": 22,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC305",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    1,
    7,
    7,
    2
   ]
  },
  {
   "question_id": "YC306",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    3,
    6,
    4,
    3,
    1
   ]
  },
  {
   "question_id": "YC307",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    14,
    3
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC304",
   "question_text": "How would you summarize ECON 111 01 for a fellow student? Would you recommend ECON 111 01 to another student? Why or why not?",
   "comments": [
    "This entire course is offered as an open course on the Berkeley website. It is based on the book \"Engineering Software as a Service\", the entire premise of which is that writing a ruby on rails app is equivalent to engineering software. The lecture slides and the ruby on rails homework are directly taken from the open course. The teacher did not even bother to change some of the old section references. Other homework include reviews for others' project proposal, code base, and your own teammates, which are bureaucratic and simply useless. If you wish to learn something from a class, don't waste your credit on this one. If you indeed have a project in mind that you want to work on, don't do it via this class, instead, do an independent project. You have much better use for your time than taking this class.",
    "This is a class that lets you build one big project with a mid-size team, which can be cool. However, there is an inherent bit of self-teaching with this. If you are using novel technologies to hack something together, you will basically teach yourself how and the other stuff (as it stands) will just annoyingly get in the way. If the class is really restructured to be more of a workshop situation, then take it and get credit to learn good development practice and get a cool piece of software to add to your portfolio. If the class stays the same, consider taking it only if you want to be annoyed by cumbersome lecture\/assignments as the price for getting credit for teaching yourself how to build an app.",
    "I would not recommend this to another student. The course is very poorly organized.",
    "It's a good course if you already have an idea you want to work on and know the group of people you want to do it with since you'll get credit for making something you already wanted to make. There were a lot of superfluous other assignments though that were pretty annoying so if you're not really into it you won't like it.",
    "This class heavily depends on the group you work with. I would not recommend this class if you do not have a solid group of people to work with. The class itself is disorganized, with midterms and problem sets and other random assignments here and there. This class is definitely not well-structured, but the benefit is that it forces you to teach yourself how to make your own application. Overall, though, I would only recommend this course if you are desperate for a CS credit.",
    "It's a good class. The material isn't too intensive because most of your time will be spent on the project. You'll learn a fair bit about testing.",
    "You learn Ruby on Rails and design an app. Not the best class per se in the world, but as someone who had done neither of rise before, I guess I'm glad I took it.",
    "This class has a really cool final assignment - you get to make whatever piece of software you want in a team of 5. That being said, the course was very poorly organized. There was no list of assignments at the beginning, the class itself wasn't very organized. Also do a ruby on rails project! The whole class is based on ruby\/rails and if you choose another language, the majority of classes are useless. Honestly, this class is cool because it makes you create a project, but the class itself isn't great.",
    "I want to serve as a counter balance to many of the other reviews given. Many of them do bring up valid points; however, I want to talk about why this is course worth taking nevertheless. First, I want to mention that this is only Professor Ruzica's second year at Yale. It will take some time for her to become accustomed to being here and fully develop her teaching style (other courses like 323 have been taught by the same person for 20+ years). The first few years are often a rocky period of adjustment (as I'm sure we can all attest concerning our Freshman and Sophomore years here). I believe the course will only get better moving forward. Concerning the course itself, the highlight is the project. You work on a team of 5-6 and build a project of your choice. You pick the idea, design the specs, build it, test it, and present it. At the end of the semester, you will present the work in a projecet fair, which several industry figures often attend. This is an excellent course to prepare for internships and practice team building skills. In particular, this course provides valuable experience for those who plan to work in the industry. I believe the soft skills of good communication, conflict resolution, planning and goal setting, etc. are often overlooked in CS curicula. However, they are critical to just about any job you will apply to. The course does a good job of emphasizing them. There are several ways I would like to see this course improved. First, I think the course would be much better if it were exclusively focused on the project. In addition to the term project, we had several homework assignments on ruby and rails. We had a midterm and final quiz on material learned in lecture. While in and of themselves they were not too time intensive, they took away from the time to work on the project. Given that I was taking 5 credits and another programming intensive class, there were weeks I had to work on the assignments and neglect the project. I think it would have been better to have the assignments more tailored to the project (maybe have an assignment to develop a few major features of your code, test and document it thoroughly, etc.). Instead of the midterm, perhaps we could demo a semi-working prototype, or we could have a code review to see how our coding style, tests, etc were doing. This could help insure that the assignments added to versus distracting from the main project, particularly for those who are taking heavy course loads. While I loved the book we were using and thought many of the lecture topics were important, we often followed the book verbatim through the lectures. At times, some of the concepts tended to be stating the obvious (though we sadly often ignore the obvious as coders) and seemed a bit repetitive. The material in general is definitely valuable for coders to learn, particularly how the business world operates, but it would be helpful for the teacher to add in more material and spice it up a little. Lastly, the course seemed a bit disorganized at times. Frequently, assignments were announce with short notice; there was never really a solid syllabus laying out all the assignments and what needed to be done. This made planning particularly difficult. Whether this be a blessing or curse so to speak largely depends on how one looks at it. In the business world, there will no doubt be some level of uncertainity and change (particularly in start ups). To some extent, you will need to know how to handle it and react well in spite of late notice. While I personally would prefer better organization, there can still be some things to learn from a more disorganized experience so to speak. If the teacher does decide to go for a more free-flow style, I would suggest letting students know this up front. In short, give the course some time; give the professor some grace. The course has some work to do, but it is well on its way to being a top CS elective.",
    "At this time, this course is not worth it. Though it's a good experience to develop a project, lectures are boring and homeworks\/grading seem random. There is little cohesion or educative content, and no sense given of how students are doing (I'm about to check my final grade, and literally have no clue where it might be).",
    "Software Engineering is an excellent opportunity to build software in a CS course instead of only working on problem sets. You can use any tools you want for the course project, which is the main focus of coursework. There were two short programming problem sets: one Ruby introduction and one Rails introduction. Throughout the semester, your work is evaluated by your peers and at the end of the semester your peers perform code reviews in addition to the professors and TA's evaluating your code. The course gives a thorough overview of the history software engineering and software engineering best practices and provides an excellent opportunity to build a SaaS application.",
    "If you want to make an app, this is a class that will actually make you do it. I hadn't ever programmed outside of class, which was a pretty bad level of experience to come into this class with. However, my group had a couple people who had made apps before and they helped us out tremendously. Honestly though, if I had been in a group with people who were like me, it would have been SO MUCH harder. However, apart from the making an app aspect, which was cool and turned out to be really interesting and useful for me personally, there is the class aspect of this class. Lectures and assignments are not the most appealing part of this class. Ruzika is sweet, but spends a lot of time on things that really don't mean too much unless you see them in practice (software engineering things like making specs, test-driven design vs. plan-and-document, different kinds of testing, etc) and can be very, very boring if lectured on for too long. This happened a fair bit and was frustrating because I wish she had given us time in class to work on learning Ruby, which all the assignments are in (btw) even though she said you could use any language to make your app, so I never used Ruby to make ours anyway. She does teach some Ruby basics too, but it was really frustrating to go through the assignments with minimal knowledge. Another thing is that the dates for exams and assignments are really unclear and not stated in advance. Basically, this is a end-of-semester heavy class, with a cool part (making an app), and as of now a pretty boring\/tedious\/frustrating part (lecture and assignments). Hopefully that part will improve, but I can't say it has yet.",
    "This is a great opportunity to create a piece of software you can call your own - which is rare to find in a Yale CS course. That said, the day-in and day-out of the course is somewhat unbearable. You rarely need to go to class and the homework assignments are seemingly useless but take awhile to accomplish. However, I am sure Ruzica will keep improving the course each year (she is extremely dedicated and cares about the course and the students immensely). I am sure next year will be better. And as far as comp sci electives go - this has to be one of the better ones because of the applicable skills you learn; it just requires some all nighters."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "439",
  "section": 1
 }
}