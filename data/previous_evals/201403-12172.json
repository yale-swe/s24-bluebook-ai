{
 "crn_code": "12172",
 "season": "201403",
 "legacy_coursetable_course_id": 28995,
 "enrollment": {
  "enrolled": 16,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    0,
    1,
    5,
    7
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    2,
    4,
    5,
    2
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    12,
    1
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "Really fun labs. David Wolinsky was a likable guy but not a particularly good lecturer.",
    "Operating systems is really interesting, but all the material is taken directly from a MIT course",
    "Operating systems is awesome, very fun, and is definitely something that all CS majors interested in computer systems should take. Most things you will ever write on a computer will be run on an operating system. On the other hand, if Wolinsky is teaching it, only take it if this is your last chance of ever taking the course.",
    "I would say take it with Professor Ford, but I can't because he is leaving. Too bad.",
    "OS is a great class. It will give you a more complete understanding of how your computer works at a low level than any other CS class at Yale. The lectures are well-organized and the reference materials make the labs doable. Professor Wolinsky and Danny were both very responsive to Piazza posts as long as you gave them a reasonable amount of time. The class is a lot easier and more fun if you find another student to bounce ideas off during the labs, because chances are you'll encounter a lot of the same issues and you'll save hours by helping each other avoid them. The labs are hard, but very well-organized and rewarding. Expect the labs to take 10-15 hours a week. That being said, this class is great and should be mandatory for all CS majors.",
    "Super interesting material since it's most relevant to how your computer actually works at the level you usually interact with it. The psets aren't that hard in concept, just awful to debug if you forget to set like one bit in one register. I'd say the class took about 10 hours a week which is what the professor aimed for, though it tended to be longer if I had to really dig deep to debug something. The exams aren't too bad since it's just material covered in the lecture, but it can get very specific so pay attention in class (the exam averages were in the 60% range).",
    "Before you take this class, it is important to understand what you are getting yourself into. Check the syllabus or the professor - is the course being taught on JOS (meaning it's a replica of MIT's Caffeinated 6.828, a month-long course they can take during Independent Activities Period), or PIOS? PIOS is a heavy modification of JOS by Professor Ford, and the labs look like death incarnate. You will learn more in a version of the class taught on this, but I think your marginal utility will dip after your 25th hour working on a lab. JOS is a teaching exokernel developed by MIT, and the labs are where most of the value of the class is. It starts out as a small collection of code that barely boots, and ends up being able to run your C programs (linked to a JOS-specific C library, which you help implement), as well as act as a simple web server. I now have an excellent sense of what is going on under the application level of a zoo machine because I have, in part, implemented it. Topics include: What Happens When I Press the On Button Memory Management Exception and Trap Handling Inter-Process Communication Process Isolation Multiprocessing Challenges File Systems Input\/Output Devices Network Drivers So take this class if you want to figure out where and why the magic happens in you operating system. Be prepared to learn a lot about GDB, ld, gcc calling conventions, and x86 as you implement these features. You will also read classic papers in the systems design world and have a good sense of what is going on, what the motivation was, and even how you might start to implement what is being described. I probably averaged 25-30 hours per lab, and the class had 6 labs and a final project. If you want to learn this stuff though, don't let that stop you. I had a great time, have a good intuition for kernel design and implementation, and would take it again in a heartbeat.",
    "Take if interestef in OSes, or want to improve your C skills. Takes ~15 hours per week if taught by Wolinsky.",
    "If David Wolinsky is teaching, you should not take the class. He will give you misconceptions about operating systems that you will have to unlearn and teach yourself after the course. Grading was poorly explained and arbitrary. 5 programing assignments requiring 20 hours each were worth 20% of your grade, a 30 minute protect was worth 30%. Operating systems is a valuable topic with lots of implications for our field. Get a book and teach yourself it will be lower stress more actuate and faster than taking this course. The professor assigned readings and response papers on top of our programing assignments, it seems like he never read our 4 response papers.",
    "Lot of work- but essential if you want to learn the building blocks of computer science."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "422",
  "section": 1
 }
}