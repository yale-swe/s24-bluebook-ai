{
 "crn_code": "10514",
 "season": "201603",
 "legacy_coursetable_course_id": 39121,
 "enrollment": {
  "enrolled": 52,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC402",
   "question_text": "Your level of engagement with the course was:",
   "options": [
    "very low",
    "low",
    "medium",
    "high",
    "very high"
   ],
   "data": [
    0,
    1,
    5,
    16,
    10
   ]
  },
  {
   "question_id": "YC404",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "poor",
    "fair",
    "good",
    "very good",
    "excellent"
   ],
   "data": [
    1,
    1,
    6,
    15,
    10
   ]
  },
  {
   "question_id": "YC405",
   "question_text": "The course was well organized to facilitate student learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    1,
    2,
    5,
    18,
    6
   ]
  },
  {
   "question_id": "YC406",
   "question_text": "I received clear feedback that improved my learning.",
   "options": [
    "strongly disagree",
    "disagree",
    "neutral",
    "agree",
    "strongly agree"
   ],
   "data": [
    2,
    8,
    14,
    6,
    2
   ]
  },
  {
   "question_id": "YC407",
   "question_text": "Relative to other courses you have taken at Yale, the level of intellectual challenge of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    0,
    3,
    20,
    9
   ]
  },
  {
   "question_id": "YC408",
   "question_text": "Relative to other courses you have taken at Yale, the workload of this course was:",
   "options": [
    "much less",
    "less",
    "same",
    "greater",
    "much greater"
   ],
   "data": [
    0,
    0,
    5,
    16,
    10
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC401",
   "question_text": "What knowledge, skills, and insights did you develop by taking this course?",
   "comments": [
    "Filled in the gaps left by 323 by digging deeper and providing more interesting programming assignments (in my opinion). Loved hacking on mCertiKOS.",
    "Much better understanding of how operating systems work.",
    "Knowledge about how operating systems work and how to program them.",
    "I learned how to build a layered operating system. It was a good challenge to do so much coding without basic procedures like malloc.",
    "Great build on 323",
    "I learned how all of the different parts of an operating system work together to create a single piece of software, the general roles played by the operating system, debugging skills for complicated kernel modules.",
    "OS is a great class -- brings together so many concepts from 323 to a much more satisfying conclusion. Learned all about the internals of the OS and the homeworks were very detailed and so instructive.",
    "I learned a great deal about how operating systems actually work. I also learned a lot about debugging. The work for the course is extremely low level as far as CS goes, and I really had to get familiar with the code I was working on, so I learned a ton. It is one thing to know how operating systems work in theory, yet it is a separate beast to understand how they actually work. This course does a phenomenal job of showing how concepts like physical memory management, virtual memory management, and threading are actually achieved by an OS.",
    "I learned a lot of fundamentals of OS really solidly because I have to code and integrate nearly every important part. I became much stronger at low level programming techniques like threads, shared objects, and interrupts\/exceptions.",
    "I learned a ton about low-level details of computing. Essential class for CS majors",
    "Learned about OS design and implementation",
    "This class taught me the main ideas necessary to broadly understand what roles an operating system (specifically, the kernel) carries out and how those can be built from code. Memorable topics include thread\/process management, writing safe and efficient concurrent programs, reliable file systems, and a small taste of what formal verification looks like for operating systems. Lectures are focused on the bigger picture concepts whereas the assignments let you learn the specific details through implementation. For example, you learn what the usefulness of fork is in lecture, and then get to actually implement the back-end of fork on an assignment. You can think of lecture as providing the high-level motivation for the specific programming required of each assignment. Over the course of the assignments you build up the pieces for a more and more complex operating system. A lot of the lowest level stuff (like the Makefiles, device drivers, etc.) is already provided by the TA's, which is nice since that lets you focus on the more conceptually interesting material. You get more and more freedom on each subsequent assignment, so in addition to learning about operating systems you get some practice in managing a large software project. All the coding is done in C, so you get pretty good at that. You have to write a bit of x86 assembly, but it's easy to learn just enough assembly to get by. I knew nothing about assembly (other than the cursory coverage in 201) before this class, and looking back assembly is far from the most challenging part of the class. So don't let the assembly intimidate you.",
    "1. In this course, I learned the details of how to design an operating system. For example, we discussed various memory management techniques, CPU scheduling algorithms, and filesystem structures. 2. Building an operating system from scratch is obviously a huge project: This class taught me how to design large systems by organizing the various code segments into layers.",
    "How thread and process scheduling, physical and virtual memory management, the file system, locking and multithreading, and various other core functions of an OS work, and how to implement them. Also some insights into formal verification of the correctness of an OS.",
    "I thought before this course that I loved C and thought assembly was really neat. I now realize a number of things I dislike about C, but still love assembly in a small way. mCertikos seems similar to a number of other projects -- people seem to love the research project of verifying operating systems. Interesting that this trend from the 90s is coming back. Have Mizar or Isabelle been active recently?",
    "I learned a lot about the fundamentals of how computers work. Ever since beginning the computer science major, I was always curious about how we actually make our machines work. Finally having taken this class, I learned so much about the various abstractions that an operating system is comprised of. I greatly enjoyed the implementation style of the class, where we were given a model of a real OS and asked to build smaller parts of it in layers. The textbook for the course is very good; Shao's lectures match up with it consistently, so you can read the book if Shao goes too quickly in class. Of all the classes I've taken for my major, I probably learned the most in this course.",
    "I learned the mainstream software strategies involved in building operating systems. Now I'm able to understand the basics of how UNIX works.",
    "I feel much more comfortable with low level stuff like assembly, and with the purposes and implications of many os primitives, especially syscalls and virtual memory."
   ]
  },
  {
   "question_id": "YC403",
   "question_text": "What are the strengths and weaknesses of this course and how could it be improved?",
   "comments": [
    "Great course! Lecture can be a bit dry at times, but Shao is enthusiastic, good-natured, and tells amusing anecdotes. Challenging (but very doable) lab assignments that get harder (but more interesting) as the semester progresses. I recommend reading the xv6 book (https:\/\/pdos.csail.mit.edu\/6.828\/2016\/xv6\/book-rev9.pdf) instead of Anderson and Dahlin. This will fill in the gaps that 323 left. All CS majors ought to take this course, as you'll see from my... Advice from a senior CS major: do not take any elective course taught by Silberschatz (423, 437), Fischer (427), Petersen (431, 432), Rokhlin (440), Gelernter (451), or Slade (458). All of these courses are a complete waste of time (although they consume very little of it) and a huge waste of a Yale education. You will literally learn nothing from these courses except that half of the Yale computer science faculty is abysmal (the other half ranges from decent to stellar). By all means, major in computer science, but do yourself a favor and limit yourself to taking only the rigorous, well-regarded CS electives: 421: Compilers and Interpreters (Shao), 422: Operating System Design and Implementation (Shao), 438\/638: Database Systems (Abadi), and 478: Computer Graphics (Rushmeier). Together with 201, 202\/244, 223, 323, 365, and 490, all of which are required for the major, this will get you 10 credits and lots of job offers (a rigorous, well-rounded BA is worth more than a gutty BS). When you're applying to jobs, you can say you're planning to complete a BS, and then switch in your final semester (by which point you'll have already accepted a job offer), and nobody will ever know or care. If you're planning to apply to grad school you should consider 480: Directed Reading. If you need a gut that is still practical, consider 426: Building Distributed Systems (Balakrishnan). If you're feeling masochistic, consider 433: Computer Networks (Yang), but beware that it is a LOT of work.",
    "The labs are very well designed. The TAs were helpful this semester. The textbook was very helpful. Professor Shao is great, very personable and approachable. I think he could make lectures more focused, however. Students started skipping lectures because they seemed less technical and relevant to the course.",
    "The course had a lot of great material and great coding experience, but in terms of how it could be improved, the tested material and the knowledge needed for coding seemed to be very separate (e.g. the lectures didn't help too much with the psets and the psets didn't help too much with the test).",
    "The labs are interesting, and I really enjoyed figuring out how to make parts of an operating system like system calls. The source code provided was riddled with bugs, however, that students had to find. Lectures are fairly boring, and it doesnt feel like we learned any material in class.",
    "More help on homework!!! Lectures were great, and assignments were great as well -- but we could have used more help. Thought the midterm could be better -- I felt like it didn't really test my understanding of the course material.",
    "This course is great. Lectures were very informative. Assignments were extremely well designed. The workload is a bit heavy, but that is necessary to truly learn the material. The TA's were phenomenal at answering questions promptly.",
    "Strengths are the psets: well designed and challenging and they build on eachother well. Psets could be improved by more detailed specs: they were detailed enough but there were a couple times I needed to turn to piazza when something should've been in the spec, so maybe taking a look at those piazza questions and finding common points of confusion to include in the spec for next year would help. Lectures were the weak point: more dynamic slides would help alleviate that problem.",
    "Lectures were fun, but psets were very ambiguously written and unclear in terms of directions. I also never really received feedback on my code",
    "Operating Systems with Zhong Shao is excellent! Operating systems are a very fundamental part of the computing world, and because of their low-level nature the concepts can often seem intimidating. However, Professor Shao really tries to make everything as intuitive as possible by finding real-world analogies for the problems you encounter in class. However, this does not mean there is no rigor to the material, as you need to implement many of these ideas yourself on the assignments. One of the biggest strengths of the class is the style of learning you get from the combination of lecture\/homework. The homework can really make you appreciate why the concepts discussed in lecture are the way they are. The only (small) downside is that the assignments are not always the best specified. Some of that is intentional, as the TAs want you to have the experience of designing a specification yourself. However, some of it just has to do with the assignments being rough around the edges, as this was just the second year Shao has taught the class. Especially early in the semester, I often found the biggest challenge was not the programming itself but actually understanding what was expected in the assignment. Piazza is very helpful for figuring this out, and the TAs are responsive, so I do not think this issue should stop anyone from taking the class.",
    "This course desperately needs more hands-on attention by Prof. Shao, or a complete restructuring entirely. The problem sets appear to be designed by the TFs and tend to be vague, uncertain, or self-contradictory, and for a class which consists of building an entire operating system from the ground up, this simply will not do. The lectures are effectively equivalent to Silberschatz's Principles of Operating Systems (similar course which involves no programming) and as such do not aid in the completion of assignments or the building of the OS at all.",
    "Strengths: 1. Although long and hard, the problem sets were fun. Furthermore, working off of mCertiKOS provided structure and correctness. For those unfamiliar, mCertiKOS is an operating system designed by the FLINT group at Yale, led by Zhong Shao. 2. Working with a partner greatly alleviated the stress of completing problem sets, without significantly decreasing the amount learned. Weaknesses: 1. Some of the lectures were rather dry. Rather than slogging through small implementation details in lecture, I would have preferred to have had the lectures focus strictly on design concepts.",
    "Assignments are well structured and guided because functionality is broken up into many different layers, which is helpful even as we go on to develop our own layers and functionality. The late policy with 120 discretionary late hours is also great and takes off the stress, since debugging can often take a lot longer than expected. Lectures could be improved however - perhaps it would be better to teach without slides and pseudocode and instead give a functional overview of the algorithms involved. I found that I did most of my learning by actually working on the assignments, and less so from the lectures.",
    "The pacing of the course could be improved. I found that Assignment 5 was too heavy. The file system and the shell felt like two assignments. Because we took a midterm exam before this assignment was due, I felt like we had less than the usual time to work on it, and it was difficult to coordinate with my partner over Thanksgiving break. The final project was also a bit heavy to deal with during reading period. Overall, the structure of the course and level of organization was great. Shao is an engaging lecturer. The TA's were very helpful and responsive. I wish all of my CS classes were like this.",
    "Biggest strength was definitely the progressive development of key parts of the operating systems. Weakness? Hard to say. I guess pset content can always be revised and improved.",
    "Lectures could be hit or miss. Some were really interesting, some felt like review. The psets were pretty good. I think they could be improved by making it a little easier to test your code as you go rather than writing everything and testing at the end. Especially with the filesystem assignment (pset #5), it felt like we sometimes had to guess at what contracts the function we were filling in had to maintain because we hadn't written the rest of the code that relied on them. I think this could be improved by either having us fill in more code so we have a better understanding of which contracts need to be maintained, or providing a more detailed specification of exactly what each function must achieve (including which error conditions need to be handled). Essentially, it sometimes felt like we were maintaining implicit invariants, and having to look through the rest of the code base to find these implicit constraints was kinda awkward."
   ]
  },
  {
   "question_id": "YC409",
   "question_text": "Would you recommend this course to another student? Please explain.",
   "comments": [
    "Great course! Lecture can be a bit dry at times, but Shao is enthusiastic, good-natured, and tells amusing anecdotes. Challenging (but very doable) lab assignments that get harder (but more interesting) as the semester progresses. This will fill in the gaps that 323 left. All CS majors ought to take this course, as you'll see from my... Advice from a senior CS major: do not take any elective course taught by Silberschatz (423, 437), Fischer (427), Petersen (431, 432), Rokhlin (440), Gelernter (451), or Slade (458). All of these courses are a complete waste of time (although they consume very little of it) and a huge waste of a Yale education. You will literally learn nothing from these courses except that half of the Yale computer science faculty is abysmal (the other half ranges from decent to stellar). By all means, major in computer science, but do yourself a favor and limit yourself to taking only the rigorous, well-regarded CS electives: 421: Compilers and Interpreters (Shao), 422: Operating System Design and Implementation (Shao), 438\/638: Database Systems (Abadi), and 478: Computer Graphics (Rushmeier). Together with 201, 202\/244, 223, 323, 365, and 490, all of which are required for the major, this will get you 10 credits and lots of job offers (a rigorous, well-rounded BA is worth more than a gutty BS). When you're applying to jobs, you can say you're planning to complete a BS, and then switch in your final semester (by which point you'll have already accepted a job offer), and nobody will ever know or care. If you're planning to apply to grad school you should consider 480: Directed Reading. If you need a gut that is still practical, consider 426: Building Distributed Systems (Balakrishnan). If you're feeling masochistic, consider 433: Computer Networks (Yang), but beware that it is a LOT of work.",
    "A wise man named Zhong once told me, \"OS is life. One day you will be able to date an OS.\" Visionaries like this man are rare -- almost as rare as certified operating systems. In 422, you get access to both of these rare things. You build up a simple version of Zhong's research group's certified operating system, with layers including process management, virtual memory management, multithreading support, and the file system. There's a valuable lesson in the class's strict adherence to \"layering\", where you implement simple (\"thin\") layers of a complex system one-by-one, rather than tackling large chunks of the implementation all at once. Not only does layering make the 422 assignments pretty manageable, but it also makes possible the goal of certifying a Linux kernel. I recommend this class to anyone who wants to make sure their future romantic partner is built on top of a certified bug-free kernel.",
    "Yes if you're interested in pursuing the CS major \/ future tech jobs.",
    "I would recommend this course to all CS majors. Shao is funny, however lectures are boring and cover basically no material. If you have had some exposure to concurrency and systems, expect a lot more but nothing new, and expect metaphors about applying concurrency control to relationships, etc. Labs were awesome, once they removed bugs from distributed code. Cool new way to think about programming. Challenging: implement virtual memory, system calls, concurrency, file system, and graphics, all without using malloc or anything else you dont write yourself. Fulfilling result: youve built many layers of an operating system.",
    "OS is a challenging and fulfilling CS elective. The psets increase in difficulty and are rather challenging \/ time-consuming by the end, but you'll learn a lot. It requires an attention to detail and an appreciation for low-level programming, so if you hated 323, stay away. The most difficult aspect of the course is debugging your code, since it's so low-level. For this reason, it very much helps to do the assignment with a partner (which you're allowed to do) or at least have friends who you can consult when you get stuck, which you will. The lectures could be a bit dry at times, although Prof. Shao does have a great sense of humor. Overall, it's definitely a worthwhile CS elective, and if you manage your time well and have people to work with, it's manageable.",
    "This was a good class, where I learned quite a bit about core computer science classes. The lectures are slide-based, which gets a bit annoying since he goes through them faster than you can type or write all the information down, but the textbook is amazing, so definitely read that if you can. The psets do take time to debug, but a lot of the skeleton code is written for you, so the amount of actual coding you need to do is nowhere near Eisenstat 323 level. The one exam we had was also very fair, though you should go to lecture or read the book to get a conceptual understanding of the material. Overall, the class was pretty good, and definitely up there in terms of CS courses at Yale.",
    "Definitely take this class -- this is knowledge every CS major should have. If you complete the problem sets with a partner, and are careful to start early, they're really not that bad. I saw some students compare this workload with CPSC 323, and for me, it wasn't even close. Debugging is certainly tough, but if you're careful to follow the spec and follow Piazza religiously, you won't have to do too much in-kernel debugging. Do note that the last couple problem sets are much tougher than the first ones, so despite not having a final exam, you'll have plenty of end-of-term work from OS.",
    "OS is a great class -- brings together so many concepts from 323 to a much more satisfying conclusion. Learned all about the internals of the OS and the homeworks were very detailed and so instructive. It's a hard class so plan around it -- if you liked 323 you will probably enjoy it.",
    "I would absolutely recommend this course. This is the best CS elective that I have taken at Yale. I learned a ton about Operating Systems. There is a significant amount of work, though it is extremely rewarding and does a great job at teaching the material of the course. The work can sometimes get frustrating because it is so low level and print statements are no longer helpful for debugging, though I found that I got much better with gdb and my approach to debugging.",
    "I would definitely recommend this to anyone interested in systems. It's challenging, but you learn a lot!",
    "OS is on the better end of yale CS electives. Psets are challenging, rewarding, and fair (as long as you have someone in your class who starts early and finds bugs) and you will learn a ton about OS through them. Lectures are boring but that's no different than other CS classes and Prof Shao is more engaging than most (lots of dry humor and metaphors). Most psets you can start 2-3 days before if you're willing to crunch, except for pset5 which I wish I would've started a week early (we had thanksgiving break our year to do it, I would recommend using that time). It builds well off of the stuff you learn in 323, and you get much more comfortable with the a lot of the CS concepts common to the upper level courses: threads, locks, stuff like that: take it!",
    "Any CS major should take a class on OS. Be prepared to work hard, but it will pay off.",
    "Shao is hilarious, though the psets are ambiguously written. Actually doing the coding itself is rarely hard, but figuring out what you need to code can be. Workload of the last two psets is MUCH greater than the first 4",
    "I think this is one of the better higher-level electives in the CS department. Operating systems are not only a important fundamental in their own right, but also the thinking surrounding them is applicable to considering many large-scale software systems. It is well-taught and the assignments are productive, so you will gain a lot from it. You just have to be willing to put in a lot of time, especially for the later assignments. There is a fairly generous late work policy, but you should still not start as early as possible!",
    "Don't take this class unless it's significantly restructured. The problem sets are underspecified and poorly designed; this combined with the extreme conceptual difficulty of the material & the declining willingness throughout the semester by the TFs to provide any skeleton code whatsoever made for assignments that were nigh impossible. The lectures are near devoid of content when it comes to useful information about coding the assignments.",
    "Yes, especially for the following two reasons: 1. Building a large system is not an experience one has in typical Yale CS classes. In this class, you'll build an entire operating system from scratch, with only relatively minimal portions being provided for you. 2. If you want to optimize for a particular system, you obviously have to understand how it works -- this class teaches you the framework through which such an understanding is possible.",
    "Great class, not as bad when you have partners. Solo would be a challenge.",
    "I wasn't super excited about this course when I started - mostly did it because not many other CS electives seemed appealing - nor did the lectures whet my appetite much. But working on the assignments turned out to be pretty fulfilling, because you sort of get to build up a kernel as go along. A lot of the important components are already filled out, and the layering of different kernel components may make the earlier assignments feel overly guided, but that just meant we could focus more on understanding and implementing things cleanly. Overall the assignments are still pretty tough, but grading is less harsh than CS232 and CS323 because there aren't as many automated tests to pass (I believe the TFs manually test your code for many of the later assignments), and you have lots of discretionary late hours. I'd say the amount of learning I got from working on the assignments made up for the more mediocre lecture style (even though Flint does do really interesting research), so if you're confident about your C programming and don't mind going through the lectures, take the course.",
    "If you really want to understand system design and abstractions, take this class. It was the best taught, best organized, best structured CS class I have taken. The design of all the abstractions that make an operating system is really interesting, and it was very fun to listen to Shao talk about OS stuff and sometimes go on tangents to talk about sci-fi. The assignments are structured in layers, where you fill in small parts of mCertiKOS, an operating system developed by Shao's team. The TA's are very helpful and responsive. It's a partner based class, although you can choose to do the assignments alone if you wish. The programming is more conceptual.. you really need to think about what you're going to write, even if the total number of lines isn't that much. Overall, this was one of the best CS classes I have taken, and I think it helped me solidify and expand upon the things we began to learn about in 323.",
    "Absolutely. Never learned so much about Computer Science by taking a Yale course before.",
    "Operating systems with Prof. Shao is a great course if you're interested in what's happening under the hood. You spend a decent amount of time messing around with low level c (pointer and bit arithmetic) and some assembly, which some people aren't excited about but I really enjoyed. Although it is a decent amount of work, psets are less stressful because grading is pretty lenient and you get to work with a partner. Lecture is pretty dry, but you need some of the info for the midterm\/psets so look through lecture notes and textbook for anything you miss."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "422",
  "section": 1
 }
}