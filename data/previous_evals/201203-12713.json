{
 "crn_code": "12713",
 "season": "201203",
 "legacy_coursetable_course_id": 17982,
 "enrollment": {
  "enrolled": 59,
  "responses": null,
  "declined": null,
  "no response": null
 },
 "ratings": [
  {
   "question_id": "YC005",
   "question_text": "Overall, how would you rate the workload of this course in comparison to other Yale courses you have taken?",
   "options": [
    "Much Less",
    "Less",
    "Same",
    "Greater",
    "Much Greater"
   ],
   "data": [
    0,
    0,
    0,
    12,
    37
   ]
  },
  {
   "question_id": "YC006",
   "question_text": "What is your overall assessment of this course?",
   "options": [
    "Poor",
    "Below Average",
    "Good",
    "Very Good",
    "Excellent"
   ],
   "data": [
    0,
    2,
    10,
    20,
    17
   ]
  },
  {
   "question_id": "YC007",
   "question_text": "Do you expect to use this class for credit toward your major, or toward a pre-professional program?",
   "options": [
    "Yes",
    "No"
   ],
   "data": [
    46,
    3
   ]
  }
 ],
 "narratives": [
  {
   "question_id": "YC004",
   "question_text": "How would you summarize ECON 110 05 for a fellow student? Would you recommend ECON 110 05 to another student? Why or why not?",
   "comments": [
    "If you're a CS major, stop reading the reviews. You're obviously going to need to take this class.If you're not a CS major but enjoy solving problems with C, this is the class for you. It'll give you a brief overview of computer architecture and you may find some topics more interesting than others (i.e. Cache\/Virtual Memory, Networks, Pipelining, etc.). The homework assignments vary from year to year and can be quite difficult. But because most of the homework is in C, you will emerge as a more meticulous and organized programmer.",
    "It's required. You need to take it. It's not nearly as hard as everyone says, but for the love of god, start working on assignments early or you WILL suffer.",
    "This course is one of the first courses that I have taken where I didn't feel like the course was only meant to teach you skills to be applied in future classes. The programs that you write in CS323 (a file archiver, a compression\/decompression algorithm, a parser, and the back end of a shell) will leave you with a great sense of accomplishment. I would definitely recommend taking this course.",
    "I mean, it's 323. You feel quite a sense of accomplishment coming out of it. Stan is always extraordinarily understanding and willing to help you out personally when struggling on assignments. And I personally found the material covered in lecture very interesting.",
    "Well if youre looking at this you probably have to take 323. If not, and you wanted to get better at programming, heres your chance!",
    "If you aren't CS, then you really have to love CS. I'm assuming if you're thinking about it you know what you're getting into, but, if not, talk to a friend who has taken it. It's a lot.",
    "Start lzw early. Start the shell early. Start the first assignment early. This course requires a lot of time, but it does not need to be as terribly difficult as others have said. And Eisenstat is great.",
    "The workload is big, so take it only if you really like computer science and you are willing to invest a big amount of time in the assignments. In my case this was the best class this semester, I feel that my computer science skills improved exponentially.",
    "323 is a classic. It's tough, but not as tough as people say. Expect it to take a lot of your time, and expect to come out of it proud of what you have achieved.",
    "If you have to take it do so. Otherwise don't. Some people have spent over 100 hours total on just 5 problem sets.",
    "The problem sets will make you a better programmer, and they're not too onerous if you start them in advance and plan them out before you start coding. The lectures are slow.",
    "Challenging course that teaches you how to solve non-trivial CS problems by experience. The teaching is clear (not that exciting), but only gives you the basics of systems programming. This class takes on average 120 hours per semester, with a range of 60-180. Be very careful and methodical in your coding; if you code messily you will die in this class. **** Learn some principles of C (e.g. good coding practices, how to deal with memory properly, put your code in small functions) before you start this course or at the start of this course because it is expected that you know it. The theoretical readings are completely optional for a good grade.",
    "if you are willing to put in the time, take it.",
    "This course is exceptionally time consuming. I spent about twice as long on it as any other course I've taken, and this may have taken more time than the other four courses I was taking alongside it combined. However, it was my favorite course. The level of confidence I gained in my programming cannot be understated. Looking back on my first pset, it's incredible how much better I've gotten. The weakness of this course is the actual course content, which is much about computer architecture and did not interest me, is notAT ALL related to the problem sets, which were fantastic.",
    "If you're a CS major, you're going to have to take this course. It is a FABULOUS class in my opinion. Eisenstat is great, and the assignments really do make you a more careful and better programmer. It's honestly not as bad as everyone makes it out to be. LZW does take a far amount of time, so you should probably start it early, but this class is definitely very manageable.",
    "Definitely a must take for someone who wants to learn systems programming and computer architecture at afundamental level. You will enjoy this class if you like working on the back-end of software rather than UI\/front-end.If you decide to take this class, hold on tight and get ready for the long and excruciating but yet very rewarding ride in this roller coaster. All the C problem sets took at least 20-25 hrs but were very educative in the end. You get to do cool stuff like build a compression utility and simple linux shell. I would recommend getting started on the problem sets as soon as possible rather than put them off for later.Do NOT even think about taking any other programming intensive class, otherwise you'll get thrown off this roller coaster. At the very least you will have an unpleasant and bumpy ride if you take any other work intensive class with CS323. I ended up spending more time on this class than all my other four classes combined.",
    "An interesting overview of topics in low-level programming and computer nut&volts. If you pay attention and work hard, you'll learn a lot.",
    "As a theory person, I wasn't too excited to be taking this course. However, whatever your leanings may be, as a computer science student, it's your responsibility to learn systems programming. That being said, this course was an excellent way to force you to take on that responsibility. The course revolves around problem sets; the main skills involved are testing and debugging, rather than devising algorithms. The hard assignments are implementing the LZW data compression algorithm and building a robust backend for a shell. Procrastinate with caution.",
    "Well, it is a requirement for the cs major so all majors have to take it.",
    "This class has interesting, challenging problem sets that I found pretty enjoyable. After 223, this class continues to build a strong foundation in C. It was also really great to get experience with the system libraries. Some of the material can be a bit dry, but you'll leave with a feeling of greater general computer understanding.",
    "Take it if you're a major; else stay away. I found the material to be very boring. I did not enjoy this course. I always dislike courses where the amount of work I put in is disproportionately greater than the grade I get. In this course I always started assignments early, envisioned corner cases, and then still fared poorly on the private testing scripts. Read the problem set specs carefully. The private tests will be surprisingly difficult. I suppose Eisenstat explains things clearly, but I felt that he made no effort to make me excited about what I was learning.",
    "323 is a great class. If you're a CS major you'll have to take it, but I would recommend it for anyone who's very interested in how computers actually work (and who is willing to put in the work the class requires). Stan isn't kidding when he advises you to start early on the problem sets....",
    "Really tough course. A lot of work (25-40 hour homeworks). Only take if required for major.",
    "Take it if you are serious about CS. You will learn a lot, but it is not an easy course.",
    "The course describes several disjoint topics relating to computer systems architecture. Lectures are very clear and interesting. Problem sets usually have little to do with the topics covered in lecture, though. These can take over twenty hours to complete (in a two week period).",
    "You'll learn a ton, but it will be harder than usual to get a good grade, and keep up with everything else. I would 100% recommend it unless your desires depend fully on a high GPA.",
    "No",
    "Great course to take to learn about how modern computers work in some detail, and to get solid C programming skills. The problem set workload is manageable if you're making a bit commitment to the class, but it will crowd out work from other classes. Would advise caution for any non-CS majors who don't have to take the course.",
    "Only take it if you are really interested or if you need it for your major. The course load is much greater.",
    "If you're a CS major you have to take it. For non-majors, there are better CS classes.",
    "Assignments are tough, but don't hesitate to ask for help when you get stuck. LZW and Csh are really tough assignments, so make sure you do really well on the other assignments just in case. The two midterms were not too difficult or stressful, which was nice.",
    "About five times harder than 223 was with Aspnes. It's notorious for being the hardest core CS class and I can't disagree at this point. Lecture's are straightforward but a little dry, and exams are solely on them so they aren't too bad. The problem sets are what make this class ridiculous with an average of 15-25 hours per set every two weeks. Eisenstat is great though, super super responsive to all student emails and questions and always willing to help! If you're a CS major you'll have to take it or take something \"harder\"\/more advanced - it's up to you if you want to learn more about systems and do tons of stuff in C, or something else. If you're not in the major, it is a mountain load or work and should not be taken just \"out of interest\", you'd be better off with 223 Data Structures (fundamental) or another course.",
    "Delightful. Eisenstat is a fabulous and really quite humorous lecturer. Just as good as 223 with Professor Eisenstat and for me (though I'm not a CS major) slightly easier conceptually. Make sure to read the assignments to get the most out of class and don't make my mistake - taking it with 5 other science credits. You simply won't enjoy it if you can't put the time into it.",
    "Amazing class!",
    "Very hard.",
    "A staple. The lectures are well-delivered, and Eisenstat's taught this for as far as anyone can remember, so the polish is obvious. A bit on the dry side sometimes. The programming is perhaps a bigger part of class than even the lectures, and for this, I'd highly recommend practicing some application programming before you get into the class. Try to write applications that rename all the files in a directory, or something like that; get your hands dirty. The learning curve is pretty steep for those with only CS experience from classes."
   ]
  }
 ],
 "extras": {
  "subject": "CPSC",
  "number": "323",
  "section": 1
 }
}